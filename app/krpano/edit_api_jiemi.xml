<krpano>
    <layer name="layer_container" keep="true" type="container" align="topleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="1">
        <layer name="info_container" keep="true" type="container" align="topleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10">
            <layer name="title_layer" keep="true" align="topcenter" zorder="200"/>
        </layer>
        <layer name="auth_container" keep="true" type="container" align="topleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10">
            <layer name="auth_layer" keep="true" align="topleft" visible="false"/>
        </layer>
        <layer name="start_image_container" keep="true" type="container" align="topleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10">
            <layer name="start_image_layer" keep="false" align="center" zorder="201"/>
        </layer>
        <layer name="logo_container" keep="true" type="container" align="topleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10">
            <layer name="logo_layer" keep="true" align="topleft"/>
            <layer name="logo_detail_container" type="container" align="topleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10"/>
        </layer>
        <layer name="feature_container" keep="true" type="container" align="topleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10">
            <layer name="more_layer" keep="true" align="topright" visible="false"/>
            <layer name="fullscreen_layer" keep="true" align="topright"/>
            <layer name="sound_layer" keep="true" align="topright"/>
            <layer name="voice_layer" keep="true" align="topright"/>
            <layer name="gyro_layer" keep="true" align="topright"/>
            <layer name="vr_layer" keep="true" align="topright"/>
            <layer name="multi_view_layer" keep="true" align="topright"/>
            <layer name="multi_resolution_layer" keep="true" align="topright"/>
            <layer name="comment_layer" keep="true" visible="false" align="bottomright"/>
            <layer name="like_layer" keep="true" visible="false" align="bottomright"/>
            <layer name="location_layer" keep="true" visible="false" align="bottomright"/>
            <layer name="qr_layer" keep="true" visible="false" align="bottomright"/>
            <layer name="intro_layer" keep="true" visible="false" align="bottomright"/>
        </layer>
        <layer name="menu_container" keep="true" type="container" align="bottomleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10">
            <layer name="thumb_container" keep="true" type="container" align="bottomleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10">
                <layer name="category_container" keep="true" type="container" align="bottomleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10" />
                <layer name="thumb_container" keep="true" type="container" align="bottomleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10" />
            </layer>
            <layer name="links_container" keep="true" type="container" align="bottomleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10" />
            <layer name="autotour_container" keep="true" type="container" align="bottomleft" width="100%" height="100%" maskchildren="true" visible="true" bgcapture="false" zorder="10" />
        </layer>
    </layer>
    <layer name="radar_container" keep="true" type="container" align="topleft" width="100%" height="100%" maskchildren="fasle" visible="true" bgcapture="false" zorder="10">
        <layer name="radar_layer" keep="true" type="container" align="topright" width="100%" height="100%" maskchildren="false" visible="true" bgcapture="false" zorder="10"/>
    </layer>

    <action name="setup_js_bridge">
  set(js_show_loading,window.krpToggleLoading(true));
  set(js_hide_loading,window.krpToggleLoading(false));
  set(js_start_comment,window.krpShowModal('SPEAK_MODAL'));
  set(js_stop_comment,window.krpDismissModal());
  set(js_modify_comment,window.krpShowComments);
  set(js_do_like,window.krpLike());
  set(js_show_qr,window.krpShowModal('QR_MODAL'));
  set(js_show_more,window.krpShowModal('DETAIL_MODAL'));
  set(js_show_intro,window.krpShowModal('INTRO_MODAL'));
  set(js_show_intro_client,window.krpShowModal('INTRO_MODAL',{"from":"config.info.desc"}));
  set(js_show_iframe,'window.krpShowModal("URL_MODAL",{"url":"');
  set(js_show_location,window.krpShowModal('MAP_MODAL'));
  set(js_modify_url,window.krpModifyURL);
  set(js_enable_gyro,window.krpShowTip("陀螺仪已开启"));
  set(js_disable_gyro,window.krpShowTip("陀螺仪已关闭"));
  set(js_show_comments,window.krpShowTip("说一说已开启"));
  set(js_hide_comments,window.krpShowTip("说一说已隐藏"));
  set(js_sound_on,window.krpShowTip("背景音乐已开启"));
  set(js_sound_off,window.krpShowTip("背景音乐已关闭"));
  set(js_voice_on,window.krpShowTip("语音解说已开启"));
  set(js_voice_off,window.krpShowTip("语音解说已关闭"));
  set(js_require_password,window.krpRequirePassword());
  set(js_xml_ready,window.onKrpXMLReady());

  set(js_video_hotspot,'window.krpShowModal("VIDEO_MODAL",');
  set(js_text_hotspot,'window.krpShowModal("TEXT_MODAL",');
  set(js_gallery_hotspot,'window.krpShowModal("GALLERY_MODAL",');
  set(js_mix_hotspot,'window.krpShowModal("MIX_MODAL",');
  set(js_viewer_hotspot,'window.krpShowModal("VIEWER_MODAL",');

    </action>




    <action name="show_loading">
  jscall(get(js_show_loading));
    </action>

    <action name="hide_loading">
  jscall(get(js_hide_loading));
    </action>





    <action name="modalClosed">
  resume_autoplay();
  if(video_is_show == true,
    resume_sound();
    resume_voice();
  );
    </action>

    <action name="passwordCorrect">
    set(config.feature.enable_password,0);
    startup();
    </action>




    <action name="dispose">
   removelensflare("obj");
   removeplugin(snow);
   set(autorotate.enabled, true);
    </action>

    <settings first_pano_inited="false" client="false" sound_play_id="play_sound_id" sound_playing="false" sound_on="true" voice_play_id="play_voice_id" voice_playing="false" voice_on="true" bottom_right_btn_width="55" menu_btn_width="70" pano_thumbs_width="80" pano_thumbs_height="80" pano_thumbs_padding_v="10" pano_thumbs_padding_h="20" category_thumbs_width="100" category_thumbs_height="100" category_thumbs_padding_v="10" category_thumbs_padding_h="30" category_thumbs_bg_crop="0|0|218|218" category_thumbs_bg_crop_selected="218|241|218|218" thumb_btn_url="krp/system/piclist.png" start_image_desktop="krp/skin/mouseAlert.png" start_image_mobile="krp/skin/touchAlert.png" circle_mask="krp/skin/ground-logo.png" rain_image="krp/skin/rain.png" snow_image="krp/skin/snow.png" snow_js="krp/plugins/snow.js" snow_swf="krp/plugins/snow.swf" map_zoom_image="krp/skin/mapZoom.png" close_image="krp/skin/close.png" embed_txt_image="krp/skin/embed_txt_bg.png" weather_image_1="krp/skin/hongbao.png" weather_image_2="krp/skin/hongbao1.png" weather_image_3="krp/skin/hongbao2.png" comment_add_head_bg_image="krp/skin/comment_add_head_bg.png" comment_edit_line_image="krp/skin/editLine.png" comment_edit_bg_image="krp/skin/editBg.png" custom_weather_image_4="krp/skin/hongbao.png" custom_weather_image_5="krp/skin/hongbao1.png" custom_weather_image_6="krp/skin/hongbao2.png" feipai_logo_url="%$PLAYER_DOMAIN%/source/720_feipai.png" />



    <plugin_url BASE_URL="krp/plugins/" TEXT_SWF="calc:plugin_url.BASE_URL + 'textfield.swf'" GYRO="calc:plugin_url.BASE_URL + 'gyro2.js'" SOUND_SWF="calc:plugin_url.BASE_URL + 'soundinterface.swf'" SOUND_JS="calc:plugin_url.BASE_URL + 'soundinterface.js'" SCROLL_SWF="calc:plugin_url.BASE_URL + 'scrollarea.swf'" SCROLL_JS="calc:plugin_url.BASE_URL + 'scrollarea.js'" RADAR_SWF="calc:plugin_url.BASE_URL + 'radar.swf'" RADAR_JS="calc:plugin_url.BASE_URL + 'radar.js'" SNOW_SWF="calc:plugin_url.BASE_URL + 'snow.swf'" SNOW_JS="calc:plugin_url.BASE_URL + 'snow.js'" PLUGINS_SUN_IMAGE="calc:plugin_url.BASE_URL + 'lensflareset/lensflares.jpg'" WEBVR_JS="calc:plugin_url.BASE_URL + 'webvr.js'" WEBVR_XML="calc:plugin_url.BASE_URL + 'webvr.xml'" />


    <contextmenu keep="true" fullscreen="true" enterfs="全屏" exitfs="退出全屏" separator="true">

        <item name="copyright" caption="720yun - 全景看世界" enabled="true" visible="false" separator="true" onclick="openurl(http://720yun.com);" />


        <item name="ccagreement" caption="cc协议" enabled="true" visible="false" separator="true" onclick="set(ccurl,http://bbs.720yun.com/forum.php?mod=viewthread%26tid=34);unescape(ccurl);openurl(get(ccurl));" />

        <item name="normalView" caption="正常视角" onclick="cm_normal_view();" separator="true" />

        <item name="planetView" caption="小行星视角" onclick="cm_littleplanet_view();" separator="false" />

    </contextmenu>


    <control mouse="moveto" keycodesin="16,65,107" keycodesout="17,89,90,109" bouncinglimits="true" />


    <events onclick="on_click();" onmousedown="on_mouse_down();" onautorotateoneround="load_pano_loop();" />

    <action name="on_click">
  if(category_thumbs_show == true,
    toggle_category_thumbs();
  );
    </action>


    <action name="on_mouse_down">

  if(device.ios == true AND fixios != true,
    if(settings.voice_on == true AND settings.sound_on == true AND settings.sound_playing == true,
      pause_sound();
      resume_sound();
    );
    set(fixios,true);
  );


    </action>




    <action name="showtext_install" autorun="preinit">
                                                                                  
    set(showtext, action(showtext_xml,%%1,%%2) );
                                          
    set(showtext_style, DEFAULT);
    set(showtext_prevstyle, null);
    set(showtext_text, '');
    set(showtext_prevtext, '');
    set(showtext_timeout, 0.1);
    set(showtext_fadeout, 0.0);
    set(showtext_clipping, false);
    </action>


    <action name="showtext_xml">
    set(showtext_style, DEFAULT);
    if(%2 != null, ifnot(textstyle[%2], trace('textstyle "%2" not found'); , set(showtext_style,%2)); );

    set(showtext_text, %1);
    if(showtext_text != showtext_prevtext,
      copy(showtext_prevtext, showtext_text);
      showtext_createnewtext();
      ,
      delayedcall(showtext_timer, get(showtext_timeout), showtext_hide() );
      );
    </action>


    <action name="showtext_createnewtext">
                                                      
    stopdelayedcall(showtext_mouseupdates);
    stoptween(layer[showtext_tf].alpha);

                                                                
    if(showtext_style != showtext_prevstyle,
      copy(showtext_prevstyle, showtext_style);
      removelayer(showtext_tf);
      );

                                                
    addlayer(showtext_tf);

                                                                  
    copy(tf, layer[showtext_tf]);
    copy(ts, textstyle[get(showtext_style)]);

                                      
    if(ts.origin !== null, copy(ts_origin,  ts.origin),  set(ts_origin, 'cursor'));
    if(ts.edge !== null, copy(ts_edge,    ts.edge),    set(ts_edge, 'bottom'));
    if(ts.xoffset !== null, copy(ts_xoffset, ts.xoffset), set(ts_xoffset, 0));
    if(ts.yoffset !== null, copy(ts_yoffset, ts.yoffset), set(ts_yoffset, -3));

                                      
    if(ts_origin == 'cursor',
      set(tf.align, 'lefttop');
      showtext_movetomouse();
      ,
      copy(tf.align, ts_origin);
      );
    copy(tf.edge, ts_edge);
    copy(tf.ox, ts_xoffset);
    copy(tf.oy, ts_yoffset);

                                  
    if(ts.font !== null, copy(ts_font,      ts.font),      set(ts_font, 'Times'));
    if(ts.fontsize !== null, copy(ts_fontsize,  ts.fontsize),  set(ts_fontsize, 12.0));
    if(ts.bold !== null, copy(ts_bold,      ts.bold),      set(ts_bold, true));
    if(ts.italic !== null, copy(ts_italic,    ts.italic),    set(ts_italic, false));
    if(ts.textcolor !== null, copy(ts_textcolor, ts.textcolor), set(ts_textcolor, 0x000000));
    if(ts.textalign !== null, copy(ts_textalign, ts.textalign), set(ts_textalign, 'left'));

                                                         
    set(tf_css, '');
    tohex(ts_textcolor, '#', 6);
    txtadd(tf_css, 'font-family:',get(ts_font),'; font-size:',get(ts_fontsize),'px; color:',get(ts_textcolor),'; ');
    if(ts_textalign != 'none', txtadd(tf_css, get(tf_css), 'text-align:',get(ts_textalign),'; '));
    if(ts_bold,   txtadd(tf_css, 'font-weight:bold; '));
    if(ts_italic, txtadd(tf_css, 'font-style:italic; '));
    if(ts.css !== null, txtadd(tf_css, get(ts.css)));
    copy(tf.css, tf_css);

                          
    if(ts.width !== null, copy(tf.width,   ts.width));
    if(ts.height !== null, copy(tf.height,  ts.height));
    if(ts.vcenter !== null, copy(tf.vcenter, ts.vcenter));
    if(ts.padding !== null, copy(tf.padding, ts.padding), set(tf.padding,1));

                                                
    if(ts.background !== null, copy(tf.background,      ts.background));
    if(ts.backgroundcolor !== null, copy(tf.backgroundcolor, ts.backgroundcolor));
    if(ts.backgroundalpha !== null, copy(tf.backgroundalpha, ts.backgroundalpha));
    if(ts.border !== null, copy(tf.border,          ts.border), set(tf.border,true));
    if(ts.bordercolor !== null, copy(tf.bordercolor,     ts.bordercolor));
    if(ts.borderalpha !== null, copy(tf.borderalpha,     ts.borderalpha));
    if(ts.borderwidth !== null, copy(tf.borderwidth,     ts.borderwidth));
    if(ts.roundedge !== null, copy(tf.roundedge,       ts.roundedge));
    if(ts.shadow !== null, copy(tf.shadow,          ts.shadow));
    if(ts.shadowrange !== null, copy(tf.shadowrange,     ts.shadowrange));
    if(ts.shadowangle !== null, copy(tf.shadowangle,     ts.shadowangle));
    if(ts.shadowcolor !== null, copy(tf.shadowcolor,     ts.shadowcolor));
    if(ts.shadowalpha !== null, copy(tf.shadowalpha,     ts.shadowalpha));
    if(ts.textshadow !== null, copy(tf.textshadow,      ts.textshadow));
    if(ts.textshadowrange !== null, copy(tf.textshadowrange, ts.textshadowrange));
    if(ts.textshadowangle !== null, copy(tf.textshadowangle, ts.textshadowangle));
    if(ts.textshadowcolor !== null, copy(tf.textshadowcolor, ts.textshadowcolor));
    if(ts.textshadowalpha !== null, copy(tf.textshadowalpha, ts.textshadowalpha));

                             
    if(ts.alpha !== null, copy(ts_alpha,      ts.alpha),      set(ts_alpha, 1.0));
    if(ts.showtime !== null, copy(ts_showtime,   ts.showtime),   set(ts_showtime, 0.1));
    if(ts.fadetime !== null, copy(ts_fadetime,   ts.fadetime),   set(ts_fadetime, 0.0));
    if(ts.fadeintime !== null, copy(ts_fadeintime, ts.fadeintime), set(ts_fadeintime, 0.0));
    copy(showtext_timeout, ts_showtime);
    copy(showtext_fadeout, ts_fadetime);
    if(ts_fadeintime GT 0,
      set(tf.alpha, 0.0);
      tween(layer[showtext_tf].alpha, get(ts_alpha), get(ts_fadeintime), linear);
      ,
      copy(tf.alpha, ts_alpha);
      );

    if(ts.noclip !== null, copy(showtext_clipping,ts.noclip), set(showtext_clipping, true));

    if(showtext_clipping,
      set(tf.onloaded,    showtext_do_clipping() );
      set(tf.onautosized, showtext_do_clipping() );
      );

                                        
    if(ts.embeddedfonts !== null, copy(tf.embeddedfonts, ts.embeddedfonts));
    if(ts.effect !== null, copy(tf.effect,        ts.effect));
    if(ts.blendmode !== null, copy(tf.blendmode,     ts.blendmode));

                                                                               
    copy(tf.html, showtext_text);
    set(tf.enabled, false);
    set(tf.zorder, 3000);
    if(ts.parent, copy(tf.parent, ts.parent) );
    set(tf.url,get(plugin_url.TEXT_SWF));


                                          
    delete(ts);
    delete(tf);

                                        
    delayedcall(showtext_timer, get(showtext_timeout), showtext_hide() );
    </action>


    <action name="showtext_do_clipping">
    if(showtext_clipping,
      layer[showtext_tf].updatepos();
      copy(tf_px, layer[showtext_tf].pixelx);
      copy(tf_py, layer[showtext_tf].pixely);
      if(tf_px LT 0,
        sub(layer[showtext_tf].x, tf_px);
        ,
        add(tf_rightedge, tf_px, layer[showtext_tf].pixelwidth);
        if(tf_rightedge GE stagewidth, sub(tf_rightedge,stagewidth); sub(layer[showtext_tf].x,tf_rightedge); );
        );
      if(tf_py LT 0,
        sub(layer[showtext_tf].y,  tf_py);
        ,
        add(tf_bottomedge, tf_py, layer[showtext_tf].pixelheight);
        if(tf_bottomedge GE stageheight, sub(tf_bottomedge,stageheight); sub(layer[showtext_tf].y,tf_bottomedge); );
        );
      );
    </action>


    <action name="showtext_movetomouse">
    copy(layer[showtext_tf].x, mouse.stagex);
    copy(layer[showtext_tf].y, mouse.stagey);
    showtext_do_clipping();
    delayedcall(showtext_mouseupdates, 0, showtext_movetomouse() );
    </action>


    <action name="showtext_hide">
    if(layer[showtext_tf],
      tween(layer[showtext_tf].alpha, 0.0, get(showtext_fadeout), linear,
          stopdelayedcall(showtext_mouseupdates);
          removelayer(showtext_tf);
          set(showtext_text, '');
          set(showtext_prevtext, '');
        );
      );
    </action>



    <textstyle name="tooltipTextStyle" font="STXihei" fontsize.no-mobile="14" fontsize.mobile="18" bold="false" background="true" backgroundcolor="0x000000" backgroundalpha="0.667" border="true" borderwidth="2" bordercolor="0xFFFFFF" roundedge="5" textcolor="0xFFFFFF" padding="6 10" textalign="center" yoffset.no-touch="-5" yoffset.touch="-40" />

    <action name="startup" autorun="onstart">

  copy(config.is_sdk,IS_SDK);
  copy(config.is_feipai, IS_FEIPAI);

                              
  setup_js_bridge();

  if(config.feature.enable_password == 1 AND displayMode.preview != 1 AND displayMode.export != 1,
    setup_password();
    ,
    setup_startup_vars();
    setup_start_pano();
    if(displayMode.online == true OR displayMode === null,
      jscall(get(js_xml_ready));
    );
  );

    </action>

    <action name="setup_hide_exitfullscreen">
  addlayer(hide_exit_layer);
  set(layer[hide_exit_layer].type,container);
  set(layer[hide_exit_layer].align,left);
  set(layer[hide_exit_layer].x,0);
  set(layer[hide_exit_layer].y,0);
  set(layer[hide_exit_layer].width,30);
  set(layer[hide_exit_layer].height,100);
  set(layer[hide_exit_layer].bgcolor,0x000000);
  set(layer[hide_exit_layer].bgalpha, 0);
  set(layer[hide_exit_layer].bgcapture,true);
  set(layer[hide_exit_layer].zorder,350);
  set(layer[hide_exit_layer].keep,true);
  set(layer[hide_exit_layer].onclick,
    if(exit_flag === null,
      set(exit_flag,1);
      delayedcall(2,set(exit_flag,null););
      ,
      add(exit_flag,1);
      if(exit_flag GT 4,
        set(fullscreen,false);
        set(exit_flag,null);
      );
    );
  );


    </action>

    <action name="setup_startup_vars">

  if(device.mobile,
    set(customScale, 1);
    if(stagewidth LT stageheight,
      div(customScale, stagewidth,540);
      ,
      div(customScale, stageheight,360);
    );
    if(customScale LT 0.5,
      set(customScale,0.7);
    );
    if(customScale GT 0.8,
      set(customScale, 0.75);
    );
    copy(stagescale,customScale);
  );

  set(events.onpreviewcomplete,on_preview_complete());

  if(pano_id === null,
    copy(pano_id,config.thumbs.category[0].pano[0].pano_id);
    ,
    for(set(i,0), i LT config.panos.pano.count, inc(i),
      if(pano_id == config.panos.pano[get(i)].info.pano_id,
        set(pano_id_valid,true);
      );
    );
    if(pano_id_valid != true,
      copy(pano_id,config.thumbs.category[0].pano[0].pano_id);
    );
  );
  txtadd(scene_name,scene_, get(pano_id));

                                  
  for(set(o,0), o LT config.thumbs.category.count, inc(o),
    for(set(i,0), i LT config.thumbs.category[get(o)].pano.count, inc(i),
      if(pano_id == config.thumbs.category[get(o)].pano[get(i)].pano_id,
        copy(current_category_index,o);
      );
    );
  );

  if(displayMode !== null,
    set(settings.client,true);
    set(MEDIA_DOMAIN,"");
  );

  setup_contextmenu();

  set(view_type,0);
    </action>

    <action name="setup_start_pano">

  loadscene(get(scene_name));

  if(displayMode.online == true OR displayMode === null,
    set(modify_id_cmd,get(js_modify_url));
    txtadd(modify_id_cmd,"('");
    txtadd(modify_id_cmd,get(pano_id));
    txtadd(modify_id_cmd,"')");
    jscall(get(modify_id_cmd));
  );
  set(view.fovtype, MFOV);
  if(config.feature.enable_littleplanet == 1,
    setup_littleplanet_view();
  );
    </action>
    <action name="on_preview_complete">

  hide_loading();

  if(config.feature.enable_littleplanet == 1,

    setup_weather();
    setup_littleplanet();
    delayedcall(0.2,
      setup_bottom_mask();
    );

    ,
    setup_pano_settings();
    if(settings.first_pano_inited == false,
      setup_global_settings();
    );
  );

  if(isAutoTouring AND isAutoTourPause == false,
    pause_autoplay();
    delayedcall(0.5,autoTourPlay(););
  );

    </action>

    <action name="setup_pano_settings">

  setup_top_mask();

  setup_view();
  if(is_clean != 1,
    setup_title();
    setup_music();
    setup_radar();
    setup_layout();
    setup_embed();
    setup_hotspot();

    if(config.feature.enable_littleplanet == 0,
      setup_bottom_mask();
      setup_weather();
    );

    if(isAutoTouring == true,
      hide_ui();
      ,
      show_ui();
    );
    ,
    if(config.feature.enable_littleplanet == 0,
      setup_bottom_mask();
      setup_weather();
    );
  );

    </action>


    <action name="setup_global_settings">

  delayedcall(0.5,

    setup_autoplay();
    setup_start_image();

    if(is_clean != 1,
      setup_logo();
      setup_gyro();
      setup_auth();
      setup_pv_like();
      setup_links();
      setup_bottom_btn();
      setup_thumbs();
      setup_fullscreen();
      setup_vr();
      setup_autotour();
      setup_multi_view();
      setup_multi_resolution();

      set(settings.first_pano_inited, true);
      set(config.feature.enable_littleplanet, 0);
      setup_layout();
      show_pano_comments();
    );
    set(settings.first_pano_inited, true);
    set(config.feature.enable_littleplanet, 0);
  );


                                                      

    </action>


    <action name="setup_layout">




    set(feature_offset,5);
    set(feature_offset_size,45);


    if(layer[more_layer].visible,
      copy(layer[more_layer].y,feature_offset);
      add(feature_offset,feature_offset_size);
    );

    if(layer[fullscreen_layer].visible,
      copy(layer[fullscreen_layer].y,feature_offset);
      add(feature_offset,feature_offset_size);
    );

    if(layer[sound_layer].visible,
      copy(layer[sound_layer].y,feature_offset);
      add(feature_offset,feature_offset_size);
    );

    if(layer[voice_layer].visible,
      copy(layer[voice_layer].y,feature_offset);
      add(feature_offset,feature_offset_size);
    );


    if(layer[vr_layer].visible,
      copy(layer[vr_layer].y,feature_offset);
      add(feature_offset,feature_offset_size);
    );

    if(layer[gyro_layer].visible,
      copy(layer[gyro_layer].y,feature_offset);
      add(feature_offset,feature_offset_size);
    );

    if(layer[multi_view_layer].visible,
      copy(layer[multi_view_layer].y,feature_offset);
      add(feature_offset,feature_offset_size);
    );

    if(layer[multi_resolution_layer].visible,
      copy(layer[multi_resolution_layer].y,feature_offset);
      add(feature_offset,feature_offset_size);
    );


    set(bottom_right_offset,10);

    if(layer[comment_layer].visible == true,
      copy(layer[comment_layer].x,bottom_right_offset);
      add(bottom_right_offset,settings.bottom_right_btn_width);
    );

    if(layer[like_layer].visible == true,
      copy(layer[like_layer].x,bottom_right_offset);
      add(bottom_right_offset,settings.bottom_right_btn_width);
    );

    if(layer[qr_layer].visible == true,
      copy(layer[qr_layer].x,bottom_right_offset);
      add(bottom_right_offset,settings.bottom_right_btn_width);
    );

    if(layer[intro_layer].visible == true,
      copy(layer[intro_layer].x,bottom_right_offset);
      add(bottom_right_offset,settings.bottom_right_btn_width);
    );

    if(layer[location_layer].visible == true,
      copy(layer[location_layer].x,bottom_right_offset);
      add(bottom_right_offset,settings.bottom_right_btn_width);
    );

    setup_layout_template();

    </action>
    <action name="setup_multi_resolution">
  set(resolution_type,0);
  if(config.feature.enable_resolution == 1 AND !device.desktop,
    set(layer[multi_resolution_layer].enabled,true);
    set(layer[multi_resolution_layer].scale,0.5);
    set(layer[multi_resolution_layer].x,5);
    set(layer[multi_resolution_layer].crop,324|589|64|65);
    layer[multi_resolution_layer].loadstyle(skin_style);
    set(layer[multi_resolution_layer].onclick,
      show_multi_resolution();
    );
    set(layer[multi_resolution_layer].visible,true);

    addlayer(multi_resolution_bg);
    set(layer[multi_resolution_bg].type,container);
    set(layer[multi_resolution_bg].align,center);
    set(layer[multi_resolution_bg].alpha,1);
    set(layer[multi_resolution_bg].x,0);
    set(layer[multi_resolution_bg].y,0);
    set(layer[multi_resolution_bg].width,100%);
    set(layer[multi_resolution_bg].height,100%);
    set(layer[multi_resolution_bg].bgcolor,0x000000);
    set(layer[multi_resolution_bg].bgalpha,0.0);
    set(layer[multi_resolution_bg].bgcapture,true);
    set(layer[multi_resolution_bg].zorder,351);
    set(layer[multi_resolution_bg].keep,true);
    set(layer[multi_resolution_bg].onclick,hide_multi_resolution(););


    addlayer(multi_resolution_btn_container);
    set(layer[multi_resolution_btn_container].type,container);
    set(layer[multi_resolution_btn_container].align,center);
    set(layer[multi_resolution_btn_container].alpha,1);
    set(layer[multi_resolution_btn_container].x,0);
    set(layer[multi_resolution_btn_container].y,0);
    set(layer[multi_resolution_btn_container].width,240);
    set(layer[multi_resolution_btn_container].height,180);
    set(layer[multi_resolution_btn_container].bgcolor,0x000000);
    set(layer[multi_resolution_btn_container].bgalpha,0.8);
    set(layer[multi_resolution_btn_container].bgcapture,true);
    set(layer[multi_resolution_btn_container].keep,true);
    set(layer[multi_resolution_btn_container].bgroundedge,20);
    set(layer[multi_resolution_btn_container].parent,layer[multi_resolution_bg]);

    addlayer(multi_resolution_title);
    set(layer[multi_resolution_title].align,center);
    set(layer[multi_resolution_title].alpha,1);
    set(layer[multi_resolution_title].x,0);
    set(layer[multi_resolution_title].y,-60);
    set(layer[multi_resolution_title].url,get(plugin_url.TEXT_SWF));
    set(layer[multi_resolution_title].html, "画质切换");
    set(layer[multi_resolution_title].bgcolor,0x000000);
    set(layer[multi_resolution_title].bgalpha,0.0);
    set(layer[multi_resolution_title].keep,true);
    set(layer[multi_resolution_title].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:24px;);
    set(layer[multi_resolution_title].parent,layer[multi_resolution_btn_container]);

    addlayer(multi_resolution_line);
    set(layer[multi_resolution_line].type,container);
    set(layer[multi_resolution_line].align,center);
    set(layer[multi_resolution_line].alpha,1);
    set(layer[multi_resolution_line].x,0);
    set(layer[multi_resolution_line].y,-30);
    set(layer[multi_resolution_line].width,100%);
    set(layer[multi_resolution_line].height,1);
    set(layer[multi_resolution_line].bgcolor,0x2d2d2d);
    set(layer[multi_resolution_line].bgalpha,1);
    set(layer[multi_resolution_line].keep,true);
    set(layer[multi_resolution_line].parent,layer[multi_resolution_btn_container]);

    addlayer(multi_resolution_normal_btn);
    set(layer[multi_resolution_normal_btn].type,container);
    set(layer[multi_resolution_normal_btn].align,center);
    set(layer[multi_resolution_normal_btn].alpha,1);
    set(layer[multi_resolution_normal_btn].x,-50);
    set(layer[multi_resolution_normal_btn].y,30);
    set(layer[multi_resolution_normal_btn].width,70);
    set(layer[multi_resolution_normal_btn].height,70);
    set(layer[multi_resolution_normal_btn].bgcolor,0xff0000);
    set(layer[multi_resolution_normal_btn].bgalpha,0.8);
    set(layer[multi_resolution_normal_btn].bgcapture,true);
    set(layer[multi_resolution_normal_btn].keep,true);
    layer[multi_resolution_normal_btn].loadstyle(skin_style);
    set(layer[multi_resolution_normal_btn].parent,layer[multi_resolution_btn_container]);
    set(layer[multi_resolution_normal_btn].onclick,change_multi_resolution(0););


    addlayer(multi_resolution_hd_btn);
    set(layer[multi_resolution_hd_btn].type,container);
    set(layer[multi_resolution_hd_btn].align,center);
    set(layer[multi_resolution_hd_btn].alpha,1);
    set(layer[multi_resolution_hd_btn].x,55);
    set(layer[multi_resolution_hd_btn].y,30);
    set(layer[multi_resolution_hd_btn].width,70);
    set(layer[multi_resolution_hd_btn].height,70);
    set(layer[multi_resolution_hd_btn].bgcolor,0xff0000);
    set(layer[multi_resolution_hd_btn].bgalpha,0.8);
    set(layer[multi_resolution_hd_btn].bgcapture,true);
    set(layer[multi_resolution_hd_btn].keep,true);
    layer[multi_resolution_hd_btn].loadstyle(skin_style);
    set(layer[multi_resolution_hd_btn].parent,layer[multi_resolution_btn_container]);
    set(layer[multi_resolution_hd_btn].onclick,change_multi_resolution(1););

    reset_multi_resolution_btn();

    hide_multi_resolution();
    setup_layout();
    ,
    set(layer[multi_resolution_layer].visible,false);
  );
    </action>
    <action name="reset_multi_resolution_btn">
    set(layer[multi_resolution_normal_btn].crop,650|115|84|84);
    set(layer[multi_resolution_hd_btn].crop,760|14|84|84);
    set(resolution_type,0);
    </action>
    <action name="change_multi_resolution">

  reset_multi_resolution_btn();
  set(resolution_type,%1);
  if(%1 == 0,
    switch_to_mobile();
    set(layer[multi_resolution_normal_btn].crop,650|115|84|84);
    set(layer[multi_resolution_hd_btn].crop,760|14|84|84);
    ,
    switch_to_multires();
    set(layer[multi_resolution_normal_btn].crop,650|14|84|84);
    set(layer[multi_resolution_hd_btn].crop,760|115|84|84);
  );
  hide_multi_resolution();
    </action>
    <action name="show_multi_resolution">
  set(layer[multi_resolution_bg].visible,true);
    </action>
    <action name="hide_multi_resolution">
  set(layer[multi_resolution_bg].visible,false);
    </action>

    <action name="setup_multi_view">
  set(view_type,0);
  if((config.is_sdk == 1 OR config.feature.enable_viewchange == 1) AND webvr.isenabled != true,
    set(layer[multi_view_layer].enabled,true);
    set(layer[multi_view_layer].scale,0.5);
    set(layer[multi_view_layer].x,5);
    set(layer[multi_view_layer].crop,324|660|64|65);
    layer[multi_view_layer].loadstyle(skin_style);
    set(layer[multi_view_layer].onclick,
      show_multi_view();
    );
    set(layer[multi_view_layer].visible,true);

    addlayer(multi_view_bg);
    set(layer[multi_view_bg].type,container);
    set(layer[multi_view_bg].align,center);
    set(layer[multi_view_bg].alpha,1);
    set(layer[multi_view_bg].x,0);
    set(layer[multi_view_bg].y,0);
    set(layer[multi_view_bg].width,100%);
    set(layer[multi_view_bg].height,100%);
    set(layer[multi_view_bg].bgcolor,0x000000);
    set(layer[multi_view_bg].bgalpha,0.0);
    set(layer[multi_view_bg].bgcapture,true);
    set(layer[multi_view_bg].zorder,351);
    set(layer[multi_view_bg].keep,true);
    set(layer[multi_view_bg].onclick,hide_multi_view(););


    addlayer(multi_view_btn_container);
    set(layer[multi_view_btn_container].type,container);
    set(layer[multi_view_btn_container].align,center);
    set(layer[multi_view_btn_container].alpha,1);
    set(layer[multi_view_btn_container].x,0);
    set(layer[multi_view_btn_container].y,0);
    set(layer[multi_view_btn_container].width,440);
    set(layer[multi_view_btn_container].height,180);
    set(layer[multi_view_btn_container].bgcolor,0x000000);
    set(layer[multi_view_btn_container].bgalpha,0.8);
    set(layer[multi_view_btn_container].bgcapture,true);
    set(layer[multi_view_btn_container].keep,true);
    set(layer[multi_view_btn_container].bgroundedge,20);
    set(layer[multi_view_btn_container].parent,layer[multi_view_bg]);

    addlayer(multi_view_title);
    set(layer[multi_view_title].align,center);
    set(layer[multi_view_title].alpha,1);
    set(layer[multi_view_title].x,0);
    set(layer[multi_view_title].y,-60);
    set(layer[multi_view_title].url,get(plugin_url.TEXT_SWF));
    set(layer[multi_view_title].html, "视角切换");
    set(layer[multi_view_title].bgcolor,0x000000);
    set(layer[multi_view_title].bgalpha,0.0);
    set(layer[multi_view_title].keep,true);
    set(layer[multi_view_title].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:24px;);
    set(layer[multi_view_title].parent,layer[multi_view_btn_container]);

    addlayer(multi_view_line);
    set(layer[multi_view_line].type,container);
    set(layer[multi_view_line].align,center);
    set(layer[multi_view_line].alpha,1);
    set(layer[multi_view_line].x,0);
    set(layer[multi_view_line].y,-30);
    set(layer[multi_view_line].width,100%);
    set(layer[multi_view_line].height,1);
    set(layer[multi_view_line].bgcolor,0x2d2d2d);
    set(layer[multi_view_line].bgalpha,1);
    set(layer[multi_view_line].keep,true);
    set(layer[multi_view_line].parent,layer[multi_view_btn_container]);

    addlayer(multi_view_normal_btn);
    set(layer[multi_view_normal_btn].type,container);
    set(layer[multi_view_normal_btn].align,center);
    set(layer[multi_view_normal_btn].alpha,1);
    set(layer[multi_view_normal_btn].x,-155);
    set(layer[multi_view_normal_btn].y,30);
    set(layer[multi_view_normal_btn].width,70);
    set(layer[multi_view_normal_btn].height,70);
    set(layer[multi_view_normal_btn].bgcolor,0xff0000);
    set(layer[multi_view_normal_btn].bgalpha,0.8);
    set(layer[multi_view_normal_btn].bgcapture,true);
    set(layer[multi_view_normal_btn].keep,true);
    layer[multi_view_normal_btn].loadstyle(skin_style);
    set(layer[multi_view_normal_btn].parent,layer[multi_view_btn_container]);
    set(layer[multi_view_normal_btn].onclick,change_multi_view(0););


    addlayer(multi_view_littleplanet_btn);
    set(layer[multi_view_littleplanet_btn].type,container);
    set(layer[multi_view_littleplanet_btn].align,center);
    set(layer[multi_view_littleplanet_btn].alpha,1);
    set(layer[multi_view_littleplanet_btn].x,-50);
    set(layer[multi_view_littleplanet_btn].y,30);
    set(layer[multi_view_littleplanet_btn].width,70);
    set(layer[multi_view_littleplanet_btn].height,70);
    set(layer[multi_view_littleplanet_btn].bgcolor,0xff0000);
    set(layer[multi_view_littleplanet_btn].bgalpha,0.8);
    set(layer[multi_view_littleplanet_btn].bgcapture,true);
    set(layer[multi_view_littleplanet_btn].keep,true);
    layer[multi_view_littleplanet_btn].loadstyle(skin_style);
    set(layer[multi_view_littleplanet_btn].parent,layer[multi_view_btn_container]);
    set(layer[multi_view_littleplanet_btn].onclick,change_multi_view(1););

    addlayer(multi_view_fisheye_btn);
    set(layer[multi_view_fisheye_btn].type,container);
    set(layer[multi_view_fisheye_btn].align,center);
    set(layer[multi_view_fisheye_btn].alpha,1);
    set(layer[multi_view_fisheye_btn].x,50);
    set(layer[multi_view_fisheye_btn].y,30);
    set(layer[multi_view_fisheye_btn].width,70);
    set(layer[multi_view_fisheye_btn].height,70);
    set(layer[multi_view_fisheye_btn].bgcolor,0xff0000);
    set(layer[multi_view_fisheye_btn].bgalpha,0.8);
    set(layer[multi_view_fisheye_btn].bgcapture,true);
    set(layer[multi_view_fisheye_btn].keep,true);
    layer[multi_view_fisheye_btn].loadstyle(skin_style);
    set(layer[multi_view_fisheye_btn].parent,layer[multi_view_btn_container]);
    set(layer[multi_view_fisheye_btn].onclick,change_multi_view(2););


    addlayer(multi_view_ball_btn);
    set(layer[multi_view_ball_btn].type,container);
    set(layer[multi_view_ball_btn].align,center);
    set(layer[multi_view_ball_btn].alpha,1);
    set(layer[multi_view_ball_btn].x,155);
    set(layer[multi_view_ball_btn].y,30);
    set(layer[multi_view_ball_btn].width,70);
    set(layer[multi_view_ball_btn].height,70);
    set(layer[multi_view_ball_btn].bgcolor,0xff0000);
    set(layer[multi_view_ball_btn].bgalpha,0.8);
    set(layer[multi_view_ball_btn].bgcapture,true);
    set(layer[multi_view_ball_btn].keep,true);
    layer[multi_view_ball_btn].loadstyle(skin_style);
    set(layer[multi_view_ball_btn].parent,layer[multi_view_btn_container]);
    set(layer[multi_view_ball_btn].onclick,change_multi_view(3););

    reset_multi_view_btn();

    set(layer[multi_view_normal_btn].crop,678|710|84|84);

    hide_multi_view();
    setup_layout();
    ,
    set(layer[multi_view_layer].visible,false);
  );
    </action>

    <action name="reset_multi_view_btn">
    set(layer[multi_view_normal_btn].crop,678|600|84|84);
    set(layer[multi_view_littleplanet_btn].crop,480|600|84|84);
    set(layer[multi_view_fisheye_btn].crop,579|600|84|84);
    set(layer[multi_view_ball_btn].crop,779|600|84|84);
    set(view_type,0);
    </action>
    <action name="change_multi_view">

  reset_multi_view_btn();
  set(view_type,%1);
  if(%1 == 3,
    set(layer[multi_view_ball_btn].crop,775|710|84|84);
    ,
    if(%1 == 2,
      set(layer[multi_view_fisheye_btn].crop,579|710|84|84);
      ,
      if(%1 == 1,
        set(layer[multi_view_littleplanet_btn].crop,480|710|84|84);
        ,
        set(layer[multi_view_normal_btn].crop,678|710|84|84);
      );
    );
  );

  if(view_type_changing != true,
    set(view_type_changing,true);
    if(%1 == 3,
      skin_view_ball();
      ,
      if(%1 == 2,
        skin_view_fisheye();
        ,
        if(%1 == 1,
          cm_littleplanet_view();
          ,
          cm_normal_view();
        );
      );
    );
    delete(multi_view_type);
    ,
    set(multi_view_type,%1);
  );

    </action>
    <action name="show_multi_view">
  set(layer[multi_view_bg].visible,true);
    </action>
    <action name="hide_multi_view">
  set(layer[multi_view_bg].visible,false);
    </action>
    <action name="setup_view">

  if((view_type == 0 OR view_type === null) AND webvr.isenabled != true,
                                                                                 
    copy(view.hlookat, config.panos.pano[get(scene_name)].view.hlookat);
    copy(view.vlookat, config.panos.pano[get(scene_name)].view.vlookat);
    if(config.panos.pano[get(scene_name)].view.vlookatmin != -90 OR config.panos.pano[get(scene_name)].view.vlookatmax != 90,
      set(view.limitview, lookat);
      copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
      copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
    );

    if(config.panos.pano[get(scene_name)].view.fovmin == "" OR config.panos.pano[get(scene_name)].view.fovmin === null,
      set(config.panos.pano[get(scene_name)].view.fovmin,70);
    );
    copy(view.fovmin, config.panos.pano[get(scene_name)].view.fovmin);

    if(config.panos.pano[get(scene_name)].view.fovmax == "" OR config.panos.pano[get(scene_name)].view.fovmax === null,
      set(config.panos.pano[get(scene_name)].view.fovmax,120);
    );
    copy(view.fovmax, config.panos.pano[get(scene_name)].view.fovmax);

    if(config.panos.pano[get(scene_name)].view.fov != 0 AND config.panos.pano[get(scene_name)].view.fov != "" AND config.panos.pano[get(scene_name)].view.fov !== null,
      copy(view.fov, config.panos.pano[get(scene_name)].view.fov);
      ,
      set(view.fov, 95);
    );

    if(config.panos.pano[get(scene_name)].view.vlookatmin !== null AND config.panos.pano[get(scene_name)].view.vlookatmin != "",
      copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
    );


    if(config.panos.pano[get(scene_name)].view.vlookatmax !== null AND config.panos.pano[get(scene_name)].view.vlookatmax != "",
      copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
    );

  );
    </action>

    <action name="setup_view_limit">
  if(config.panos.pano[get(scene_name)].view.vlookatmin != -90 OR config.panos.pano[get(scene_name)].view.vlookatmax != 90,
    set(view.limitview, lookat);
    copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
    copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
  );

  if(config.panos.pano[get(scene_name)].view.fovmin == "" OR config.panos.pano[get(scene_name)].view.fovmin === null,
    set(config.panos.pano[get(scene_name)].view.fovmin,70);
  );
  copy(view.fovmin, config.panos.pano[get(scene_name)].view.fovmin);

  if(config.panos.pano[get(scene_name)].view.fovmax == "" OR config.panos.pano[get(scene_name)].view.fovmax === null,
    set(config.panos.pano[get(scene_name)].view.fovmax,120);
  );
  copy(view.fovmax, config.panos.pano[get(scene_name)].view.fovmax);

  if(config.panos.pano[get(scene_name)].view.vlookatmin !== null AND config.panos.pano[get(scene_name)].view.vlookatmin != "",
    copy(view.vlookatmin, config.panos.pano[get(scene_name)].view.vlookatmin);
  );


  if(config.panos.pano[get(scene_name)].view.vlookatmax !== null AND config.panos.pano[get(scene_name)].view.vlookatmax != "",
    copy(view.vlookatmax, config.panos.pano[get(scene_name)].view.vlookatmax);
  );

    </action>


    <action name="setup_littleplanet_view">
	set(view.fovmax, 170);
	set(view.limitview, lookto);
	set(view.vlookatmin, 90);
	set(view.vlookatmax, 90);
	lookat(calc(lp_hlookat + 180), 90, 150, 1, 0, 0);
    </action>

    <action name="setup_littleplanet">
  if(config.panos.pano[get(scene_name)].view.fovmin == "" OR config.panos.pano[get(scene_name)].view.fovmin === null,
    set(config.panos.pano[get(scene_name)].view.fovmin,70);
  );
  if(config.panos.pano[get(scene_name)].view.fovmax == "" OR config.panos.pano[get(scene_name)].view.fovmax === null,
    set(config.panos.pano[get(scene_name)].view.fovmax,120);
  );

  set(control.usercontrol, off);
	copy(lp_scene, xml.scene);
	copy(lp_hlookat, config.panos.pano[get(xml.scene)].view.hlookat);
	copy(lp_vlookat, config.panos.pano[get(xml.scene)].view.vlookat);
	copy(lp_fov, config.panos.pano[get(xml.scene)].view.fov);
	copy(lp_fovmax, config.panos.pano[get(xml.scene)].view.fovmax);
	copy(lp_limitview, config.panos.pano[get(xml.scene)].view.limitview);
	set(view.fovmax, 170);
	set(view.limitview, lookto);
	set(view.vlookatmin, 90);
	set(view.vlookatmax, 90);
	lookat(calc(lp_hlookat + 180), 90, 150, 1, 0, 0);
	set(events[lp_events].onpreviewcomplete,
		delayedcall(2,
			if(lp_scene === xml.scene,
				set(control.usercontrol, off);
				copy(view.limitview, lp_limitview);
				set(view.vlookatmin, null);
				set(view.vlookatmax, null);
        tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lp_hlookat + '|' + lp_vlookat + '|' + lp_fov + '|' + 0.0),
					3.0, easeOutQuad,
					set(control.usercontrol, all);
					tween(view.fovmax, get(lp_fovmax));

          show_UI();
          setup_pano_settings();
          setup_global_settings();
                                                             
                                      
					);
			  );
		  );
	  );

    </action>


    <action name="skin_view_look_straight">
                         
    set(view.fovmax, get(config.panos.pano[get(scene_name)].view.fovmax));
    set(view.fovmin, get(config.panos.pano[get(scene_name)].view.fovmin));
    set(view.limitview,auto);
             
    </action>

    <action name="cm_normal_view">
  tween(view.architectural, 0.0, 0.5);
  tween(view.pannini,       0.0, 0.5);
  tween(view.fisheye,       0.0, 0.5);
  tween(view.fov,     get(config.panos.pano[get(scene_name)].view.fov), 0.5);
  tween(view.vlookat, get(config.panos.pano[get(scene_name)].view.vlookat), 0.5,easeOutQuad,
    skin_view_look_straight();
    set(view_type_changing,false);
    if(multi_view_type !== null,
      delayedcall(0.1,change_multi_view(multi_view_type));
      ,
      setup_view_limit();
    );
  );
    </action>

    <action name="skin_view_fisheye">
                                   
	tween(view.architectural, 0.0,  distance(1.0,0.5));
	tween(view.pannini,       0.0,  distance(1.0,0.5));
	tween(view.fisheye,       1.0,  distance(1.0,0.5));
  tween(view.vlookat, get(config.panos.pano[get(scene_name)].view.vlookat), 0.5);
  tween(view.fov,       115,  0.5);
	tween(view.distortion,    1.0, distance(1.0,0.5),easeOutQuad,
    skin_view_look_straight();
    set(view_type_changing,false);
    if(multi_view_type !== null,
      delayedcall(0.1,change_multi_view(multi_view_type));
    );
  );
    </action>

    <action name="skin_view_ball">
                                   
	tween(view.architectural, 0.0,  distance(1.0,0.5));
	tween(view.pannini,       0.0,  distance(1.0,0.5));
                                                                                      
	tween(view.distortion,    2.8, distance(1.0,0.5),easeOutQuad,
    skin_view_look_straight();
    set(view_type_changing,false);
    if(multi_view_type !== null,
      delayedcall(0.1,change_multi_view(multi_view_type));
    );
  );
    </action>

    <action name="skin_view_architectural">
	skin_view_look_straight();
	tween(view.architectural, 1.0, distance(1.0,0.5));
	tween(view.pannini,       0.0, distance(1.0,0.5));
	tween(view.distortion,    0.0, distance(1.0,0.5));
    </action>

    <action name="skin_view_stereographic">
	skin_view_look_straight();
	tween(view.architectural, 0.0, distance(1.0,0.5));
	tween(view.pannini,       0.0, distance(1.0,0.5));
	tween(view.distortion,    1.0, distance(1.0,0.8));
    </action>

    <action name="skin_view_pannini">
	skin_view_look_straight();
	tween(view.architectural, 0.0, distance(1.0,0.5));
	tween(view.pannini,       1.0, distance(1.0,0.8));
	if(view.distortion LT 0.1,
		tween(view.distortion, 1.0, distance(1.0,0.8));
	  );
    </action>

    <action name="cm_littleplanet_view">
  tween(view.architectural, 0.0, 0.25);
  tween(view.vlookat,  90, distance(179, 1.50), easeoutquad);
  set(backtonormalfirst,false);
  if(view.pannini       == true,  set(backtonormalfirst,true) );
  if(view.stereographic == false, set(backtonormalfirst,true) );
  if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
  set(view.pannini, false);
  set(view.stereographic, true);
  set(view.fovmax, 150);
  tween(view.fov, 150, distance(179, 0.75),easeoutquad);
  tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad,
    set(view_type_changing,false);
    if(multi_view_type !== null,
      delayedcall(0.1,change_multi_view(multi_view_type));
    );
  );
    </action>
    <action name="hide_UI">
  set(layer[layer_container].visible,false);
  if(%1 != 1,
    set(layer[radar_container].visible,false);
  );
    </action>
    <action name="show_UI">
  set(layer[layer_container].visible,true);
  set(layer[radar_container].visible,true);
    </action>



    <action name="show_hotspots">
  set(plugin[hotspot_container].visible , true);
    </action>
    <action name="hide_hotspots">
  set(plugin[hotspot_container].visible , false);
    </action>

    <action name="setup_top_mask">
  if(config.panos.pano[get(scene_name)].top_circle !== null,
    addhotspot(top_mask_layer);
    set(hotspot[top_mask_layer].ath,0);
    set(hotspot[top_mask_layer].atv,-90);
    if(displayMode === null,
      set(hotspot[top_mask_layer].scale,0.75);
    );
    set(hotspot[top_mask_layer].rotate,0.0);
    set(hotspot[top_mask_layer].distorted,true);
    set(hotspot[top_mask_layer].enabled,false);
    set(hotspot[top_mask_layer].handcursor,false);
    set(hotspot[top_mask_layer].visible,true);
    set(hotspot[top_mask_layer].keep,false);
    if(config.panos.pano[get(scene_name)].top_circle.is_float == 1,
      set(hotspot[top_mask_layer].distorted,false);
      set(hotspot[top_mask_layer].zoom,true);
    );
    if(config.panos.pano[get(scene_name)].top_circle.url === null,
      copy(hotspot[top_mask_layer].url, settings.circle_mask);
      ,

      copy(top_circle_url,config.panos.pano[get(scene_name)].top_circle.url);
      txtadd(top_circle_url,'?imageView2/0/w/1024/h/1024');
      copy(hotspot[top_mask_layer].url,top_circle_url);
    );
  );
    </action>
    <action name="setup_bottom_mask">
  if(config.panos.pano[get(scene_name)].bottom_circle !== null,
    addhotspot(bottom_mask_layer);
    if(displayMode === null,
      set(hotspot[bottom_mask_layer].scale,0.75);
    );
    set(hotspot[bottom_mask_layer].ath,0);
    set(hotspot[bottom_mask_layer].atv,90);
    set(hotspot[bottom_mask_layer].rotate,0.0);
    set(hotspot[bottom_mask_layer].distorted,true);
    set(hotspot[bottom_mask_layer].enabled,false);
    set(hotspot[bottom_mask_layer].handcursor,false);
    set(hotspot[bottom_mask_layer].visible,true);
    set(hotspot[bottom_mask_layer].keep,false);
    set(hotspot[bottom_mask_layer].zorder,0);
    if(config.panos.pano[get(scene_name)].bottom_circle.is_float == 1,
      set(hotspot[bottom_mask_layer].distorted,false);
      set(hotspot[bottom_mask_layer].zoom,true);
    );
    if(config.panos.pano[get(scene_name)].bottom_circle.url === null,
      copy(hotspot[bottom_mask_layer].url, settings.circle_mask);
      ,
      copy(bottom_circle_url,config.panos.pano[get(scene_name)].bottom_circle.url);
      txtadd(bottom_circle_url,'?imageView2/0/w/1024/h/1024');
      copy(hotspot[bottom_mask_layer].url,bottom_circle_url);
    );
  )
    </action>



    <action name="setup_hotspot">

  if(plugin[hotspot_container] === null,
    addplugin(hotspot_container);
    set(plugin[hostspot_container].zorder,90);

    set(hotspot[hostspot_container].handcursor, true);
  );

  set(hotspot_count,get(config.panos.pano[get(xml.scene)].hotspots.hotspot.count));
  for(set(i,0),i LT hotspot_count,inc(i),

    set(hotspot_name,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].name)); ifnot(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].image_type==0,
      addhotspot(get(hotspot_name));
      set(hotspot[get(hotspot_name)].hotspot_type,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].type));
      set(hotspot[get(hotspot_name)].text,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].text));
      set(hotspot[get(hotspot_name)].keep_view,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].keep_view));
      set(hotspot[get(hotspot_name)].title,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].title));
      set(hotspot[get(hotspot_name)].ath,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].ath));
      set(hotspot[get(hotspot_name)].atv,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].atv));
      set(hotspot[get(hotspot_name)].show_txt,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].show_txt));
      set(hotspot[get(hotspot_name)].image_type,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].image_type));
      set(hotspot[get(hotspot_name)].is_blank,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].is_blank));
      set(hotspot[get(hotspot_name)].link,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].url));
      set(hotspot[get(hotspot_name)].blend,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].blend));
      if(hotspot[get(hotspot_name)].link === null,
        set(hotspot[get(hotspot_name)].link,"");
      );
      set(hotspot[get(hotspot_name)].scale, 0.5);
      set(hotspot[get(hotspot_name)].capture, false);
      set(hotspot[get(hotspot_name)].keep, false);
      if(hotspot[get(hotspot_name)].blend === null,
        set(hotspot[get(hotspot_name)].blend,1);
      );
      set(hotspot[get(hotspot_name)].blend,calc('blend'+config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].blend));
      set(hotspot[get(hotspot_name)].handcursor, true);
      set(hotspot[get(hotspot_name)].edge, center);
      set(hotspot[get(hotspot_name)].zorder, 1000);
      set(hotspot[get(hotspot_name)].target_name, get(hotspot_name));
      set(hotspot[get(hotspot_name)].onclick, hotspot_action(););
      set(hotspot[get(hotspot_name)].parent,'hotspot_container'); if(hotspot[get(hotspot_name)].image_type=="2",
        set(hotspot_name_URL,get(config.panos.pano[get(scene_name)].hotspots.hotspot[get(hotspot_name)].image_url));
        txtadd(hotspot_name_URL,'?imageView2/0/w/300/');
        set(hotspot[get(hotspot_name)].url,get(hotspot_name_URL));
        set(hotspot[get(hotspot_name)].renderer, css3d);
        set(hotspot[get(hotspot_name)].onloaded,
          if(hotspot[get(hotspot_name)].width GT 300,
            set(hotspot[get(hotspot_name)].width, 300);
            set(hotspot[get(hotspot_name)].height, prop);
          );
        );
        ,
        set(hotspot_style_id,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].style_id));
        if(device.flash,
          txtadd(hotspot_style_id,'_flash');
        );
        hotspot[get(hotspot_name)].loadstyle(get(hotspot_style_id));
        set(hotspot[get(hotspot_name)].style_id,get(hotspot_style_id));
        hotspot_animate(get(hotspot_name));
      );

      if(displayMode === null,
        add(hotspot[get(hotspot_name)].atv,5);
      );

    );


    if(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].show_txt == 1 OR (config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].type == 0 AND settings.client != true),

        set(hotspot_txt_name,get(hotspot_name));
        txtadd(hotspot_txt_name,"_txt");
        addhotspot(get(hotspot_txt_name));
        set(hotspot[get(hotspot_txt_name)].hotspot_type,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].type));
        set(hotspot[get(hotspot_txt_name)].text,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].text));
        set(hotspot[get(hotspot_txt_name)].keep_view,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].keep_view));
        set(hotspot[get(hotspot_txt_name)].title,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].title));
        set(hotspot[get(hotspot_txt_name)].ath,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].ath));
        set(hotspot[get(hotspot_txt_name)].atv,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].atv));
        set(hotspot[get(hotspot_txt_name)].scale,1);
        set(hotspot[get(hotspot_txt_name)].url,get(plugin_url.TEXT_SWF));
        set(hotspot[get(hotspot_txt_name)].capture,false);
        set(hotspot[get(hotspot_txt_name)].keep,false);
                                                                  
        copy(hotspot[get(hotspot_txt_name)].target_name, hotspot_name);
        set(hotspot[get(hotspot_txt_name)].link,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].url));
        set(hotspot[get(hotspot_txt_name)].blend,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].blend));
        set(hotspot[get(hotspot_txt_name)].is_blank,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].is_blank));
        if(hotspot[get(hotspot_txt_name)].link === null,
          set(hotspot[get(hotspot_txt_name)].link,"");
        );
        if(hotspot[get(hotspot_txt_name)].blend === null,
          set(hotspot[get(hotspot_txt_name)].blend,1);
        );
        set(hotspot[get(hotspot_txt_name)].blend,calc('blend'+config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].blend));

        if(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].type == 0,
          set(hotspot[get(hotspot_txt_name)].html,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].title));
          ,
          set(hotspot[get(hotspot_txt_name)].html,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].title));
        );

        if(hotspot[get(hotspot_name)].height === null ,
          set(hotspot[get(hotspot_name)].onloaded,
            set(hotspot_loaded_txt_name,get(target_name));
            txtadd(hotspot_loaded_txt_name,"_txt");
            copy(hotspot[get(hotspot_loaded_txt_name)].oy,hotspot[get(target_name)].height);
            div(hotspot[get(hotspot_loaded_txt_name)].oy,-4);
            sub(hotspot[get(hotspot_loaded_txt_name)].oy,15);
          );
          ,
          copy(hotspot[get(hotspot_txt_name)].oy,hotspot[get(hotspot_name)].height);
          div(hotspot[get(hotspot_txt_name)].oy,-4);
          sub(hotspot[get(hotspot_txt_name)].oy,5);
          if(settings.client == true,
            sub(hotspot[get(hotspot_txt_name)].oy,10);
          );
        );

        set(hotspot[get(hotspot_txt_name)].backgroundcolor,#000000);
        set(hotspot[get(hotspot_txt_name)].backgroundalpha,0.5);
        set(hotspot[get(hotspot_txt_name)].roundedge,5);
        set(hotspot[get(hotspot_txt_name)].padding,5);
        set(hotspot[get(hotspot_txt_name)].renderer,"css3d");
        set(hotspot[get(hotspot_txt_name)].css,font-family:STXihei; font-size:12px; color:#ffffff;letter-spacing:1px;textAlign:center;);
        set(hotspot[get(hotspot_txt_name)].edge,center);
        set(hotspot[get(hotspot_txt_name)].show_txt,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].show_txt));
        set(hotspot[get(hotspot_txt_name)].image_type,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].image_type));
        set(hotspot[get(hotspot_txt_name)].onclick,hotspot_action(););

        set(hotspot[get(hotspot_txt_name)].parent, 'hotspot_container');

        if(settings.client == false,
          add(hotspot[get(hotspot_txt_name)].atv,5);
        );
      );
  );

  hide_vr_hotspot();
    </action>

    <action name="hotspot_action">
  if(hotspot_type == 0,

    if(blend !== null,
      copy(blend_mode,blendmodes[get(blend)].blend);
      ,
    );
    if(keep_view == 0 AND blend == 0,
      looktohotspot(get(name),60);
    );

    set(load_pano_category_index,null);
    for(set(o,0), o LT config.thumbs.category.count, inc(o),
      for(set(i,0), i LT config.thumbs.category[get(o)].pano.count, inc(i),
        if(link == config.thumbs.category[get(o)].pano[get(i)].pano_id,
          copy(load_pano_category_index, o);
        );
      );
    );

    if(view_type != 0,
      load_pano_by_id(get(link),1,get(load_pano_category_index));
      ,
      load_pano_by_id(get(link),get(keep_view),get(load_pano_category_index));
    );
  );

  if(hotspot_type == 1,
    if(is_blank == "0",
      unescape(link);
      openurl(get(link),_self);
      ,
      if(is_blank == "2",
        unescape(link);
        jscall(calc(js_show_iframe + link +'"})'));
        ,
        unescape(link);
        openurl(get(link),_blank);
      );
    );
  );
  if(hotspot_type == 2,
    copy(titleJSON,title);
    escape(titleJSON);
    copy(urlJSON,link);
    escape(urlJSON);

    set(hotspotGalleryJSON,'{"title":"');
    txtadd(hotspotGalleryJSON,get(titleJSON));
    txtadd(hotspotGalleryJSON,'","url":"');
    if(link !== null,
      txtadd(hotspotGalleryJSON,get(urlJSON));
      txtadd(hotspotGalleryJSON,'","blank":"');
      txtadd(hotspotGalleryJSON,get(is_blank));
    );
    txtadd(hotspotGalleryJSON,'","images":["');


    for(set(i,0),i LT config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.count,inc(i),
      copy(imageJSON,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image[get(i)].url);
      escape(imageJSON);
      txtadd(hotspotGalleryJSON,get(MEDIA_DOMAIN));
      txtadd(hotspotGalleryJSON,get(imageJSON));
      copy(lastIndex,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.count);
      sub(lastIndex,1);
      if(i LT lastIndex,
        txtadd(hotspotGalleryJSON,'","');
        ,
        txtadd(hotspotGalleryJSON,'"]}');
      );
    );

    jscall(calc(js_gallery_hotspot + hotspotGalleryJSON +')'));

    pause_autoplay();
                                                  
  );

  if(hotspot_type == 3,
    copy(titleJSON,title);
    escape(titleJSON);
    copy(contentJSON,text);
    escape(contentJSON);
    copy(urlJSON,link);
    escape(urlJSON);

    set(hotspotVideoJSON,'{"title":"');
    txtadd(hotspotVideoJSON,get(titleJSON));
    txtadd(hotspotVideoJSON,'","url":"');
    if(link !== null,
      txtadd(hotspotVideoJSON,get(urlJSON));
      txtadd(hotspotVideoJSON,'","src":"');
      txtadd(hotspotVideoJSON,get(contentJSON));
      txtadd(hotspotVideoJSON,'","blank":"');
      txtadd(hotspotVideoJSON,get(is_blank));
    );
    txtadd(hotspotVideoJSON,'"}');


    jscall(calc(js_video_hotspot + hotspotVideoJSON +')'));
                                                              

    pause_autoplay();
    pause_sound();
    pause_voice();
    set(video_is_show,true);
  );

  if(hotspot_type == 4,
    copy(titleJSON,title);
    escape(titleJSON);
    copy(contentJSON,text);
    escape(contentJSON);
    copy(urlJSON,link);
    escape(urlJSON);
    set(hotspotTextJSON,'{"title":"');
    txtadd(hotspotTextJSON,get(titleJSON));
    txtadd(hotspotTextJSON,'","content":"');
    txtadd(hotspotTextJSON,get(contentJSON));
    txtadd(hotspotTextJSON,'","url":"');
    if(link !== null,
      txtadd(hotspotTextJSON,get(urlJSON));
      txtadd(hotspotTextJSON,'","blank":"');
      txtadd(hotspotTextJSON,get(is_blank));
    );
    txtadd(hotspotTextJSON,'"}');


    jscall(calc(js_text_hotspot + hotspotTextJSON +')'));
                                                            

    pause_autoplay();
  ); if(hotspot_type==5,
    play_hotspot_sound(get(link));
  );



  if(hotspot_type == 6,
    copy(titleJSON,title);
    escape(titleJSON);
    copy(contentJSON,text);
    escape(contentJSON);
    copy(urlJSON,link);
    escape(urlJSON);

    set(hotspotMixJSON,'{"title":"');
    txtadd(hotspotMixJSON,get(titleJSON));
    txtadd(hotspotMixJSON,'","url":"');
    if(link !== null,
      txtadd(hotspotMixJSON,get(urlJSON));
      txtadd(hotspotMixJSON,'","text":"');
      txtadd(hotspotMixJSON,get(contentJSON));
      txtadd(hotspotMixJSON,'","blank":"');
      txtadd(hotspotMixJSON,get(is_blank));
    );
    txtadd(hotspotMixJSON,'","images":["');


    for(set(i,0),i LT config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.count,inc(i),
      copy(imageJSON,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image[get(i)].url);
      escape(imageJSON);
      txtadd(hotspotMixJSON,get(MEDIA_DOMAIN));
      txtadd(hotspotMixJSON,get(imageJSON));
      copy(lastIndex,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.count);
      sub(lastIndex,1);
      if(i LT lastIndex,
        txtadd(hotspotMixJSON,'","');
      );
    );



    txtadd(hotspotMixJSON,'"],"textArray":[');
    for(set(i,0),i LT config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.count,inc(i),
                                                                                                                       
                                
                                          
                                                    

                                            
      txtadd(hotspotMixJSON,'"');
      copy(textJSON,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image[get(i)].text);
      escape(textJSON);
      if(textJSON === null OR textJSON == 'null',
        set(textJSON, '');
      );
      txtadd(hotspotMixJSON,get(textJSON));

      copy(lastIndex,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.count);
      sub(lastIndex,1);
      if(i LT lastIndex,
        txtadd(hotspotMixJSON,'",');
        ,
        txtadd(hotspotMixJSON,'"');
      );
    );


    txtadd(hotspotMixJSON,']}');

    jscall(calc(js_mix_hotspot + hotspotMixJSON +')'));
                                                  
    pause_autoplay();
  );

  if(hotspot_type == 7,
    copy(titleJSON,title);
    escape(titleJSON);
    copy(contentJSON,text);
    escape(contentJSON);
    copy(urlJSON,link);
    escape(urlJSON);



    set(hotspotViewerJSON,'{"title":"');
    txtadd(hotspotViewerJSON,get(titleJSON));
    txtadd(hotspotViewerJSON,'","content":"');
    txtadd(hotspotViewerJSON,get(contentJSON));
    txtadd(hotspotViewerJSON,'","url":"');
    txtadd(hotspotViewerJSON,get(urlJSON));
    txtadd(hotspotViewerJSON,'","blank":"');
    txtadd(hotspotViewerJSON,get(is_blank));

    if(config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.ext !== null,
      copy(extJSON,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.ext);
      copy(imagePathJSON,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.imagePath);
      copy(sizeJSON,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.size);
      escape(imagePathJSON);
      txtadd(hotspotViewerJSON,'","ext":"');
      txtadd(hotspotViewerJSON,get(extJSON));
      txtadd(hotspotViewerJSON,'","imagePath":"');
      txtadd(hotspotViewerJSON,get(imagePathJSON));
      txtadd(hotspotViewerJSON,'","size":"');
      txtadd(hotspotViewerJSON,get(sizeJSON));
      txtadd(hotspotViewerJSON,'"}');
      ,
      txtadd(hotspotViewerJSON,'","images":[');
      for(set(i,0),i LT config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image.count,inc(i),
        txtadd(hotspotViewerJSON,'"');
        copy(imageJSON,config.panos.pano[get(scene_name)].hotspots.hotspot[get(target_name)].image[get(i)].url);
        escape(imageJSON);
        txtadd(hotspotViewerJSON,get(MEDIA_DOMAIN));
        txtadd(hotspotViewerJSON,get(imageJSON));
        txtadd(hotspotViewerJSON,'",');
      );
      txtadd(hotspotViewerJSON,']}');
    );

    jscall(calc(js_viewer_hotspot + hotspotViewerJSON +')'));

    pause_autoplay();
  );
    </action>




    <style name="hotspot_4" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot1.png?2.2.7"/>
    <style name="hotspot_5" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot2.png?2.2.7"/>
    <style name="hotspot_6" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot3.png?2.2.7"/>
    <style name="hotspot_7" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot4.png?2.2.7"/>
    <style name="hotspot_8" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot5.png?2.2.7"/>
    <style name="hotspot_9" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot6.png?2.2.7"/>
    <style name="hotspot_10" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot7.png?2.2.7"/>
    <style name="hotspot_11" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot8.png?2.2.7"/>
    <style name="hotspot_12" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot9.png?2.2.7"/>
    <style name="hotspot_13" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot10.png?2.2.7"/>
    <style name="hotspot_14" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot11.png?2.2.7"/>
    <style name="hotspot_15" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot12.png?2.2.7"/>
    <style name="hotspot_16" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot13.png?2.2.7"/>
    <style name="hotspot_17" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot14.png?2.2.7"/>
    <style name="hotspot_18" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot15.png?2.2.7"/>
    <style name="hotspot_19" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot16.png?2.2.7"/>
    <style name="hotspot_20" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot17.png?2.2.7"/>
    <style name="hotspot_21" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot18.png?2.2.7"/>
    <style name="hotspot_22" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot19.png?2.2.7"/>
    <style name="hotspot_23" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd1_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_24" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd2_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_25" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd3_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_26" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd4_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_27" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd5_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_28" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_link.png?2.2.7"/>
    <style name="hotspot_29" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_gallery.png?2.2.7"/>
    <style name="hotspot_30" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_video.png?2.2.7"/>
    <style name="hotspot_31" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_txt.png?2.2.7"/>
    <style name="hotspot_32" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_music.png?2.2.7"/>
    <style name="hotspot_33" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd1_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_34" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd2_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_35" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd3_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_36" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd4_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_37" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd5_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_38" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd6_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_39" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd7_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_40" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd8_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_41" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd9_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_42" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd10_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_43" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd11_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_44" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd12_gif.png?2.2.7" framewidth="128" frameheight="128" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_45" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd1.png?2.2.7"/>
    <style name="hotspot_46" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd2.png?2.2.7"/>
    <style name="hotspot_47" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd3.png?2.2.7"/>
    <style name="hotspot_48" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd4.png?2.2.7"/>
    <style name="hotspot_49" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd5.png?2.2.7"/>
    <style name="hotspot_50" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd6.png?2.2.7"/>
    <style name="hotspot_51" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd7.png?2.2.7"/>
    <style name="hotspot_52" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd8.png?2.2.7"/>
    <style name="hotspot_53" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd9.png?2.2.7"/>
    <style name="hotspot_54" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd10.png?2.2.7"/>
    <style name="hotspot_55" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd11.png?2.2.7"/>
    <style name="hotspot_56" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd12.png?2.2.7"/>
    <style name="hotspot_57" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot20.png?2.2.7"/>
    <style name="hotspot_58" crop="0|0|128|128" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot21.png?2.2.7"/>

    <style name="hotspot_4_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot1.png?imageView2/0/w/64"/>
    <style name="hotspot_5_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot2.png?imageView2/0/w/64"/>
    <style name="hotspot_6_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot3.png?imageView2/0/w/64"/>
    <style name="hotspot_7_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot4.png?imageView2/0/w/64"/>
    <style name="hotspot_8_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot5.png?imageView2/0/w/64"/>
    <style name="hotspot_9_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot6.png?imageView2/0/w/64"/>
    <style name="hotspot_10_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot7.png?imageView2/0/w/64"/>
    <style name="hotspot_11_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot8.png?imageView2/0/w/64"/>
    <style name="hotspot_12_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot9.png?imageView2/0/w/64"/>
    <style name="hotspot_13_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot10.png?imageView2/0/w/64"/>
    <style name="hotspot_14_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot11.png?imageView2/0/w/64"/>
    <style name="hotspot_15_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot12.png?imageView2/0/w/64"/>
    <style name="hotspot_16_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot13.png?imageView2/0/w/64"/>
    <style name="hotspot_17_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot14.png?imageView2/0/w/64"/>
    <style name="hotspot_18_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot15.png?imageView2/0/w/64"/>
    <style name="hotspot_19_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot16.png?imageView2/0/w/64"/>
    <style name="hotspot_20_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot17.png?imageView2/0/w/64"/>
    <style name="hotspot_21_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot18.png?imageView2/0/w/64"/>
    <style name="hotspot_22_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot19.png?imageView2/0/w/64"/>
    <style name="hotspot_23_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd1_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_24_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd2_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_25_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd3_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_26_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd4_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_27_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spotd5_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="9" onloaded="hotspot_animate();"/>
    <style name="hotspot_28_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_link.png?imageView2/0/w/64"/>
    <style name="hotspot_29_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_gallery.png?imageView2/0/w/64"/>
    <style name="hotspot_30_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_video.png?imageView2/0/w/64"/>
    <style name="hotspot_31_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_txt.png?imageView2/0/w/64"/>
    <style name="hotspot_32_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/static_music.png?imageView2/0/w/64"/>
    <style name="hotspot_33_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd1_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_34_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd2_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_35_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd3_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_36_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd4_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_37_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd5_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_38_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd6_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_39_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd7_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_40_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd8_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_41_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd9_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_42_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd10_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_43_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd11_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_44_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd12_gif.png?imageView2/0/w/1600" framewidth="64" frameheight="64" frame="0" lastframe="24" onloaded="hotspot_animate();"/>
    <style name="hotspot_45_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd1.png?imageView2/0/w/64"/>
    <style name="hotspot_46_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd2.png?imageView2/0/w/64"/>
    <style name="hotspot_47_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd3.png?imageView2/0/w/64"/>
    <style name="hotspot_48_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd4.png?imageView2/0/w/64"/>
    <style name="hotspot_49_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd5.png?imageView2/0/w/64"/>
    <style name="hotspot_50_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd6.png?imageView2/0/w/64"/>
    <style name="hotspot_51_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd7.png?imageView2/0/w/64"/>
    <style name="hotspot_52_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd8.png?imageView2/0/w/64"/>
    <style name="hotspot_53_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd9.png?imageView2/0/w/64"/>
    <style name="hotspot_54_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd10.png?imageView2/0/w/64"/>
    <style name="hotspot_55_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd11.png?imageView2/0/w/64"/>
    <style name="hotspot_56_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/new_spotd12.png?imageView2/0/w/64"/>
    <style name="hotspot_57_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot20.png?imageView2/0/w/64"/>
    <style name="hotspot_58_flash" crop="0|0|64|64" url="http://api-qiniu2.720static.com/krp/hotspot/v2/spot21.png?imageView2/0/w/64"/>


    <action name="hotspot_animate">
    inc(frame,1,get(lastframe),0);
    mul(ypos,frame,frameheight);
    txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
    delayedcall(0.03, hotspot_animate());
    </action>





    <style name="new_spotd01" crop="0|0|100|100" url="hotspots/new_spotd01_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd02" crop="0|0|100|100" url="hotspots/new_spotd02_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd03" crop="0|0|100|100" url="hotspots/new_spotd03_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd04" crop="0|0|100|100" url="hotspots/new_spotd04_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd05" crop="0|0|100|100" url="hotspots/new_spotd05_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd06" crop="0|0|100|100" url="hotspots/new_spotd06_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd07" crop="0|0|100|100" url="hotspots/new_spotd07_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd08" crop="0|0|100|100" url="hotspots/new_spotd08_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd09" crop="0|0|100|100" url="hotspots/new_spotd09_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd10" crop="0|0|100|100" url="hotspots/new_spotd10_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd11" crop="0|0|100|100" url="hotspots/new_spotd11_gif.png" framewidth="100" frameheight="100" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>

    <style name="new_spotd01_flash" crop="0|0|50|50" url="hotspots/new_spotd01_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd02_flash" crop="0|0|50|50" url="hotspots/new_spotd02_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd03_flash" crop="0|0|50|50" url="hotspots/new_spotd03_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd04_flash" crop="0|0|50|50" url="hotspots/new_spotd04_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd05_flash" crop="0|0|50|50" url="hotspots/new_spotd05_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd06_flash" crop="0|0|50|50" url="hotspots/new_spotd06_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd07_flash" crop="0|0|50|50" url="hotspots/new_spotd07_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd08_flash" crop="0|0|50|50" url="hotspots/new_spotd08_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd09_flash" crop="0|0|50|50" url="hotspots/new_spotd09_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd10_flash" crop="0|0|50|50" url="hotspots/new_spotd10_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>
    <style name="new_spotd11_flash" crop="0|0|50|50" url="hotspots/new_spotd11_gif.png?imageView2/0/w/850" framewidth="50" frameheight="50" frame="0" lastframe="16" onloaded="hotspot_animate_new();"/>

    <action name="hotspot_animate_new">
    inc(frame,1,get(lastframe),0);
    mul(xpos,frame,frameheight);
    txtadd(crop,get(xpos),'|0|',get(framewidth),'|',get(frameheight));
    delayedcall(0.035, if(loaded, hotspot_animate_new()));
    </action>





    <action name="play_hotspot_sound">
    if(layer[hotspot_sound_stop_btn] === null,
        addlayer(hotspot_sound_stop_btn);
        set(layer[hotspot_sound_stop_btn].keep,true);
        set(layer[hotspot_sound_stop_btn].visible,false);
        set(layer[hotspot_sound_stop_btn].crop,240|0|262|82);
        layer[hotspot_sound_stop_btn].loadstyle(skin_style);
        set(layer[hotspot_sound_stop_btn].align,bottomcenter);
        set(layer[hotspot_sound_stop_btn].scale,0.5);
        set(layer[hotspot_sound_stop_btn].x,0);
        set(layer[hotspot_sound_stop_btn].y,150);
        set(layer[hotspot_sound_stop_btn].onclick,stop_hotspot_sound(););
    );

    if(plugin[soundinterface] === null,
        addplugin(soundinterface);
        if(device.html5 == true ,
          copy(plugin[soundinterface].url,plugin_url.SOUND_JS);
          ,
          copy(plugin[soundinterface].url,plugin_url.SOUND_SWF);
        );
        set(plugin[soundinterface].preload,false);
        set(plugin[soundinterface].onloaded,
          playsound(hotspot_sound_name,%1,1,stop_hotspot_sound(1););
          set(layer[hotspot_sound_stop_btn].visible,true);
        );
        ,
        playsound(hotspot_sound_name,%1,1,stop_hotspot_sound(1););
        set(layer[hotspot_sound_stop_btn].visible,true);
    );




    pause_voice();
    pause_sound();


    if(category_thumbs_show == true,
      toggle_category_thumbs();
    );

    </action>
    <action name="stop_hotspot_sound">

    set(layer[hotspot_sound_stop_btn].visible,false);

    if(plugin[soundinterface] !== null, ifnot(%1==1,
          stopsound(hotspot_sound_name);
      );
    );

    resume_voice();
    resume_sound();


    </action>


    <blendmodes name="blend0" blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)" />
    <blendmodes name="blend1" blend="ZOOMBLEND(2.0, 2.0, easeInOutSine)" />
    <blendmodes name="blend2" blend="COLORBLEND(2.0, 0x000000, easeOutSine)" />
    <blendmodes name="blend3" blend="LIGHTBLEND(1.0, 0xFFFFFF, 2.0, linear)" />
    <blendmodes name="blend4" blend="SLIDEBLEND(1.0, 0.0, 0.2, linear)" />
    <blendmodes name="blend5" blend="SLIDEBLEND(1.0, 135.0, 0.4, linear)" />
    <blendmodes name="blend6" blend="OPENBLEND(1.0, 0.0, 0.2, 0.0, linear)" />
    <blendmodes name="blend7" blend="OPENBLEND(1.0, -1.0, 0.3, 0.0, linear)" />
    <blendmodes name="blend8" blend="OPENBLEND(1.0, -0.5, 0.3, 0.8, linear)" />

    <action name="setup_embed">

  if(plugin[embed_container] === null,
    addplugin(embed_container);
    set(plugin[embed_container].zorder,0);
  );

  set(embed_count,get(config.panos.pano[get(xml.scene)].embeds.embed.count));
  for(set(i,0),i LT embed_count,inc(i),
    set(embed_name,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].name));

    if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].embed_type == 1,
      addhotspot(get(embed_name));
      set(hotspot[get(embed_name)].ath,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].ath));
      set(hotspot[get(embed_name)].atv,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].atv));
      set(hotspot[get(embed_name)].scale,1);
      set(hotspot[get(embed_name)].keep,false);
      set(hotspot[get(embed_name)].url,get(plugin_url.TEXT_SWF));
      set(hotspot[get(embed_name)].html,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].text));
      txtreplace(hotspot[get(embed_name)].html,'&#xA;','[br]');

      set(hotspot[get(embed_name)].backgroundcolor,#000000);
      set(hotspot[get(embed_name)].backgroundalpha,0.5);
      set(hotspot[get(embed_name)].roundedge,5);
      set(hotspot[get(embed_name)].padding,10);
      set(hotspot[get(embed_name)].multiline,true);
      set(hotspot[get(embed_name)].oy,-9);
      set(hotspot[get(embed_name)].css,font-family:STXihei; font-size:12px; color:#ffffff;letter-spacing:1px;textAlign:center;);
      set(hotspot[get(embed_name)].edge,bottom);
      set(hotspot[get(embed_name)].handcursor, false);
      set(hotspot[get(embed_name)].enabled, false);
      set(hotspot[get(embed_name)].renderer,"css3d");
      set(hotspot[get(embed_name)].parent,'embed_container');

      set(embed_txt_bg_name,get(embed_name));
      txtadd(embed_txt_bg_name,"_bg");
      addhotspot(get(embed_txt_bg_name));
      copy(hotspot[get(embed_txt_bg_name)].url, settings.embed_txt_image);
      copy(hotspot[get(embed_txt_bg_name)].ath,hotspot[get(embed_name)].ath);
      copy(hotspot[get(embed_txt_bg_name)].atv,hotspot[get(embed_name)].atv);
      set(hotspot[get(embed_txt_bg_name)].keep,false);
      set(hotspot[get(embed_txt_bg_name)].scale,0.5);
      set(hotspot[get(embed_txt_bg_name)].edge,top);
      if(device.mobile == true,
        set(hotspot[get(embed_txt_bg_name)].oy,-6);
        ,
        set(hotspot[get(embed_txt_bg_name)].oy,-9);
      );
      set(hotspot[get(embed_txt_bg_name)].handcursor, false);
      set(hotspot[get(embed_txt_bg_name)].enabled, false);
                                                                 
      set(hotspot[get(embed_txt_bg_name)].parent,'embed_container');
    );

    if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].embed_type == 2,

      copy(embed_name_bk, embed_name);
      txtadd(embed_name_bk,'_bk');
      addhotspot(get(embed_name_bk));
      set(hotspot[get(embed_name_bk)].keep,false);
      set(hotspot[get(embed_name_bk)].scale,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].scale));
      set(hotspot[get(embed_name_bk)].ath,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].ath));
      set(hotspot[get(embed_name_bk)].atv,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].atv));
      set(hotspot[get(embed_name_bk)].edge,center);
      set(hotspot[get(embed_name_bk)].distorted,true);
      set(hotspot[get(embed_name_bk)].zoom,true);
      set(hotspot[get(embed_name_bk)].renderer,css3d);
      set(hotspot[get(embed_name_bk)].handcursor, false);
      set(hotspot[get(embed_name_bk)].enabled, false);
      set(hotspot[get(embed_name_bk)].visible, false);
      set(hotspot[get(embed_name_bk)].parent,'embed_container');


      addhotspot(get(embed_name));
      set(hotspot[get(embed_name)].keep,false);
      copy(embed_image_url,config.panos.pano[get(xml.scene)].embeds.embed[get(i)].image[0].url);
      txtadd(embed_image_url,'?imageView2/0/w/2000/h/2000');
      copy(hotspot[get(embed_name)].url,embed_image_url);
      set(hotspot[get(embed_name)].scale,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].scale));
      set(hotspot[get(embed_name)].ath,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].ath));
      set(hotspot[get(embed_name)].atv,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].atv));
      set(hotspot[get(embed_name)].edge,center);
      set(hotspot[get(embed_name)].distorted,true);
      set(hotspot[get(embed_name)].zoom,true);
      set(hotspot[get(embed_name)].renderer,css3d);
      set(hotspot[get(embed_name)].image_count, get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].image.count));
      set(hotspot[get(embed_name)].image_index, 0);
      set(hotspot[get(embed_name)].parent,'embed_container');


      if(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].play_type == 0 ,
        set(hotspot[get(embed_name)].handcursor, false);
        set(hotspot[get(embed_name)].enabled, false);
        set(hotspot[get(embed_name)].playInterval,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].interval));
        set(hotspot[get(embed_name)].onloaded,
          if(image_count GT 1,
            switch_embed_image();
          );
        );
        ,
        set(hotspot[get(embed_name)].handcursor, true);
        set(hotspot[get(embed_name)].enabled, true);
        set(hotspot[get(embed_name)].capture, false);
        set(hotspot[get(embed_name)].playInterval,0);
        set(hotspot[get(embed_name)].onclick,
          if(image_count GT 1,
            switch_embed_image_click();
          );
        );
      );
    );
  );
    </action>
    <action name="switch_embed_image">

  set(onloaded,);

  copy(switch_embed_name_bk, name);
  txtadd(switch_embed_name_bk,'_bk');

  set(hotspot[calc(name)].bk,calc(name + '_bk'));
  copy(hotspot[calc(name + '_bk')].target,name);

  delayedcall(get(playInterval),

    set(hotspot[calc(name + '_bk')].onloaded,
      set(alpha,1);
      set(visible,true);
      add(hotspot[calc(target)].image_index,1);
      if(hotspot[calc(target)].image_index == hotspot[calc(target)].image_count,
        set(hotspot[calc(target)].image_index,0);
      );

      set(hotspot[calc(target)].onloaded,
        set(visible,true);
        set(alpha,0);

        tween(alpha,1.0,0.2,linear,
          set(hotspot[calc(bk)].visible,false);
          switch_embed_image();
        );

        delayedcall(0.1,
          tween(hotspot[calc(bk)].alpha,0.0,0.2,linear,
            set(hotspot[calc(bk)].visible,false);
          );
        );
      );
      copy(embed_image_url,config.panos.pano[get(xml.scene)].embeds.embed[calc(target)].image[get(hotspot[calc(target)].image_index)].url);
      txtadd(embed_image_url,'?imageView2/0/w/2000/h/2000');
      set(hotspot[calc(target)].url,get(embed_image_url));
    );
    copy(hotspot[calc(name + '_bk')].url,url);
  );
    </action>

    <action name="switch_embed_image_click">

  set(onloaded,);

  copy(switch_embed_name_bk, name);
  txtadd(switch_embed_name_bk,'_bk');

  set(hotspot[calc(name)].bk,calc(name + '_bk'));
  copy(hotspot[calc(name + '_bk')].target,name);

  set(hotspot[calc(name + '_bk')].onloaded,
    set(alpha,1);
    set(visible,true);
    add(hotspot[calc(target)].image_index,1);
    if(hotspot[calc(target)].image_index == hotspot[calc(target)].image_count,
      set(hotspot[calc(target)].image_index,0);
    );

    set(hotspot[calc(target)].onloaded,
      set(visible,true);
      set(alpha,0);
      tween(alpha,1.0,0.2,linear,
        set(hotspot[calc(bk)].visible,false);
      );

      delayedcall(0.1,
        tween(hotspot[calc(bk)].alpha,0.0,0.2,linear,
          set(hotspot[calc(bk)].visible,false);
        );
      );
    );
    copy(embed_image_url,config.panos.pano[get(xml.scene)].embeds.embed[calc(target)].image[get(hotspot[calc(target)].image_index)].url);
    txtadd(embed_image_url,'?imageView2/0/w/2000/h/2000');
    set(hotspot[calc(target)].url,get(embed_image_url));
  );
  copy(hotspot[calc(name + '_bk')].url,url);

    </action>

    <action name="setup_start_image">
  if((config.panos.pano[0].start_image_pc === null OR config.panos.pano[0].start_image_pc.url == "" OR config.panos.pano[0].start_image_pc.url !== null) AND device.desktop,

    if(config.panos.pano[0].start_image_pc.url === null OR config.panos.pano[0].start_image_pc.url == "",
      copy(layer[start_image_layer].url,settings.start_image_desktop);
      set(layer[start_image_layer].scale,0.5);
      ,
      copy(start_image_pc_url,config.panos.pano[0].start_image_pc.url);
      txtadd(start_image_pc_url,'?imageView2/0/w/2000/h/2000');
      copy(layer[start_image_layer].url,start_image_pc_url);
      set(layer[start_image_layer].scale,1);
    );

    set(layer[start_image_layer].align,center);
    set(layer[start_image_layer].background,false);
    set(layer[start_image_layer].autoalpha,true);
    set(layer[start_image_layer].onclick,tween(layer[start_image_layer].alpha,0.0,0.5););
    set(layer[start_image_layer].alpha,1.0);
    set(layer[start_image_layer].enabled,true);
    set(layer[start_image_layer].bgcapture,true);
    set(layer[start_image_layer].ondown,set(enabled,false);tween(layer[start_image_layer].alpha,0.0,0.5););
    set(layer[start_image_layer].onloaded,
      delayedcall(3,tween(layer[start_image_layer].alpha,0.0,0.5););
    );
  );

  if((config.panos.pano[0].start_image_mobile === null OR config.panos.pano[0].start_image_mobile.url == "" OR config.panos.pano[0].start_image_mobile.url !== null) AND !device.desktop,

    if(config.panos.pano[0].start_image_mobile.url === null  OR config.panos.pano[0].start_image_mobile.url == "",
      copy(layer[start_image_layer].url,settings.start_image_mobile);
      set(layer[start_image_layer].scale,0.5);
      ,
      copy(start_image_mobile_url,config.panos.pano[0].start_image_mobile.url);
      txtadd(start_image_mobile_url,'?imageView2/0/w/2000/h/2000');
      copy(layer[start_image_layer].url,start_image_mobile_url);
      set(layer[start_image_layer].scale,1);
    );

    set(layer[start_image_layer].align,center);
    set(layer[start_image_layer].background,false);
    set(layer[start_image_layer].autoalpha,true);
    set(layer[start_image_layer].onclick,tween(layer[start_image_layer].alpha,0.0,0.5););
    set(layer[start_image_layer].alpha,1.0);
    set(layer[start_image_layer].enabled,true);
    set(layer[start_image_layer].bgcapture,true);
    set(layer[start_image_layer].ondown,set(enabled,false);tween(layer[start_image_layer].alpha,0.0,0.5););
    set(layer[start_image_layer].onloaded,
      delayedcall(3,tween(layer[start_image_layer].alpha,0.0,0.5););
    );
  );
    </action>



    <action name="setup_title">

    if(settings.first_pano_inited == true,
      set(layer[title_layer].html,get(config.panos.pano[get(scene_name)].info.title));
      tween(layer[title_layer].alpha,1.0,0.3);
      delayedcall(6,tween(layer[title_layer].alpha,0.0,0.3););
      ,
      set(layer[title_layer].url,get(plugin_url.TEXT_SWF));
      set(layer[title_layer].background,false);
      set(layer[title_layer].keep,true);
      set(layer[title_layer].textshadow,0.5);
      set(layer[title_layer].html,get(config.info.title));
      set(layer[title_layer].width,80%);
      set(layer[title_layer].wordwrap,true);
      set(layer[title_layer].autoHeight,true);
      set(layer[title_layer].autoWidth,false);
      set(layer[title_layer].enabled,false);
      set(layer[title_layer].y,100);
      set(layer[title_layer].align,topcenter);
      set(layer[title_layer].css,text-align:center; color:#ffffff; font-family:STXihei; font-size:16px;);
      delayedcall(6,tween(layer[title_layer].alpha,0.0,0.3););

      if(var_selected == 1 ,
        addlayer(class_layer);
        set(layer[class_layer].keep,false);
        layer[class_layer].loadstyle(skin_style);
        set(layer[class_layer].crop,480|320|92|52);
        set(layer[class_layer].scale,0.5);
        set(layer[class_layer].enabled,false);
        set(layer[class_layer].zorder,4000);
        set(layer[class_layer].y,get(layer[title_layer].y));
        sub(layer[class_layer].y,30);
        set(layer[class_layer].align,get(layer[title_layer].align));
        delayedcall(6,tween(layer[class_layer].alpha,0.0,0.3););
      );
    );
    </action>



    <action name="setup_auth">
  if(config.is_sdk != 1,
    if(config.feature.show_auth == 1,
        copy(layer[auth_layer].url,plugin_url.TEXT_SWF);
        set(layer[auth_layer].autoWidth,true);
        set(layer[auth_layer].autoHeight,true);
        set(layer[auth_layer].background,false);
        set(layer[auth_layer].textshadow,0.5);
        set(layer[auth_layer].wordwrap,false);
        indexoftxt(authTxtExist, get(config.auth.auth_name) , '作者');
        if(authTxtExist LT 0,
          set(layer[auth_layer].html,'作者：');
          ,
          set(layer[auth_layer].html,'');
        );
        txtadd(layer[auth_layer].html,get(config.auth.auth_name));
        set(layer[auth_layer].handcursor,true);
        set(layer[auth_layer].enabled,true);
        set(layer[auth_layer].visible,true);
        set(layer[auth_layer].x,5);
        set(layer[auth_layer].y,5);
        set(layer[auth_layer].css,color:#ffffff; font-family:STXihei; font-size:14px;);
        set(layer[auth_layer].onclick,
            openurl(get(config.auth.link));
        );
        ,
        set(layer[auth_layer].visible,false);
    );
  );
  setup_layout();
    </action>



    <action name="disableProAuth">
  set(config.logo.enabled, 1);
  set(config.logo.is_720, 1);
  setup_logo();
    </action>




    <action name="setup_logo">
  if(config.is_sdk != 1 OR config.is_feipai == 1,
    if(config.logo.enabled == 1,
      indexoftxt(logoIndex,get(config.logo.url),'720yunLOGO');
      if(config.logo.is_720 == 1 OR logoIndex GT 0 OR config.logo.url === null OR config.is_feipai == 1,
        if(config.is_feipai == 1,
          set(layer[logo_layer].width,220);
          set(layer[logo_layer].height,150);
          copy(layer[logo_layer].url,settings.feipai_logo_url);
          ,
          set(layer[logo_layer].width,220);
          set(layer[logo_layer].height,66);
          set(layer[logo_layer].crop,240|156|220|66);
          layer[logo_layer].loadstyle(skin_style);
        )
        ,

        copy(config_logo_url,config.logo.url);
        txtadd(config_logo_url,'?imageView2/0/w/300/h/300');
        copy(layer[logo_layer].url,config_logo_url);
        set(layer[logo_layer].onloaded,
          set(logoWHRate,get(layer[logo_layer].width));
          div(logoWHRate,get(layer[logo_layer].height));
          if(layer[logo_layer].width GT 300 OR layer[logo_layer].height GT 144,
              if(logoWHRate GT 2.5,
                set(layer[logo_layer].width,300);
                set(layer[logo_layer].height,prop);
                set(layer[logo_layer].scale,0.5);
                ,
                set(layer[logo_layer].height,144);
                set(layer[logo_layer].width,prop);
                set(layer[logo_layer].scale,0.5);
              );
              ,
              if(layer[logo_layer].width GT 200 OR layer[logo_layer].height GT 36,
                set(layer[logo_layer].scale,0.5);
              );
            );
                                                                                                                                                                                                                                                                                                                                                                                           
        );
      );
      set(layer[logo_layer].scale,0.5);
      set(layer[logo_layer].enabled,false);

      set(layer[logo_layer].handcursor,true);
      set(layer[logo_layer].enabled,true);
      set(layer[logo_layer].onclick,
        indexoftxt(logoIndex,get(config.logo.url),'720yunLOGO');
        if(config.logo.is_720 == 1 OR logoIndex GT 0 OR config.logo.url === null,
          openurl("http://720yun.com");
          ,
          logo_action();
        );
      );
    );
  );
  setup_layout();
    </action>

    <action name="logo_action">

  addlayer(logo_pane_container);
  set(layer[logo_pane_container].type,container);
  set(layer[logo_pane_container].align,center);
  set(layer[logo_pane_container].alpha,0);
  set(layer[logo_pane_container].x,0);
  set(layer[logo_pane_container].y,0);
  set(layer[logo_pane_container].width,100%);
  set(layer[logo_pane_container].height,100%);
  set(layer[logo_pane_container].bgcolor,0x000000);
  set(layer[logo_pane_container].bgalpha,0.8);
  set(layer[logo_pane_container].bgcapture,true);
  set(layer[logo_pane_container].zorder,350);
  set(layer[logo_pane_container].keep,false);
  set(layer[logo_pane_container].onclick,hide_logo(););

  addlayer(logo_img_container);
  set(layer[logo_img_container].align,center);
  set(layer[logo_img_container].x,0);
  set(layer[logo_img_container].y,0);
  set(layer[logo_img_container].parent,logo_pane_container);
  if(config.logo.is_720 == 1,
    set(layer[logo_img_container].crop,240|160|270|66);
    layer[logo_img_container].loadstyle(skin_style);
    ,
    set(layer[logo_img_container].url,get(config.logo.url));
  );
  set(layer[logo_img_container].onclick,hide_logo(););
  set(layer[logo_img_container].onloaded,
    if(layer[logo_img_container].width GT 500,
      set(layer[logo_img_container].width,500);
      set(layer[logo_img_container].height,prop);
    );
  );

  if(config.logo.link != '#' AND config.logo.link != '',
    addlayer(logo_action_btn);
    set(layer[logo_action_btn].align,bottom);
    set(layer[logo_action_btn].x,0);
    set(layer[logo_action_btn].y,40);
    set(layer[logo_action_btn].scale,0.5);
    set(layer[logo_action_btn].parent,logo_pane_container);
    set(layer[logo_action_btn].crop,0|510|480|75);
    layer[logo_action_btn].loadstyle(skin_style);
    set(layer[logo_action_btn].onclick,
      copy(logo_link,config.logo.link);
      unescape(logo_link);
      openurl(get(logo_link));
    );
  );

  tween(layer[logo_pane_container].alpha,1.0, 0.30, default);

  pause_autoplay();
    </action>

    <action name="hide_logo">
  tween(layer[logo_pane_container].alpha,0.0, 0.30, default,
    removelayer(logo_pane_container);
    removelayer(logo_img_container);
    removelayer(logo_action_btn);
  );

  resume_autoplay();
    </action>



    <action name="setup_pv_like">
  if(displayMode.preview != true AND displayMode.export != true ,
    if(config.feature.show_pv == 1 AND config.is_feipai != 1,
      showPV(get(var_pv));
    );
    if(config.feature.enable_like == 1,
      showLike(get(var_liked),get(var_like));
    );
  );
    </action>

    <action name="showPV">
  if(config.feature.show_pv == 1 AND %1 != 0 ,
    if(layer[auth_layer].visible == false ,
      copy(layer[auth_layer].url,plugin_url.TEXT_SWF);
      set(layer[auth_layer].autoWidth,true);
      set(layer[auth_layer].autoHeight,true);
      set(layer[auth_layer].background,false);
      set(layer[auth_layer].textshadow,0.5);
      set(layer[auth_layer].wordwrap,false);
      set(layer[auth_layer].handcursor,false);
      set(layer[auth_layer].enabled,true);
      set(layer[auth_layer].x,5);
      set(layer[auth_layer].y,5);
      set(layer[auth_layer].css,color:#ffffff; font-family:STXihei; font-size:14px;);
      set(layer[auth_layer].visible,true);
      txtadd(layer[auth_layer].html,'人气 : ');
      ,
      txtadd(layer[auth_layer].html,' 　 人气 : ');
    );


    txtadd(layer[auth_layer].html,%1);

    setup_layout();
  );
    </action>




    <action name="setup_fullscreen">
  if(device.fullscreensupport,
    set(layer[fullscreen_layer].enabled,true);
    set(layer[fullscreen_layer].scale,0.5);
    set(layer[fullscreen_layer].x,5);
    set(layer[fullscreen_layer].crop,64|589|64|65);
    layer[fullscreen_layer].loadstyle(skin_style);
    set(layer[fullscreen_layer].onclick,
      toggle(fullscreen);
      ifnot(fullscreen,
        set(crop,64|659|64|65);
        ,
        set(crop,64|589|64|65);
      );
    );
    set(layer[fullscreen_layer].visible,true);
    ,
    set(layer[fullscreen_layer].visible,false);
  );
    </action>
    <action name="setup_password">
  jscall(get(js_require_password));
    </action>

    <domains>
        <domain name="domain_1" replace_txt="http://pano.qncdn.720static.com" search_txt="https://ssl-panoimg.720static.com" />
        <domain name="domain_2" replace_txt="http://pano2.qncdn.720static.com" search_txt="https://ssl-panoimg2.720static.com" />
        <domain name="domain_3" replace_txt="http://pano3.qncdn.720static.com" search_txt="https://ssl-panoimg3.720static.com" />
        <domain name="domain_4" replace_txt="http://pano4.qncdn.720static.com" search_txt="https://ssl-panoimg4.720static.com" />
        <domain name="domain_5" replace_txt="http://pano5.qncdn.720static.com" search_txt="https://ssl-panoimg5.720static.com" />
        <domain name="domain_6" replace_txt="http://pano6a.qncdn.720static.com" search_txt="https://ssl-panoimg6.720static.com" />
        <domain name="domain_7" replace_txt="http://pano7.qncdn.720static.com" search_txt="https://ssl-panoimg7.720static.com" />
        <domain name="domain_8" replace_txt="http://pano8.qncdn.720static.com" search_txt="https://ssl-panoimg8.720static.com" />
        <domain name="domain_9" replace_txt="http://pano9.qncdn.720static.com" search_txt="https://ssl-panoimg9.720static.com" />
        <domain name="domain_10" replace_txt="http://pano10.qncdn.720static.com" search_txt="https://ssl-panoimg10.720static.com" />
        <domain name="domain_11" replace_txt="http://pano11.qncdn.720static.com" search_txt="https://ssl-panoimg11.720static.com" />
        <domain name="domain_12" replace_txt="http://pano12.qncdn.720static.com" search_txt="https://ssl-panoimg12.720static.com" />
        <domain name="domain_13" replace_txt="http://pano13.qncdn.720static.com" search_txt="https://ssl-panoimg13.720static.com" />
        <domain name="domain_14" replace_txt="http://pano14.qncdn.720static.com" search_txt="https://ssl-panoimg14.720static.com" />
        <domain name="domain_15" replace_txt="http://pano15.qncdn.720static.com" search_txt="https://ssl-panoimg15.720static.com" />
        <domain name="domain_16" replace_txt="http://pano16.qncdn.720static.com" search_txt="https://ssl-panoimg16.720static.com" />
        <domain name="domain_17" replace_txt="http://pano17.qncdn.720static.com" search_txt="https://ssl-panoimg17.720static.com" />
    </domains>

    <action name="replace_for_http">
  if(isHttp,

    set(player_http, 'http://api-qiniu2.720static.com');
    set(player_https, 'https://ssl-player.720static.com');
    set(media_http, 'http://media-qiniu2.720static.com');
    set(media_https, 'https://ssl-media.720static.com');
    set(thumb_http, 'http://thumb-qiniu.720static.com');
    set(thumb_https, 'https://ssl-thumb.720static.com');
    set(client_http, 'http://client-product.720static.com');
    set(client_https, 'https://ssl-client.720static.com');

    if(settings.client,

      for(set(i,0), i LT scene.count, inc(i),
        txtreplace(scene[get(i)].content, get(client_https), get(client_http));
      );


      txtreplace(style[skin_style].url, get(player_https), get(player_http));
      txtreplace(settings.thumb_btn_url, get(player_https), get(player_http));

      txtreplace(plugin_url.BASE_URL, get(player_https), get(player_http));
      txtreplace(plugin_url.TEXT_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.GYRO, get(player_https), get(player_http));
      txtreplace(plugin_url.SOUND_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.SOUND_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.SCROLL_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.SCROLL_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.RADAR_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.RADAR_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.SNOW_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.SNOW_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.PLUGINS_SUN_IMAGE, get(player_https), get(player_http));
      txtreplace(plugin_url.WEBVR_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.WEBVR_XML, get(player_https), get(player_http));

      for(set(i,4), i LT 59, inc(i),
        txtadd(hotspot_name_temp,'hotspot_',get(i));
        txtreplace(style[get(hotspot_name_temp)].url, get(player_https), get(player_http));
      );

      for(set(i,1), i LT 10, inc(i),
        txtadd(hotspot_name_temp, 'new_spotd0' ,get(i));
        txtreplace(style[get(hotspot_name_temp)].url, get(player_https), get(player_http));
      );
      txtreplace(style[new_spotd10].url, get(player_https), get(player_http));
      txtreplace(style[new_spotd11].url, get(player_https), get(player_http));

      txtreplace(settings.start_image_desktop, get(player_https), get(player_http));
      txtreplace(settings.start_image_mobile, get(player_https), get(player_http));

      txtreplace(settings.rain_image, get(player_https), get(player_http));
      txtreplace(settings.snow_image, get(player_https), get(player_http));
      txtreplace(settings.snow_js, get(player_https), get(player_http));
      txtreplace(settings.snow_swf, get(player_https), get(player_http));

      txtreplace(settings.map_zoom_image,  get(player_https), get(player_http));
      txtreplace(settings.close_image,  get(player_https), get(player_http));

      txtreplace(settings.comment_add_head_bg_image,  get(player_https), get(player_http));
      txtreplace(settings.comment_edit_line_image,  get(player_https), get(player_http));
      txtreplace(settings.comment_edit_bg_image,  get(player_https), get(player_http));

      txtreplace(hotspot[vr_cursor].url,  get(player_https), get(player_http));

      txtreplace(config.logo.url,  get(player_https), get(player_http));
      txtreplace(config.logo.url,  get(client_https), get(client_http));

      txtreplace(config.thumbs.thumb,  get(player_https), get(player_http));

      for(set(i,0), i LT config.thumbs.category.count , inc(i),
        txtreplace(config.thumbs.category[get(i)].thumb,  get(player_https), get(player_http));
        txtreplace(config.thumbs.category[get(i)].thumb,  get(client_https), get(client_http));

        for(set(j,0), j LT config.thumbs.category[get(i)].pano.count , inc(j),
          txtreplace(config.thumbs.category[get(i)].pano[get(j)].thumb,  get(thumb_https), get(thumb_http));
          txtreplace(config.thumbs.category[get(i)].pano[get(j)].thumb,  get(client_https), get(client_http));
        );
      );

      for(set(i,0), i LT config.links.link.count , inc(i),
        txtreplace(config.links.link[get(i)].url,  get(player_https), get(player_http));
        txtreplace(config.links.link[get(i)].url,  get(client_https), get(client_http));
      );


      for(set(i,0), i LT config.panos.pano.count, inc(i),
        txtreplace(config.panos.pano[get(i)].top_circle.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].top_circle.url,  get(client_https), get(client_http));

        txtreplace(config.panos.pano[get(i)].bottom_circle.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].bottom_circle.url,  get(client_https), get(client_http));

        txtreplace(config.panos.pano[get(i)].sound.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].sound.url,  get(client_https), get(client_http));

        txtreplace(config.panos.pano[get(i)].voice.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].voice.url,  get(client_https), get(client_http));

        txtreplace(config.panos.pano[get(i)].radar.map_url,  get(client_https), get(client_http));

        txtreplace(config.panos.pano[get(i)].weather.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].weather.url,  get(client_https), get(client_http));

        for(set(j,0), j LT config.panos.pano[get(i)].hotspots.hotspot.count , inc(j),
          txtreplace(config.panos.pano[get(i)].hotspots.hotspot[get(j)].image_url,  get(client_https), get(client_http));
        );
      );

      ,

      for(set(i,0), i LT scene.count, inc(i),
        for(set(j,0), j LT domains.domain.count, inc(j),
          txtreplace(scene[get(i)].content, get(domains.domain[get(j)].search_txt), get(domains.domain[get(j)].replace_txt));
        );
      );


      txtreplace(style[skin_style].url, get(player_https), get(player_http));
      txtreplace(settings.thumb_btn_url, get(player_https), get(player_http));

      txtreplace(plugin_url.BASE_URL, get(player_https), get(player_http));
      txtreplace(plugin_url.TEXT_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.GYRO, get(player_https), get(player_http));
      txtreplace(plugin_url.SOUND_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.SOUND_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.SCROLL_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.SCROLL_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.RADAR_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.RADAR_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.SNOW_SWF, get(player_https), get(player_http));
      txtreplace(plugin_url.SNOW_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.PLUGINS_SUN_IMAGE, get(player_https), get(player_http));
      txtreplace(plugin_url.WEBVR_JS, get(player_https), get(player_http));
      txtreplace(plugin_url.WEBVR_XML, get(player_https), get(player_http));

      for(set(i,4), i LT 59, inc(i),
        txtadd(hotspot_name_temp,'hotspot_',get(i));
        txtreplace(style[get(hotspot_name_temp)].url, get(player_https), get(player_http));
      );

      for(set(i,1), i LT 10, inc(i),
        txtadd(hotspot_name_temp, 'new_spotd0' ,get(i));
        txtreplace(style[get(hotspot_name_temp)].url, get(player_https), get(player_http));
      );
      txtreplace(style[new_spotd10].url, get(player_https), get(player_http));
      txtreplace(style[new_spotd11].url, get(player_https), get(player_http));

      txtreplace(settings.start_image_desktop, get(player_https), get(player_http));
      txtreplace(settings.start_image_mobile, get(player_https), get(player_http));

      txtreplace(settings.rain_image, get(player_https), get(player_http));
      txtreplace(settings.snow_image, get(player_https), get(player_http));
      txtreplace(settings.snow_js, get(player_https), get(player_http));
      txtreplace(settings.snow_swf, get(player_https), get(player_http));

      txtreplace(settings.map_zoom_image,  get(player_https), get(player_http));
      txtreplace(settings.close_image,  get(player_https), get(player_http));

      txtreplace(settings.comment_add_head_bg_image,  get(player_https), get(player_http));
      txtreplace(settings.comment_edit_line_image,  get(player_https), get(player_http));
      txtreplace(settings.comment_edit_bg_image,  get(player_https), get(player_http));

      txtreplace(hotspot[vr_cursor].url,  get(player_https), get(player_http));

      txtreplace(config.logo.url,  get(player_https), get(player_http));
      txtreplace(config.logo.url,  get(media_https), get(media_http));

      txtreplace(config.thumbs.thumb,  get(player_https), get(player_http));

      for(set(i,0), i LT config.thumbs.category.count , inc(i),
        txtreplace(config.thumbs.category[get(i)].thumb,  get(player_https), get(player_http));
        txtreplace(config.thumbs.category[get(i)].thumb,  get(media_https), get(media_http));

        for(set(j,0), j LT config.thumbs.category[get(i)].pano.count , inc(j),
          txtreplace(config.thumbs.category[get(i)].pano[get(j)].thumb,  get(thumb_https), get(thumb_http));
          txtreplace(config.thumbs.category[get(i)].pano[get(j)].thumb,  get(media_https), get(media_http));
        );
      );

      for(set(i,0), i LT config.links.link.count , inc(i),
        txtreplace(config.links.link[get(i)].url,  get(player_https), get(player_http));
        txtreplace(config.links.link[get(i)].url,  get(media_https), get(media_http));
      );


      for(set(i,0), i LT config.panos.pano.count, inc(i),
        txtreplace(config.panos.pano[get(i)].top_circle.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].top_circle.url,  get(media_https), get(media_http));

        txtreplace(config.panos.pano[get(i)].bottom_circle.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].bottom_circle.url,  get(media_https), get(media_http));

        txtreplace(config.panos.pano[get(i)].sound.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].sound.url,  get(media_https), get(media_http));

        txtreplace(config.panos.pano[get(i)].voice.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].voice.url,  get(media_https), get(media_http));

        txtreplace(config.panos.pano[get(i)].radar.map_url,  get(media_https), get(media_http));

        txtreplace(config.panos.pano[get(i)].weather.url,  get(player_https), get(player_http));
        txtreplace(config.panos.pano[get(i)].weather.url,  get(media_https), get(media_http));

        for(set(j,0), j LT config.panos.pano[get(i)].hotspots.hotspot.count , inc(j),
          txtreplace(config.panos.pano[get(i)].hotspots.hotspot[get(j)].image_url,  get(media_https), get(media_http));
        );
      );
    );
  );

    </action>

    <action name="load_pano_by_id">
  if(pano_id != %1,

    show_loading();

    stop_hotspot_sound();

    set(temp_show_comments,get(config.feature.show_comment));
    removeComments();

    set(pano_id,%1);
    txtadd(scene_name,scene_,%1);


    if(settings.sound_on == true AND config.panos.pano[get(scene_name)].sound.url != current_sound_url ,
      pause_sound();
    );

    if(settings.voice_on == true AND config.panos.pano[get(scene_name)].voice.url != current_voice_url ,
      pause_voice();
    );

    copy(category_show,category_thumbs_show);
    if(category_show == true AND %3 !== null,
      toggle_category_thumbs();
    );
                                                                                                           

    if(blend_mode === null,
      copy(blend_mode,blendmodes[blend0].blend);
    );

    if(%2 == 1 ,
                                                                                      
      loadscene(get(scene_name),null,MERGE,get(blend_mode));
      ,
      loadscene(get(scene_name),null,MERGE,get(blend_mode));
      set(view.hlookat,get(config.panos.pano[get(xml.scene)].view.hlookat));
      set(view.vlookat,get(config.panos.pano[get(xml.scene)].view.vlookat));
      set(view.fov,get(config.panos.pano[get(xml.scene)].view.fov));
    );

    copy(blend_mode,blendmodes[blend0].blend);

    if(displayMode.online == true OR displayMode === null,
      set(modify_id_cmd,get(js_modify_url));
      txtadd(modify_id_cmd,"('");
      txtadd(modify_id_cmd,get(pano_id));
      txtadd(modify_id_cmd,"')");
      jscall(get(modify_id_cmd));

      set(config.feature.show_comment,get(temp_show_comments));
      show_pano_comments();
    );

                                                                          
    if(%3 !== null,
      set(current_category_index, %3);
    );
    if(category_show == true AND %3 !== null,
      delayedcall(1,
        toggle_category_thumbs();
      );
    );
    update_pano_change_ui();
    setup_layout();
    ,
    lookto(get(config.panos.pano[get(xml.scene)].view.hlookat), get(config.panos.pano[get(xml.scene)].view.vlookat), get(config.panos.pano[get(xml.scene)].view.fov));
  );
    </action>

    <action name="load_pano_loop">
                                                                                                                                                                                                                                                                                                                                                                                                         

  if(is_looping != true AND config.panos.pano[0].autoplay.enter_next != 0,
    set(loop_flag,false);
    for(set(o,0), o LT config.thumbs.category.count, inc(o),
      for(set(i,0), i LT config.thumbs.category[get(o)].pano.count, inc(i),
        if(loop_flag == true,
          copy(next_pano_id,config.thumbs.category[get(o)].pano[get(i)].pano_id);
          delete(loop_flag);
        );
        if(loop_flag == false AND scene[get(xml.scene)].pano_id == config.thumbs.category[get(o)].pano[get(i)].pano_id,
          set(loop_flag,true);
        );
      );
    );

    if(next_pano_id === null,
      copy(next_pano_id,config.thumbs.category[0].pano[0].pano_id);
    );
    set(is_looping,true);
    delayedcall(1,
      set(is_looping,false);
      delete(next_pano_id);
    );
    load_pano_by_id(get(next_pano_id));
    set(is_looping,true);
    delayedcall(1,set(is_looping,false););
  );
    </action>


    <action name="setup_weather">

  if(config.panos.pano[get(scene_name)].sun.id !== null,
    add_sun(get(config.panos.pano[get(scene_name)].sun.ath),get(config.panos.pano[get(scene_name)].sun.atv));
  );

  if(config.panos.pano[get(scene_name)].weather.id !== null AND config.panos.pano[get(scene_name)].weather.id != -1,
    if(config.panos.pano[get(scene_name)].weather.id == 0,
      add_snow(get(config.panos.pano[get(scene_name)].weather.size));
      ,
      if(config.panos.pano[get(scene_name)].weather.id == 1,
        add_rain(get(config.panos.pano[get(scene_name)].weather.size));
        ,
        if(config.panos.pano[get(scene_name)].weather.id == 2,
          add_sun(get(config.panos.pano[get(scene_name)].weather.ath),get(config.panos.pano[get(scene_name)].weather.atv));
          ,
          if(config.panos.pano[get(scene_name)].weather.id == 3,
            if(config.panos.pano[get(scene_name)].weather.type == 1,
              add_image_rain(get(settings.weather_image_1), get(config.panos.pano[get(scene_name)].weather.size));
              ,
              if(config.panos.pano[get(scene_name)].weather.type == 2,
                add_image_rain(get(settings.weather_image_2), get(config.panos.pano[get(scene_name)].weather.size));
                ,
                add_image_rain(get(settings.weather_image_3), get(config.panos.pano[get(scene_name)].weather.size));
              );
            );
            ,
            copy(custom_weather_url,config.panos.pano[get(scene_name)].weather.url);
            txtadd(custom_weather_url,'?imageView2/0/w/512/h/512');
            add_image_rain(get(custom_weather_url), get(config.panos.pano[get(scene_name)].weather.size));
          );
        );
      );
    );
  );
    </action>
    <action name="add_sun">
                                                               
  addlensflare("obj",true);
  set(lensflares[obj].keep,false);
  set(lensflares[obj].visible,true);
  set(lensflares[obj].device,html5);
  set(lensflares[obj].item[flareobj].ath,%1);
  set(lensflares[obj].item[flareobj].atv,%2);
  set(lensflares[obj].item[flareobj].scene,get(xml.scene));
  set(lensflares[obj].item[flareobj].typ,blinkstyle1);
  set(lensflares[obj].item[flareobj].dust_effect,false);
  set(lensflares[obj].item[flareobj].keep,false);
    </action>
    <action name="add_rain">

  if(%1 === null,
    set(rain_size, 2);
    ,
    set(rain_size, %1);
  );

  removeplugin(snow);
  addplugin(snow);
  set(plugin[snow].keep,          false);
  set(plugin[snow].onloaded,
    set(plugin[snow].mode,          image);
    copy(plugin[snow].imageurl,      settings.rain_image);
    set(plugin[snow].blendmode,     normal);
    set(plugin[snow].flakes,        1000);
    mul(plugin[snow].flakes,        rain_size);
    set(plugin[snow].color,         0xefe3e4);
    set(plugin[snow].speed,         15.5);
    set(plugin[snow].shake,         1.0);
    set(plugin[snow].speedvariance, 1.0);
    set(plugin[snow].spreading,     2.0);
    set(plugin[snow].rainwidth,     0.4);
    mul(plugin[snow].rainwidth,     rain_size);
    set(plugin[snow].rainalpha,     0.5);
    set(plugin[snow].wind,          2.0);
  );
  if(device.flash,
		copy(plugin[snow].url,          settings.snow_swf);
    ,
		copy(plugin[snow].url,          settings.snow_js);
  );
    </action>
    <action name="remove_rain">
  removeplugin(snow);
    </action>
    <action name="add_snow">

  if(%1 === null,
    set(snow_size, 2);
    ,
    set(snow_size, %1);
  );


  removeplugin(snow);
  addplugin(snow);
  set(plugin[snow].keep,          false);
  set(plugin[snow].onloaded,
    set(plugin[snow].mode,          image);
    copy(plugin[snow].imageurl,      settings.snow_image);
    set(plugin[snow].blendmode,     normal);
    set(plugin[snow].flakes,        1500);
    mul(plugin[snow].flakes,        snow_size);
    set(plugin[snow].color,         0xdfe3e4);
    set(plugin[snow].speed,         get(snow_size));
    mul(plugin[snow].speed,         snow_size);
    add(plugin[snow].speed,         1);
    set(plugin[snow].shake,         4.0);
    set(plugin[snow].speedvariance, 2.0);
    set(plugin[snow].spreading,     4.0);
    set(plugin[snow].wind,          1.0);
    sub(plugin[snow].wind,          snow_size);
  );
  if(device.flash,
		copy(plugin[snow].url,          settings.snow_swf);
    ,
		copy(plugin[snow].url,          settings.snow_js);
  );


    </action>
    <action name="add_image_rain">

  if(%2 == null ,
    set(snow_size, 2);
    ,
    set(snow_size, %2);
  );


  removeplugin(snow);
  addplugin(snow);
  set(plugin[snow].keep,          false);
  set(plugin[snow].onloaded,
    set(plugin[snow].mode,          image);
    set(plugin[snow].imageurl,      %1);
    set(plugin[snow].imagescale,    0.5);
    set(plugin[snow].blendmode,     normal);
    set(plugin[snow].flakes,        150);
    mul(plugin[snow].flakes,        snow_size);
    set(plugin[snow].color,         0xdfe3e4);
    add(plugin[snow].speed,         0.5);
    set(plugin[snow].shake,         1.0);
    set(plugin[snow].speedvariance, 2.0);
    set(plugin[snow].spreading,     1.5);
    set(plugin[snow].wind,          0);
  );
  if(device.flash,
		copy(plugin[snow].url,          settings.snow_swf);
    ,
		copy(plugin[snow].url,          settings.snow_js);
  );

    </action>





    <action name="setup_contextmenu">
  if(config.auth.status == 1,
    set(contextmenu.item["copyright"].visible, true);
    ,
    set(contextmenu.item["copyright"].visible, false);
  );

  if(config.info.ccagreement !== null AND config.logo.is_720 == 1,
      copy(contextmenu.item["ccagreement"].caption, config.info.ccagreement);
      set(contextmenu.item["ccagreement"].visible, true);
  );
    </action>




    <plugin name="gyro_plugin" keep="true" url="" devices="html5" enabled="true" />
    <action name="setup_gyro">
    if(config.feature.enable_gyro == 1 AND !device.desktop AND device.html5,
	    copy(plugin[gyro_plugin].url, plugin_url.GYRO);

      set(layer[gyro_layer].scale,0.5);
      set(layer[gyro_layer].x,5);
      set(layer[gyro_layer].y,255);
      set(layer[gyro_layer].crop,259|659|64|65);
      layer[gyro_layer].loadstyle(skin_style);
      set(layer[gyro_layer].onclick,
        toggle_gyro();
        if(plugin[gyro_plugin].enabled == true,
            set(crop,259|659|64|65);
            ,
            set(crop,259|589|64|65);
        );
      );
      ,
      set(layer[gyro_layer].visible,false);
    );
    </action>
    <action name="toggle_gyro">
    switch(plugin[gyro_plugin].enabled);
    if(displayMode.online == true OR displayMode === null,
      if(plugin[gyro_plugin].enabled == true,
        jscall(get(js_enable_gyro));
        ,
        jscall(get(js_disable_gyro));
      );
    );
    </action>











    <action name="setup_vr">
    copy(vr_plugin_url,plugin_url.WEBVR_JS);
    if(config.feature.enable_vr == 1 AND device.html5 AND device.webgl AND displayMode.preview != true,


        copy(plugin[WebVR].url, vr_plugin_url);

        set(layer[vr_layer].scale,0.5);
        set(layer[vr_layer].x,5);
        set(layer[vr_layer].crop,-1|589|64|65);
        layer[vr_layer].loadstyle(skin_style);
        set(layer[vr_layer].onclick,
          turn_on_vr();
        );
        ,
        set(layer[vr_layer].visible,false);
  );
    </action>
    <action name="disable_vr">
    set(layer[vr_layer].visible,false);
    setup_layout();
    </action>
    <action name="turn_on_vr">
    webvr.entervr();
    </action>
    <action name="turn_off_vr">
    webvr.exitvr();
    </action>




    <action name="setup_autoplay">
  if(config.feature.enable_autorotate == 1 OR config.panos.pano[get(scene_name)].autoplay.enabled == true,
    delayedcall(6,
      set(autorotate.waittime, 6);
      set(autorotate.accel, 0);
      if(config.panos.pano[0].autoplay.duration !== null,
        set(temp_speed,360.0);
        div(temp_speed,config.panos.pano[get(scene_name)].autoplay.duration);
        copy(autorotate.speed, temp_speed);
        ,
        set(autorotate.speed, 2);
      );
      set(autorotate.accel,10);
      set(autorotate.enabled, true);
      if(config.panos.pano[get(scene_name)].view.autorotatekeepview == 1,
        set(autorotate.horizon, 'off');
        ,
        set(autorotate.horizon, 0.0);
      );
      if(config.panos.pano[get(scene_name)].autoplay.keep_originview == 1,
        set(autorotate.horizon, config.panos.pano[get(scene_name)].view.hlookat);
        ,
        set(autorotate.horizon, 0.0);
      );

      if(autoplayWaitPause,
        delayedcall(0.5,
          pause_autoplay();
          set(autoplayWaitPause,false);
        );
      );
    );
  );
    </action>
    <action name="resume_autoplay">
  set(autoplayWaitPause,false);
  autorotate.resume();
    </action>
    <action name="pause_autoplay">
  set(autoplayWaitPause,true);
  autorotate.pause();
    </action>


    <action name="switch_to_multires">
  for(set(i,0), i LT scene.count, inc(i),
    txtreplace(scene[get(i)].content, "webvr.isenabled AND device.desktop", "webvr.isenabled OR device.desktop");
  );
  loadscene(get(xml.scene),null,KEEPVIEW|MERGE,BLEND(0.5, easeInCubic));
    </action>

    <action name="switch_to_mobile">
  for(set(i,0), i LT scene.count, inc(i),
    txtreplace(scene[get(i)].content, "webvr.isenabled OR device.desktop", "webvr.isenabled AND device.desktop");
  );
  loadscene(get(xml.scene),null,KEEPVIEW|MERGE,BLEND(0.5, easeInCubic));
    </action>
    <style name="skin_style" url="krp/skin/skin_v8.png"/>

    <action name="setup_layout_template">


      set(menu_offset,5);
      set(menu_btn_size,65);
      if(config.panos.pano.count GT 1,
        set(layer[thumbs_btn_container].x, get(menu_offset));
        add(menu_offset,menu_btn_size);
        add(menu_offset,5);
      );


      for(set(i,0), i LT config.links.link.count, inc(i) ,
        txtadd(link_btn_container_name,'link_btn_container_', get(i));
        copy(layer[get(link_btn_container_name)].x, menu_offset);
        add(menu_offset,menu_btn_size);
      );


      set(bottom_right_offset,10);

      if(layer[comment_layer].visible == true,
        copy(layer[comment_layer].x,bottom_right_offset);
        add(bottom_right_offset,settings.bottom_right_btn_width);
      );

      if(layer[like_layer].visible == true,
        copy(layer[like_layer].x,bottom_right_offset);
        add(bottom_right_offset,settings.bottom_right_btn_width);
      );

      if(layer[qr_layer].visible == true,
        copy(layer[qr_layer].x,bottom_right_offset);
        add(bottom_right_offset,settings.bottom_right_btn_width);
      );

      if(layer[intro_layer].visible == true,
        copy(layer[intro_layer].x,bottom_right_offset);
        add(bottom_right_offset,settings.bottom_right_btn_width);
      );

      if(layer[location_layer].visible == true,
        copy(layer[location_layer].x,bottom_right_offset);
        add(bottom_right_offset,settings.bottom_right_btn_width);
      );


      if(layer[logo_layer].visible == true ,
        if(config.logo.align == 1 ,
            set(layer[logo_layer].align,topleft);
            set(layer[logo_layer].x,5);
            if(layer[auth_layer].visible == true,
              set(layer[logo_layer].y,30);
              ,
              set(layer[logo_layer].y,5);
            );
            ,

            set(layer[logo_layer].align,bottomright);
            set(layer[logo_layer].x,10);
            if(bottom_right_offset == 10,
              set(layer[logo_layer].y,10);
              ,
              set(layer[logo_layer].y,80);
            );
        );
      );

    </action>
    <action name="showLike">

  set(liked,%1);
  set(liked_total,%2);

  if(liked == true ,
    set(layer[like_btn].crop,80|814|80|81);
    ,
    set(layer[like_btn].crop,80|734|80|81);
    set(layer[like_layer].onclick,
      jscall(get(js_do_like));
      set(layer[like_btn].crop,80|814|80|81);
      set(layer[like_layer].onclick,null);
      set(layer[like_btn_txt].html,get(liked_total));
    );
  );

  if(liked_total == 0,
    set(layer[like_btn_txt].html,'赞');
    ,
    set(layer[like_btn_txt].html,get(liked_total));
  );

    </action>


    <action name="setup_bottom_btn">
  if(config.is_sdk != 1,

  if(config.feature.enable_like == 1 AND displayMode.preview != true AND displayMode.export != true,
    set(layer[like_layer].keep,true);
    set(layer[like_layer].type,container);
    set(layer[like_layer].children,false);
    set(layer[like_layer].bgcapture,true);
    set(layer[like_layer].bgcolor,0);
    set(layer[like_layer].bgalpha,0);
    set(layer[like_layer].visible,true);
    set(layer[like_layer].width,40);
    set(layer[like_layer].height,60);
    set(layer[like_layer].y,5);

    addlayer(like_btn);
    set(layer[like_btn].align,bottomcenter);
    set(layer[like_btn].parent,'like_layer');
    set(layer[like_btn].scale,0.45);
    set(layer[like_btn].keep,true);
    set(layer[like_btn].x,0);
    set(layer[like_btn].y,25);
    layer[like_btn].loadstyle(skin_style);
    set(layer[like_btn].crop,80|734|80|81);

    addlayer(like_btn_txt);
    set(layer[like_btn_txt].url,get(plugin_url.TEXT_SWF));
    set(layer[like_btn_txt].html,'赞');
    set(layer[like_btn_txt].keep,true);
    set(layer[like_btn_txt].parent,'like_layer');
    set(layer[like_btn_txt].align,bottom);
    set(layer[like_btn_txt].background,false);
    set(layer[like_btn_txt].textshadow,0.5);
    set(layer[like_btn_txt].x,0);
    set(layer[like_btn_txt].y,5);
    set(layer[like_btn_txt].wordwrap,false);
    set(layer[like_btn_txt].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);

    if(liked !== null,
      showLike(get(liked), get(liked_total));
    );
    ,
    set(layer[like_layer].visible,false);
  );


  if(config.feature.enable_share == 1 AND device.desktop AND displayMode.preview != true AND displayMode.export != true,
    set(layer[qr_layer].keep,true);
    set(layer[qr_layer].type,container);
    set(layer[qr_layer].children,false);
    set(layer[qr_layer].bgcapture,true);
    set(layer[qr_layer].bgcolor,0);
    set(layer[qr_layer].bgalpha,0);
    set(layer[qr_layer].visible,true);
    set(layer[qr_layer].width,40);
    set(layer[qr_layer].height,60);
    set(layer[qr_layer].y,5);
    set(layer[qr_layer].onclick,
      jscall(get(js_show_qr));
    );

    addlayer(qr_btn);
    set(layer[qr_btn].align,bottomcenter);
    set(layer[qr_btn].parent,'qr_layer');
    set(layer[qr_btn].scale,0.45);
    set(layer[qr_btn].keep,true);
    set(layer[qr_btn].x,0);
    set(layer[qr_btn].y,25);
    layer[qr_btn].loadstyle(skin_style);
    set(layer[qr_btn].crop,320|734|80|81);

    addlayer(qr_btn_txt);
    set(layer[qr_btn_txt].url,get(plugin_url.TEXT_SWF));
    set(layer[qr_btn_txt].html,'分享');
    set(layer[qr_btn_txt].keep,true);
    set(layer[qr_btn_txt].parent,'qr_layer');
    set(layer[qr_btn_txt].align,bottom);
    set(layer[qr_btn_txt].background,false);
    set(layer[qr_btn_txt].textshadow,0.5);
    set(layer[qr_btn_txt].x,0);
    set(layer[qr_btn_txt].y,5);
    set(layer[qr_btn_txt].wordwrap,false);
    set(layer[qr_btn_txt].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);
    ,
    set(layer[qr_layer].visible,false);
  );



  if(config.info.desc != "" AND (device.desktop OR displayMode.preview == true OR displayMode.export == true ),
    set(layer[intro_layer].keep,true);
    set(layer[intro_layer].type,container);
    set(layer[intro_layer].children,false);
    set(layer[intro_layer].bgcapture,true);
    set(layer[intro_layer].bgcolor,0);
    set(layer[intro_layer].bgalpha,0);
    set(layer[intro_layer].visible,true);
    set(layer[intro_layer].width,40);
    set(layer[intro_layer].height,60);
    set(layer[intro_layer].y,5);
    set(layer[intro_layer].onclick,
                                                                                               
        jscall(get(js_show_intro));
                 
    );

    addlayer(intro_btn);
    set(layer[intro_btn].align,bottomcenter);
    set(layer[intro_btn].parent,'intro_layer');
    set(layer[intro_btn].scale,0.45);
    set(layer[intro_btn].keep,true);
    set(layer[intro_btn].x,0);
    set(layer[intro_btn].y,25);
    layer[intro_btn].loadstyle(skin_style);
    set(layer[intro_btn].crop,160|734|80|81);

    addlayer(intro_btn_txt);
    set(layer[intro_btn_txt].url,get(plugin_url.TEXT_SWF));
    set(layer[intro_btn_txt].html,'简介');
    set(layer[intro_btn_txt].keep,true);
    set(layer[intro_btn_txt].parent,'intro_layer');
    set(layer[intro_btn_txt].align,bottom);
    set(layer[intro_btn_txt].background,false);
    set(layer[intro_btn_txt].textshadow,0.5);
    set(layer[intro_btn_txt].x,0);
    set(layer[intro_btn_txt].y,5);
    set(layer[intro_btn_txt].wordwrap,false);
    set(layer[intro_btn_txt].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);
    ,
    set(layer[intro_layer].visible,false);
  );

  if((config.feature.enable_share == 1 OR config.info.desc != "" OR config.feature.enable_location == 1 ) AND !device.desktop AND displayMode.preview != true AND displayMode.export != true,
    set(layer[more_layer].visible,true);
    set(layer[more_layer].scale,0.5);
    set(layer[more_layer].x,5);
    set(layer[more_layer].crop,0|660|64|64);
    layer[more_layer].loadstyle(skin_style);
    set(layer[more_layer].onclick,
      jscall(get(js_show_more));
    );
    ,
    set(layer[more_layer].visible,false);
  );


  if(config.feature.enable_comment == 1 AND displayMode.preview != true AND displayMode.export != true,
    set(layer[comment_layer].keep,true);
    set(layer[comment_layer].type,container);
    set(layer[comment_layer].children,false);
    set(layer[comment_layer].bgcapture,true);
    set(layer[comment_layer].bgcolor,0);
    set(layer[comment_layer].bgalpha,0);
    set(layer[comment_layer].visible,true);
    set(layer[comment_layer].width,40);
    set(layer[comment_layer].height,60);
    set(layer[comment_layer].y,5);
    set(layer[comment_layer].onclick,
      showComments();
      hide_ui();
      jscall(get(js_start_comment));
    );

    addlayer(comment_btn);
    set(layer[comment_btn].align,bottomcenter);
    set(layer[comment_btn].parent,'comment_layer');
    set(layer[comment_btn].scale,0.45);
    set(layer[comment_btn].keep,true);
    set(layer[comment_btn].x,0);
    set(layer[comment_btn].y,25);
    layer[comment_btn].loadstyle(skin_style);
    if(config.feature.show_comment == 1,
      set(layer[comment_btn].crop,0|734|80|81);
      ,
      set(layer[comment_btn].crop,0|814|80|80);
    );

    addlayer(comment_btn_txt);
    set(layer[comment_btn_txt].url,get(plugin_url.TEXT_SWF));
    set(layer[comment_btn_txt].html,'说一说');
    set(layer[comment_btn_txt].keep,true);
    set(layer[comment_btn_txt].parent,'comment_layer');
    set(layer[comment_btn_txt].align,bottom);
    set(layer[comment_btn_txt].background,false);
    set(layer[comment_btn_txt].textshadow,0.5);
    set(layer[comment_btn_txt].x,0);
    set(layer[comment_btn_txt].y,5);
    set(layer[comment_btn_txt].wordwrap,false);
    set(layer[comment_btn_txt].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);
    ,
    set(layer[comment_layer].visible,false);
  );

  if(device.desktop == true AND config.feature.enable_location == 1 AND displayMode.preview != true AND displayMode.export != true,
    set(layer[location_layer].keep,true);
    set(layer[location_layer].type,container);
    set(layer[location_layer].children,false);
    set(layer[location_layer].bgcapture,true);
    set(layer[location_layer].bgcolor,0);
    set(layer[location_layer].bgalpha,0);
    set(layer[location_layer].visible,true);
    set(layer[location_layer].width,40);
    set(layer[location_layer].height,60);
    set(layer[location_layer].y,5);
    set(layer[location_layer].onclick,
      jscall(get(js_show_location));
    );

    addlayer(location_btn);
    set(layer[location_btn].align,bottomcenter);
    set(layer[location_btn].parent,'location_layer');
    set(layer[location_btn].scale,0.45);
    set(layer[location_btn].keep,true);
    set(layer[location_btn].x,0);
    set(layer[location_btn].y,25);
    layer[location_btn].loadstyle(skin_style);
    set(layer[location_btn].crop,240|734|80|81);

    addlayer(location_btn_txt);
    set(layer[location_btn_txt].url,get(plugin_url.TEXT_SWF));
    set(layer[location_btn_txt].html,'足迹');
    set(layer[location_btn_txt].keep,true);
    set(layer[location_btn_txt].parent,'location_layer');
    set(layer[location_btn_txt].align,bottom);
    set(layer[location_btn_txt].background,false);
    set(layer[location_btn_txt].textshadow,0.5);
    set(layer[location_btn_txt].x,0);
    set(layer[location_btn_txt].y,5);
    set(layer[location_btn_txt].wordwrap,false);
    set(layer[location_btn_txt].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);
    ,
    set(layer[location_layer].visible,false);
  );
  );
    </action>
    <action name="setup_links">



  for(set(i,0), i LT config.links.link.count, inc(i) ,
    txtadd(link_btn_name,'link_btn_', get(i));
    txtadd(link_btn_txt_name,'link_btn_txt_', get(i));
    txtadd(link_btn_container_name,'link_btn_container_', get(i));

    addlayer(get(link_btn_container_name));
    set(layer[get(link_btn_container_name)].title, get(config.links.link[get(i)].title));
    set(layer[get(link_btn_container_name)].parent, 'links_container');
    set(layer[get(link_btn_container_name)].align, bottomleft);
    set(layer[get(link_btn_container_name)].type, container);
    set(layer[get(link_btn_container_name)].keep, true);
    set(layer[get(link_btn_container_name)].target_link, get(config.links.link[get(i)].name));
    set(layer[get(link_btn_container_name)].is_blank, get(config.links.link[get(i)].is_blank));
    set(layer[get(link_btn_container_name)].detail, get(config.links.link[get(i)].detail));
    set(layer[get(link_btn_container_name)].width, get(menu_btn_size));
    set(layer[get(link_btn_container_name)].height, get(menu_btn_size));
    set(layer[get(link_btn_container_name)].y, 5);
    set(layer[get(link_btn_container_name)].children,false);
    set(layer[get(link_btn_container_name)].bgcapture,true);
    set(layer[get(link_btn_container_name)].bgcolor,0);
    set(layer[get(link_btn_container_name)].bgalpha,0);
    set(layer[get(link_btn_container_name)].lng,get(config.links.link[get(i)].lng));
    set(layer[get(link_btn_container_name)].lat,get(config.links.link[get(i)].lat));
    copy(layer[get(link_btn_container_name)].link_type, config.links.link[get(i)].link_type);
    copy(layer[get(link_btn_container_name)].link, config.links.link[get(i)].link);
    set(layer[get(link_btn_container_name)].onhover,
      if(link_type == 2 OR link_type == 3,
        showtext(get(title),tooltipTextStyle);
        ,
        showtext(get(link),tooltipTextStyle);
      );
    );
    set(layer[get(link_btn_container_name)].onclick,
      if(link_type == 2 ,
        set(action_cmd,"window.krpPathfinding(");
        txtadd(action_cmd,get(lng));
        txtadd(action_cmd,",");
        txtadd(action_cmd,get(lat));
        txtadd(action_cmd,")");
        jscall(get(action_cmd));
        ,
        if(link_type == 3,
          show_mix_link();
          ,
          unescape(link);
          openurl(get(link),_blank);
        );
      );
    );

    addlayer(get(link_btn_name));
    copy(config_links_link_url,config.links.link[get(i)].url);
    txtadd(config_links_link_url,'?imageView2/0/w/80/h/80');
    copy(layer[get(link_btn_name)].url, config_links_link_url);
    set(layer[get(link_btn_name)].parent, get(link_btn_container_name));
    set(layer[get(link_btn_name)].scale, 0.45);
    set(layer[get(link_btn_name)].align, bottom);
    set(layer[get(link_btn_name)].keep, true);
    set(layer[get(link_btn_name)].width, 80);
    set(layer[get(link_btn_name)].height, 80);
    set(layer[get(link_btn_name)].y, 22);


    addlayer(get(link_btn_txt_name));
    copy(layer[get(link_btn_txt_name)].url, plugin_url.TEXT_SWF);
    set(layer[get(link_btn_txt_name)].parent, get(link_btn_container_name));
    set(layer[get(link_btn_txt_name)].html, get(config.links.link[get(i)].title));
    set(layer[get(link_btn_txt_name)].align, bottomcenter);
    set(layer[get(link_btn_txt_name)].keep, true);
    set(layer[get(link_btn_txt_name)].width, get(menu_btn_size));
    set(layer[get(link_btn_txt_name)].height, 20);
    set(layer[get(link_btn_txt_name)].y, 0);
    set(layer[get(link_btn_txt_name)].background,false);
    set(layer[get(link_btn_txt_name)].textshadow,0.5);
    set(layer[get(link_btn_txt_name)].wordwrap,false);
    set(layer[get(link_btn_txt_name)].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);

  );
    </action>

    <action name="show_mix_link">

  copy(titleJSON,title);
  escape(titleJSON);
  copy(contentJSON,detail);
  escape(contentJSON);
  copy(urlJSON,detail);
  escape(urlJSON);

  set(hotspotMixJSON,'{"title":"');
  txtadd(hotspotMixJSON,get(titleJSON));
  txtadd(hotspotMixJSON,'","url":"');
  if(detail !== null,
    txtadd(hotspotMixJSON,get(urlJSON));
    txtadd(hotspotMixJSON,'","text":"');
    txtadd(hotspotMixJSON,get(contentJSON));
    txtadd(hotspotMixJSON,'","blank":"');
    txtadd(hotspotMixJSON,get(is_blank));
  );
  txtadd(hotspotMixJSON,'","images":["');


  for(set(i,0),i LT config.links.link[get(target_link)].image.count,inc(i),
    copy(imageJSON,config.links.link[get(target_link)].image[get(i)].url);
    escape(imageJSON);
    txtadd(hotspotMixJSON,get(MEDIA_DOMAIN));
    txtadd(hotspotMixJSON,get(imageJSON));
    copy(lastIndex,config.links.link[get(target_link)].image.count);
    sub(lastIndex,1);
    if(i LT lastIndex,
      txtadd(hotspotMixJSON,'","');
    );
  );



  txtadd(hotspotMixJSON,'"],"textArray":[');
  for(set(i,0),i LT config.links.link[get(target_link)].image.count,inc(i),
    txtadd(hotspotMixJSON,'"');
    copy(textJSON,config.links.link[get(target_link)].image[get(i)].text);
    escape(textJSON);
    if(textJSON === null OR textJSON == 'null',
      set(textJSON, '');
    );
    txtadd(hotspotMixJSON,get(textJSON));

    copy(lastIndex,config.links.link[get(target_link)].image.count);
    sub(lastIndex,1);
    if(i LT lastIndex,
      txtadd(hotspotMixJSON,'",');
      ,
      txtadd(hotspotMixJSON,'"');
    );
  );


  txtadd(hotspotMixJSON,']}');

  jscall(calc(js_mix_hotspot + hotspotMixJSON +')'));

  pause_autoplay();
    </action>

    <action name="update_pano_change_ui">
  for(set(o,0), o LT config.thumbs.category.count, inc(o),
    for(set(i,0), i LT config.thumbs.category[get(o)].pano.count, inc(i),
      txtadd(pano_thumb_container_name,'pano_thumb_container_',get(o),'_',get(i));
      if(pano_id == config.thumbs.category[get(o)].pano[get(i)].pano_id,
        set(layer[get(pano_thumb_container_name)].bgborder,3 0xf6b64c 1);
        ,
        set(layer[get(pano_thumb_container_name)].bgborder,3 0xffffff 1);
      );
    );
  );
    </action>

    <action name="scroll_to_current_pano">
  for(set(o,0), o LT config.thumbs.category.count, inc(o),
    for(set(i,0), i LT config.thumbs.category[get(o)].pano.count, inc(i),
      txtadd(pano_thumb_container_name,'pano_thumb_container_',get(o),'_',get(i));
      if(pano_id == config.thumbs.category[get(o)].pano[get(i)].pano_id,
        set(pano_scroll_name,pano_thumbs_scrollarea_);
        txtadd(pano_scroll_name,get(o));
        plugin[get(pano_scroll_name)].scrolltocenter(get(layer[get(pano_thumb_container_name)].x),null);
      );
    );
  );
    </action>

    <action name="setup_thumbs">

  copy(menu_btn_size,settings.menu_btn_width);

  if(config.panos.pano.count GT 1 ,

    set(thumbs_btn_name,'thumbs_btn');
    set(thumbs_btn_txt_name,'thumbs_btn_txt');
    set(thumbs_btn_container_name,'thumbs_btn_container');

    addlayer(get(thumbs_btn_container_name));
    set(layer[get(thumbs_btn_container_name)].parent, 'thumb_container');
    set(layer[get(thumbs_btn_container_name)].align, bottomleft);
    set(layer[get(thumbs_btn_container_name)].keep, true);
    set(layer[get(thumbs_btn_container_name)].type, container);
    set(layer[get(thumbs_btn_container_name)].width, get(menu_btn_size));
    set(layer[get(thumbs_btn_container_name)].height, get(menu_btn_size));
    set(layer[get(thumbs_btn_container_name)].y, 5);
    set(layer[get(thumbs_btn_container_name)].children,false);
    set(layer[get(thumbs_btn_container_name)].bgcapture,true);
    set(layer[get(thumbs_btn_container_name)].bgcolor,0);
    set(layer[get(thumbs_btn_container_name)].bgalpha,0);
    set(layer[get(thumbs_btn_container_name)].onclick,
      toggle_category_thumbs();
    );


    addlayer(get(thumbs_btn_name));
    set(layer[get(thumbs_btn_name)].parent, get(thumbs_btn_container_name));
    set(layer[get(thumbs_btn_name)].scale, 0.45);
    set(layer[get(thumbs_btn_name)].align, bottom);
    set(layer[get(thumbs_btn_name)].width, 80);
    set(layer[get(thumbs_btn_name)].height, 80);
    set(layer[get(thumbs_btn_name)].y, 22);
    set(layer[get(thumbs_btn_name)].keep, true);


    addlayer(get(thumbs_btn_txt_name));
    copy(layer[get(thumbs_btn_txt_name)].url, plugin_url.TEXT_SWF);
    set(layer[get(thumbs_btn_txt_name)].parent, get(thumbs_btn_container_name));
    set(layer[get(thumbs_btn_txt_name)].align, bottomcenter);
    set(layer[get(thumbs_btn_txt_name)].keep, true);
    set(layer[get(thumbs_btn_txt_name)].width, get(menu_btn_size));
    set(layer[get(thumbs_btn_txt_name)].height, 20);
    set(layer[get(thumbs_btn_txt_name)].y, 0);
    set(layer[get(thumbs_btn_txt_name)].background,false);
    set(layer[get(thumbs_btn_txt_name)].textshadow,0.5);
    set(layer[get(thumbs_btn_txt_name)].wordwrap,false);
    set(layer[get(thumbs_btn_txt_name)].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);

    if(config.thumbs.category[0].thumb != '',
      set(layer[get(thumbs_btn_name)].url, get(config.thumbs.category[0].thumb));
      ,
      copy(layer[get(thumbs_btn_name)].url, settings.thumb_btn_url);
    );

    if(config.thumbs.category.count == 1,
                                                                             
      if(config.thumbs.category[0].title === null OR config.thumbs.category[0].title == "",
        set(layer[get(thumbs_btn_txt_name)].html, get(config.thumbs.title));
        ,
        set(layer[get(thumbs_btn_txt_name)].html, get(config.thumbs.category[0].title));
      );
      ,
                                                                             
      set(layer[get(thumbs_btn_txt_name)].html, get(config.thumbs.title));
    );

    add_category_thumbs();
    add_pano_thumbs();


    if(config.thumbs.show_thumb == 1,
      delayedcall(1,toggle_category_thumbs(););
    );

  );
    </action>

    <action name="add_category_thumbs">


  if(config.thumbs.category.count GT 1,



    copy(thumbwidth, settings.category_thumbs_width);
    copy(thumbheight, settings.category_thumbs_height);
    copy(thumbpadding_h, settings.category_thumbs_padding_h);
    copy(thumbpadding_v, settings.category_thumbs_padding_v);
    copy(thumbcrop, settings.category_thumbs_bg_crop);

    add(thumbxoffset, thumbwidth, thumbpadding_h);
    mul(thumbxcenter, thumbxoffset, 0.5);
    mul(thumbbarwidth, thumbxoffset, config.thumbs.category.count);
    add(thumbbarwidth, thumbpadding_h);
    add(thumbbarheight, thumbpadding_v, thumbheight);
    add(thumbbarheight, thumbpadding_v);

    addlayer(category_thumbs_mask);
    set(layer[category_thumbs_mask].parent, 'category_container');
    set(layer[category_thumbs_mask].type, container);
    set(layer[category_thumbs_mask].align, bottomleft);
    set(layer[category_thumbs_mask].y, 80);
    set(layer[category_thumbs_mask].width, 100%);
    set(layer[category_thumbs_mask].height, 100%);
    set(layer[category_thumbs_mask].maskchildren,true);
    set(layer[category_thumbs_mask].keep,true);


    addlayer(category_thumbs_container);
    set(layer[category_thumbs_container].parent, 'category_thumbs_mask');
    set(layer[category_thumbs_container].type, container);
    set(layer[category_thumbs_container].align, bottomleft);
    set(layer[category_thumbs_container].y, -150);
    set(layer[category_thumbs_container].width, 100%);
    copy(layer[category_thumbs_container].height, thumbbarheight);
    set(layer[category_thumbs_container].bgalpha, 0.3);
    set(layer[category_thumbs_container].keep,true);

    addlayer(category_thumbs_scrollarea);
    if(device.flash,
      copy(layer[category_thumbs_scrollarea].url, plugin_url.SCROLL_SWF);
      ,
      copy(layer[category_thumbs_scrollarea].url, plugin_url.SCROLL_JS);
    );
    set(layer[category_thumbs_scrollarea].parent,'category_thumbs_container');
    set(layer[category_thumbs_scrollarea].direction,h);
    set(layer[category_thumbs_scrollarea].align,bottom);
    copy(layer[category_thumbs_scrollarea].height,thumbbarheight);
    set(layer[category_thumbs_scrollarea].keep,true);
    set(layer[category_thumbs_scrollarea].onloaded,setcenter(0,0););




    set(thumb_cnt,0);
    for(set(i,0), i LT config.thumbs.category.count, inc(i),

      txtadd(category_thumb_container_name,'category_thumb_container_',get(i));
      txtadd(category_thumb_name,'category_thumb_',get(i));
      txtadd(category_thumb_text_name, 'category_thumb_text_', get(i));

      addlayer(get(category_thumb_container_name));
      copy(thumbs_category_thumb,config.thumbs.category[get(i)].thumb);
      txtadd(thumbs_category_thumb,'?imageView2/0/w/160/h/160');
      copy(layer[get(category_thumb_container_name)].url,thumbs_category_thumb);
      set(layer[get(category_thumb_container_name)].keep, true);
      set(layer[get(category_thumb_container_name)].parent, 'category_thumbs_scrollarea');
      set(layer[get(category_thumb_container_name)].align, left);
      set(layer[get(category_thumb_container_name)].children, false);
      set(layer[get(category_thumb_container_name)].category_index, get(i));
      set(layer[get(category_thumb_container_name)].onclick, show_pano_thumbs(););
      set(layer[get(category_thumb_container_name)].title, get(config.thumbs.category[get(i)].title));
      set(layer[get(category_thumb_container_name)].onhover,showtext(get(title),tooltipTextStyle));
      layer[get(category_thumb_container_name)].loadstyle(skin_style);
      copy(layer[get(category_thumb_container_name)].crop, thumbcrop);
      copy(layer[get(category_thumb_container_name)].width,thumbwidth);
      copy(layer[get(category_thumb_container_name)].height,thumbheight);
      mul(thumbx, i, thumbxoffset);
      add(thumbx, thumbpadding_h);
      copy(layer[get(category_thumb_container_name)].x, thumbx);
      add(scene[get(i)].thumbx, thumbx, thumbxcenter);
      copy(scene[get(i)].thumby, thumbpadding_v);



      addlayer(get(category_thumb_name));
      copy(tempImageViewURL, config.thumbs.category[get(i)].pano[0].thumb);
      txtadd(tempImageViewURL, '?imageView2/0/w/160/h/160');
      copy(layer[get(category_thumb_name)].url, tempImageViewURL);
      set(layer[get(category_thumb_name)].keep, true);
      set(layer[get(category_thumb_name)].parent, get(category_thumb_container_name));
      set(layer[get(category_thumb_name)].align, leftbottom);
      set(layer[get(category_thumb_name)].category_index, get(i));
      set(layer[get(category_thumb_name)].width, 83);
      set(layer[get(category_thumb_name)].height, 83);
      set(layer[get(category_thumb_name)].x, 8);
      set(layer[get(category_thumb_name)].y, 8);

      addlayer(get(category_thumb_text_name));
      copy(layer[get(category_thumb_text_name)].url, plugin_url.TEXT_SWF);
      set(layer[get(category_thumb_text_name)].keep, true);
      set(layer[get(category_thumb_text_name)].align, bottom);
      set(layer[get(category_thumb_text_name)].width,80);
      set(layer[get(category_thumb_text_name)].height,16);
      set(layer[get(category_thumb_text_name)].y,10);
      set(layer[get(category_thumb_text_name)].zorder,2);
      set(layer[get(category_thumb_text_name)].background,true);
      set(layer[get(category_thumb_text_name)].backgroundcolor,0x000000);
      set(layer[get(category_thumb_text_name)].backgroundalpha,0.5);
      set(layer[get(category_thumb_text_name)].wordwrap,false);
      set(layer[get(category_thumb_text_name)].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);
      set(layer[get(category_thumb_text_name)].parent, get(category_thumb_container_name));
      set(layer[get(category_thumb_text_name)].html, get(config.thumbs.category[get(i)].title));

      inc(thumb_cnt);

    );


    copy(layer[category_thumbs_scrollarea].width, thumbwidth);
    add(layer[category_thumbs_scrollarea].width, thumbpadding_h);
    mul(layer[category_thumbs_scrollarea].width, thumb_cnt);
    add(layer[category_thumbs_scrollarea].width, thumb_cnt);

  );
    </action>

    <action name="add_pano_thumbs">

  if(config.panos.pano.count GT 1 ,

    copy(thumbwidth, settings.pano_thumbs_width);
    copy(thumbheight, settings.pano_thumbs_height);
    copy(thumbpadding_h, settings.pano_thumbs_padding_h);
    copy(thumbpadding_v, settings.pano_thumbs_padding_v);

    add(thumbxoffset, thumbwidth, thumbpadding_h);
    mul(thumbxcenter, thumbxoffset, 0.5);
    mul(thumbbarwidth, thumbxoffset, config.thumbs.category.count);
    add(thumbbarwidth, thumbpadding_h);
    add(thumbbarheight, thumbpadding_v, thumbheight);
    add(thumbbarheight, thumbpadding_v);

    for(set(o,0), o LT config.thumbs.category.count, inc(o),

      txtadd(pano_thumbs_mask_name,'pano_thumbs_mask_',get(o));
      txtadd(pano_thumbs_container_name,'pano_thumbs_container_',get(o));
      txtadd(pano_thumbs_scrollarea_name,'pano_thumbs_scrollarea_',get(o));

      addlayer(get(pano_thumbs_mask_name));
      set(layer[get(pano_thumbs_mask_name)].parent, 'category_container');
      set(layer[get(pano_thumbs_mask_name)].type, container);
      set(layer[get(pano_thumbs_mask_name)].align, bottomleft);
      if(config.thumbs.category.count GT 1 ,
        set(layer[get(pano_thumbs_mask_name)].y, 210);
        ,
        set(layer[get(pano_thumbs_mask_name)].y, 80);
      );
      set(layer[get(pano_thumbs_mask_name)].width, 100%);
      set(layer[get(pano_thumbs_mask_name)].height, 100%);
      set(layer[get(pano_thumbs_mask_name)].maskchildren,true);
      set(layer[get(pano_thumbs_mask_name)].keep,true);



      addlayer(get(pano_thumbs_container_name));
      set(layer[get(pano_thumbs_container_name)].parent, get(pano_thumbs_mask_name));
      set(layer[get(pano_thumbs_container_name)].type, container);
      set(layer[get(pano_thumbs_container_name)].align, bottomleft);
      set(layer[get(pano_thumbs_container_name)].y, 0);
      set(layer[get(pano_thumbs_container_name)].width, 100%);
      copy(layer[get(pano_thumbs_container_name)].height, thumbbarheight);
      set(layer[get(pano_thumbs_container_name)].bgalpha, 0.3);
      set(layer[get(pano_thumbs_container_name)].keep,true);
      set(layer[get(pano_thumbs_container_name)].y, -140);


      addlayer(get(pano_thumbs_scrollarea_name));
      if(device.flash,
        copy(layer[get(pano_thumbs_scrollarea_name)].url, plugin_url.SCROLL_SWF);
        ,
        copy(layer[get(pano_thumbs_scrollarea_name)].url, plugin_url.SCROLL_JS);
      );
      set(layer[get(pano_thumbs_scrollarea_name)].parent,get(pano_thumbs_container_name));
      set(layer[get(pano_thumbs_scrollarea_name)].direction,h);
      set(layer[get(pano_thumbs_scrollarea_name)].align,bottom);
      set(layer[get(pano_thumbs_scrollarea_name)].height,100);
      set(layer[get(pano_thumbs_scrollarea_name)].keep,true);


      set(thumb_cnt,0);
      for(set(i,0), i LT config.thumbs.category[get(o)].pano.count, inc(i),

        txtadd(pano_thumb_container_name,'pano_thumb_container_',get(o),'_',get(i));
        txtadd(pano_thumb_img_name,'pano_thumb_img_',get(o),'_',get(i));
        txtadd(pano_thumb_text_name, 'pano_thumb_text_',get(o),'_',get(i));



        addlayer(get(pano_thumb_container_name));
        set(layer[get(pano_thumb_container_name)].type, container);
        set(layer[get(pano_thumb_container_name)].keep, true);
        set(layer[get(pano_thumb_container_name)].parent, get(pano_thumbs_scrollarea_name));
        set(layer[get(pano_thumb_container_name)].bgcolor,0x999999);
        set(layer[get(pano_thumb_container_name)].bgalpha,1);
        set(layer[get(pano_thumb_container_name)].bgborder,3 0xffffff 1);
        set(layer[get(pano_thumb_container_name)].children, false);
        set(layer[get(pano_thumb_container_name)].bgcapture, true);
        set(layer[get(pano_thumb_container_name)].align, leftbottom);
        copy(layer[get(pano_thumb_container_name)].width, thumbwidth);
        copy(layer[get(pano_thumb_container_name)].height, thumbheight);
        mul(thumbx, i, thumbxoffset);
        add(thumbx, thumbpadding_h);
        copy(layer[get(pano_thumb_container_name)].x, thumbx);
        copy(layer[get(pano_thumb_container_name)].y, thumbpadding_v);
        add(scene[get(i)].thumbx, thumbx, thumbxcenter);
        copy(scene[get(i)].thumby, thumbpadding_v);
        copy(layer[get(pano_thumb_container_name)].linkedscene, config.thumbs.category[get(o)].pano[get(i)].pano_id);
        set(layer[get(pano_thumb_container_name)].onclick,
          if(view_type != 0,
            load_pano_by_id(get(linkedscene),1);
            ,
            load_pano_by_id(get(linkedscene));
          );
        );
        set(layer[get(pano_thumb_container_name)].title, get(config.thumbs.category[get(o)].pano[get(i)].title));
        set(layer[get(pano_thumb_container_name)].onhover,showtext(get(title),tooltipTextStyle));



        addlayer(get(pano_thumb_img_name));
        copy(tempImageViewURL,config.thumbs.category[get(o)].pano[get(i)].thumb);
        txtadd(tempImageViewURL, '?imageView2/0/w/160/h/160');
        copy(layer[get(pano_thumb_img_name)].url, tempImageViewURL);
        set(layer[get(pano_thumb_img_name)].keep, true);
        set(layer[get(pano_thumb_img_name)].parent, get(pano_thumb_container_name));
        set(layer[get(pano_thumb_img_name)].align, center);
        copy(layer[get(pano_thumb_img_name)].width, thumbwidth);
        copy(layer[get(pano_thumb_img_name)].height, thumbheight);


        addlayer(get(pano_thumb_text_name));
        copy(layer[get(pano_thumb_text_name)].url, plugin_url.TEXT_SWF);
        set(layer[get(pano_thumb_text_name)].keep, true);
        set(layer[get(pano_thumb_text_name)].align, bottom);
        set(layer[get(pano_thumb_text_name)].width,80);
        set(layer[get(pano_thumb_text_name)].height,16);
        set(layer[get(pano_thumb_text_name)].zorder,2);
        set(layer[get(pano_thumb_text_name)].background,true);
        set(layer[get(pano_thumb_text_name)].backgroundcolor,0x000000);
        set(layer[get(pano_thumb_text_name)].backgroundalpha,0.5);
        set(layer[get(pano_thumb_text_name)].wordwrap,false);
        set(layer[get(pano_thumb_text_name)].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);
        set(layer[get(pano_thumb_text_name)].parent, get(pano_thumb_container_name));
        set(layer[get(pano_thumb_text_name)].html, get(config.thumbs.category[get(o)].pano[get(i)].title));

        if(config.thumbs.category[get(o)].pano[get(i)].title == "",
          set(layer[get(pano_thumb_text_name)].visible,false);
        );

        inc(thumb_cnt);

      );


      copy(layer[get(pano_thumbs_scrollarea_name)].width, thumbwidth);
      add(layer[get(pano_thumbs_scrollarea_name)].width, thumbpadding_h);
      mul(layer[get(pano_thumbs_scrollarea_name)].width, thumb_cnt);
      add(layer[get(pano_thumbs_scrollarea_name)].width, thumb_cnt);
      set(layer[get(pano_thumbs_scrollarea_name)].onloaded,
        setcenter(0,0);
      );
    );
  );
    </action>
    <action name="toggle_category_thumbs">
  if(config.thumbs.category.count GT 1 ,
    if(category_thumbs_show == true,
      hide_category_thumbs();
      hide_pano_thumbs();
      if(config.autoTours.tour.point.count GT 0 ,
        set(layer[autotour_container].visible, true);
      );
      ,
      show_category_thumbs();
      show_pano_thumbs();
      scroll_to_current_pano();
      if(config.autoTours.tour.point.count GT 0 ,
        set(layer[autotour_container].visible, false);
      );
    );
    ,
    if(category_thumbs_show == true,
      hide_pano_thumbs();
      set(category_thumbs_show,false);
      if(config.autoTours.tour.point.count GT 0 ,
        set(layer[autotour_container].visible, true);
      );
      ,
      show_pano_thumbs();
      scroll_to_current_pano();
      set(category_thumbs_show,true);
      if(config.autoTours.tour.point.count GT 0 ,
        set(layer[autotour_container].visible, false);
      );
    );
  );
    </action>
    <action name="show_category_thumbs">
  tween(layer[category_thumbs_container].y,0,0.2);
  set(category_thumbs_show,true);
    </action>
    <action name="hide_category_thumbs">
  if(category_thumbs_show == true,
    tween(layer[category_thumbs_container].y,-150,0.2);
    set(category_thumbs_show,false);
  );
    </action>
    <action name="show_pano_thumbs">

  if(pano_thumbs_show == true AND current_category_index != category_index,
    hide_pano_thumbs();
  );

  if(category_index === null,
                                                         
    set(internal_category_index, get(current_category_index));
    ,
    set(internal_category_index, get(category_index));
  );

  txtadd(current_category_thumb_name,'category_thumb_container_',get(internal_category_index));
  copy(layer[get(current_category_thumb_name)].crop, settings.category_thumbs_bg_crop_selected);

  txtadd(current_category_name,'pano_thumbs_container_',get(internal_category_index));
  tween(layer[get(current_category_name)].y,0,0.2);

  copy(current_category_index,internal_category_index);
  set(pano_thumbs_show,true);

  update_pano_change_ui();

    </action>

    <action name="hide_pano_thumbs">

  if(pano_thumbs_show == true,
    txtadd(current_category_thumb_name,'category_thumb_container_',get(current_category_index));
    copy(layer[get(current_category_thumb_name)].crop, settings.category_thumbs_bg_crop);

    txtadd(current_category_name,'pano_thumbs_container_',get(current_category_index));
    tween(layer[get(current_category_name)].y,-140,0.2);
    set(pano_thumbs_show,false);
  );
    </action>

    <action name="add_thumbs">

  addlayer(category_thumbs_scrollarea);
  if(device.flash,
    copy(layer[category_thumbs_scrollarea].url, plugin_url.SCROLL_SWF);
    ,
    copy(layer[category_thumbs_scrollarea].url, plugin_url.SCROLL_JS);
  );
  set(layer[category_thumbs_scrollarea].parent,'category_container');
  set(layer[category_thumbs_scrollarea].direction,h);
  set(layer[category_thumbs_scrollarea].align,bottomleft);
  set(layer[category_container].y,200);
  set(layer[category_thumbs_scrollarea].height,140);
  set(layer[category_thumbs_scrollarea].keep,true);
  set(layer[category_thumbs_scrollarea].backgroundalpha,1);
  set(layer[get(category_container)].background,true);
  set(layer[get(category_container)].backgroundcolor,0x000000);
  set(layer[get(category_container)].backgroundalpha,0.5);


  copy(thumbwidth, settings.thumbs_width);
  copy(thumbheight, settings.thumbs_height);
  copy(thumbpadding, settings.thumbs_padding);

  add(thumbxoffset, thumbwidth, thumbpadding);
  mul(thumbxcenter, thumbxoffset, 0.5);
  mul(thumbbarwidth, thumbxoffset, config.thumbs.category.count);
  add(thumbbarwidth, thumbpadding);
  add(thumbbarheight, thumbpadding, thumbheight);
  add(thumbbarheight, thumbpadding);

  if(config.thumbs.category.count GT 0,

    set(thumb_cnt,0);
    for(set(i,0), i LT config.thumbs.category.count, inc(i),

      txtadd(category_thumb_name,'category_thumb_',get(i));
      txtadd(category_thumb_text_name, 'category_thumb_text_', get(i));

      addlayer(get(category_thumb_name));
      copy(layer[get(category_thumb_name)].url, config.thumbs.category[get(i)].thumb);
      set(layer[get(category_thumb_name)].keep, true);
      set(layer[get(category_thumb_name)].parent, 'category_thumbs_scrollarea');
      set(layer[get(category_thumb_name)].align, lefttop);
      copy(layer[get(category_thumb_name)].width, thumbwidth);
      copy(layer[get(category_thumb_name)].height, thumbheight);
      mul(thumbx, i, thumbxoffset);
      add(thumbx, thumbpadding);
      copy(layer[get(category_thumb_name)].x, thumbx);
      copy(layer[get(category_thumb_name)].y, thumbpadding);
      add(scene[get(i)].thumbx, thumbx, thumbxcenter);
      copy(scene[get(i)].thumby, thumbpadding);

      addlayer(get(category_thumb_text_name));
      copy(layer[get(category_thumb_text_name)].url, plugin_url.TEXT_SWF);
      set(layer[get(category_thumb_text_name)].keep, true);
      set(layer[get(category_thumb_text_name)].align, bottom);
      set(layer[get(category_thumb_text_name)].width,80);
      set(layer[get(category_thumb_text_name)].height,16);
      set(layer[get(category_thumb_text_name)].background,true);
      set(layer[get(category_thumb_text_name)].backgroundcolor,0x000000);
      set(layer[get(category_thumb_text_name)].backgroundalpha,0.5);
      set(layer[get(category_thumb_text_name)].wordwrap,false);
      set(layer[get(category_thumb_text_name)].css,color:#ffffff; font-family:STXihei; text-align:center; font-size:12px;);
      set(layer[get(category_thumb_text_name)].parent, get(category_thumb_name));
      set(layer[get(category_thumb_text_name)].html, get(config.thumbs.category[get(i)].title));

      inc(thumb_cnt);

      );


      copy(layer[category_thumbs_scrollarea].width, thumbwidth);
      add(layer[category_thumbs_scrollarea].width, thumbpadding);
      mul(layer[category_thumbs_scrollarea].width, thumb_cnt);
      add(layer[category_thumbs_scrollarea].width, thumb_cnt);

  );
    </action>



    <action name="setupAutoTourUI">

    if(layer[autoTourBtnContainer] !== null ,
      set(autoTourBtnName,'autoTourBtn');

      set(layer[autoTourBtnContainer].title,get(config.autoTours.tour.title));
      set(layer[autoTourBtnContainer].align,centerbottom);
      set(layer[autoTourBtnContainer].width,131);
      set(layer[autoTourBtnContainer].height,41);
      set(layer[autoTourBtnContainer].x,0);
      if(device.desktop,
        set(layer[autoTourBtnContainer].y,10);
        ,
        set(layer[autoTourBtnContainer].y,90);
      );
      set(layer[autoTourBtnContainer].onhover,showtext(get(title),tooltipTextStyle));


      set(layer[autoTourPauseBtnContainer].align,bottom);
      set(layer[autoTourPauseBtnContainer].x,-40);
      set(layer[autoTourPauseBtnContainer].y,20);
      set(layer[autoTourPauseBtnContainer].width,70);
      set(layer[autoTourPauseBtnContainer].height,41);

      set(layer[autoTourResumeBtnContainer].align,bottom);
      set(layer[autoTourResumeBtnContainer].x,-40);
      set(layer[autoTourResumeBtnContainer].y,20);
      set(layer[autoTourResumeBtnContainer].width,70);
      set(layer[autoTourResumeBtnContainer].height,41);

      set(layer[autoTourStopBtnContainer].align,bottom);
      set(layer[autoTourStopBtnContainer].x,40);
      set(layer[autoTourStopBtnContainer].y,20);
      set(layer[autoTourStopBtnContainer].width,70);
      set(layer[autoTourStopBtnContainer].height,41);


      addlayer(get(autoTourBtnName));
      set(layer[get(autoTourBtnName)].align,center);
      set(layer[get(autoTourBtnName)].parent,autoTourBtnContainer);
      set(layer[get(autoTourBtnName)].y,0);
      set(layer[get(autoTourBtnName)].scale,0.5);
      set(layer[get(autoTourBtnName)].keep,true);
      set(layer[get(autoTourBtnName)].x,0);
      set(layer[get(autoTourBtnName)].crop,595|235|290|90);
      layer[get(autoTourBtnName)].loadstyle(skin_style);

      addlayer(autoTourPauseBtn);
      set(layer[autoTourPauseBtn].crop,600|420|140|82);
      layer[autoTourPauseBtn].loadstyle(skin_style);
      set(layer[autoTourPauseBtn].align,bottomcenter);
      set(layer[autoTourPauseBtn].scale,0.5);
      set(layer[autoTourPauseBtn].x,0);
      set(layer[autoTourPauseBtn].y,0);
      set(layer[autoTourPauseBtn].parent,autoTourPauseBtnContainer);
      set(layer[autoTourPauseBtn].keep,true);


      addlayer(autoTourResumeBtn);
      set(layer[autoTourResumeBtn].crop,750|325|140|85);
      layer[autoTourResumeBtn].loadstyle(skin_style);
      set(layer[autoTourResumeBtn].align,bottomcenter);
      set(layer[autoTourResumeBtn].scale,0.5);
      set(layer[autoTourResumeBtn].x,0);
      set(layer[autoTourResumeBtn].y,0);
      set(layer[autoTourResumeBtn].keep,true);
      set(layer[autoTourResumeBtn].parent,autoTourResumeBtnContainer);



      addlayer(autoTourStopBtn);
      set(layer[autoTourStopBtn].crop,600|325|140|85);
      layer[autoTourStopBtn].loadstyle(skin_style);
      set(layer[autoTourStopBtn].align,bottomcenter);
      set(layer[autoTourStopBtn].scale,0.5);
      set(layer[autoTourStopBtn].x,0);
      set(layer[autoTourStopBtn].y,0);
      set(layer[autoTourStopBtn].parent,autoTourStopBtnContainer);
      set(layer[autoTourStopBtn].keep,true);

    );



    </action>
    <action name="setup_music">

  if((config.panos.pano[get(scene_name)].sound.url !== null AND config.panos.pano[get(scene_name)].sound.url != "") OR (config.panos.pano[get(scene_name)].voice.url !== null AND config.panos.pano[get(scene_name)].voice.url != ""),

    if(music_inited === null,
      addplugin(soundinterface);
      if(device.html5 == true ,
        copy(plugin[soundinterface].url,plugin_url.SOUND_JS);
        ,
        copy(plugin[soundinterface].url,plugin_url.SOUND_SWF);
      );
      set(plugin[soundinterface].preload,false);
      set(plugin[soundinterface].onloaded,
        set(music_inited, true);
        setup_music();
      );
      ,
        setup_sound();
        setup_voice();
        setup_layout();
    );
    ,
    set(layer[sound_layer].visible,false);
    set(current_sound_url, null);
    set(layer[voice_layer].visible,false);
    set(current_voice_url, null);
  );

    </action>






    <action name="setup_sound">

  if(config.panos.pano[get(scene_name)].sound.url !== null AND config.panos.pano[get(scene_name)].sound.url != "",

    if(sound_inited === null,
      set(layer[sound_layer].scale,0.5);
      set(layer[sound_layer].x,5);
      set(layer[sound_layer].crop,129|659|64|65);
      layer[sound_layer].loadstyle(skin_style);
      set(layer[sound_layer].onclick,
          if(settings.sound_on == true,
              set(crop,129|589|64|65);
              stop_sound();
              ,
              set(crop,129|659|64|65);
              start_sound();
          );
      );
      set(sound_inited,true);
    );

    set(layer[sound_layer].visible,true);
    if(settings.sound_on == true AND settings.sound_playing != true AND config.panos.pano[get(scene_name)].sound.url != current_sound_url,
      play_sound(get(config.panos.pano[get(scene_name)].sound.url));
      if(isAutoTouring,
        pause_sound();
      );
    );
    ,
    set(layer[sound_layer].visible,false);
    set(current_sound_url, null);
  );
    </action>


    <action name="play_sound">
  playsound(get(settings.sound_play_id),%1,0);
  set(current_sound_url,%1);
  set(settings.sound_playing,true);
  set(settings.sound_on,true);
  set(layer[sound_layer].crop,129|659|64|65);
    </action>
    <action name="start_sound">
    if(plugin[soundinterface] !== null,
      if(config.panos.pano[get(scene_name)].sound.url !== current_sound_url,
        play_sound(get(config.panos.pano[get(scene_name)].sound.url));
        ,
        resumesound(get(settings.sound_play_id));
      );
      set(settings.sound_playing,true);
      set(settings.sound_on,true);
      set(layer[sound_layer].crop,129|659|64|65);
    );
    </action>
    <action name="stop_sound">
  if(plugin[soundinterface] !== null,
    pausesound(get(settings.sound_play_id));
    set(settings.sound_playing,false);
    set(settings.sound_on,false);
    set(layer[sound_layer].crop,129|589|64|65);
  );
    </action>
    <action name="pause_sound">
    if(settings.sound_playing == true AND plugin[soundinterface] !== null,
        pausesound(get(settings.sound_play_id));
        set(settings.sound_playing,false);
        set(layer[sound_layer].crop,129|589|64|65);
    );
    </action>
    <action name="resume_sound">
    if(settings.sound_on == true AND settings.sound_playing == false AND plugin[soundinterface] !== null,
      if(config.panos.pano[get(scene_name)].sound.url !== null AND config.panos.pano[get(scene_name)].sound.url != "",
        if(config.panos.pano[get(scene_name)].sound.url !== current_sound_url,
          play_sound(get(config.panos.pano[get(scene_name)].sound.url));
          ,
          resumesound(get(settings.sound_play_id));
        );
        set(layer[sound_layer].crop,129|659|64|65);
      );
      set(settings.sound_playing,true);
    );
    </action>







    <action name="setup_voice">

  if(config.panos.pano[get(scene_name)].voice.url !== null AND config.panos.pano[get(scene_name)].voice.url != "",

    if(voice_inited === null,
      set(layer[voice_layer].scale,0.5);
      set(layer[voice_layer].x,5);
      set(layer[voice_layer].crop,194|659|64|65);
      layer[voice_layer].loadstyle(skin_style);
      set(layer[voice_layer].onclick,
          if(settings.voice_on == true,
              set(crop,194|589|64|65);
              stop_voice();
              ,
              set(crop,194|659|64|65);
              start_voice();
          );
      );
      set(voice_inited,true);
    );

    set(layer[voice_layer].visible,true);
    if(settings.voice_on == true AND settings.voice_playing != true AND config.panos.pano[get(scene_name)].voice.url != current_voice_url,
      play_voice(get(config.panos.pano[get(scene_name)].voice.url));
      if(isAutoTouring,
        pause_voice();
      );
    );
    ,
    set(layer[voice_layer].visible,false);
    set(current_voice_url, null);
  );
    </action>


    <action name="play_voice">
  playsound(get(settings.voice_play_id),%1,1,pause_voice(););
  set(current_voice_url,%1);
  set(settings.voice_playing,true);
  set(settings.voice_on,true);
  set(layer[voice_layer].crop,194|659|64|65);
    </action>
    <action name="start_voice">
    if(plugin[soundinterface] !== null,
      if(config.panos.pano[get(scene_name)].voice.url !== current_voice_url,
        play_voice(get(config.panos.pano[get(scene_name)].voice.url));
        ,
        resumesound(get(settings.voice_play_id));
      );
      set(settings.voice_playing,true);
      set(settings.voice_on,true);
      set(layer[voice_layer].crop,194|659|64|65);
    );
    </action>
    <action name="stop_voice">
  if(plugin[soundinterface] !== null,
    pausesound(get(settings.voice_play_id));
    set(settings.voice_playing,false);
    set(settings.voice_on,false);
    set(layer[voice_layer].crop,194|589|64|65);
  );
    </action>
    <action name="pause_voice">
    if(settings.voice_playing == true AND plugin[soundinterface] !== null,
        pausesound(get(settings.voice_play_id));
        set(settings.voice_playing,false);
        set(layer[voice_layer].crop,194|589|64|65);
    );
    </action>
    <action name="resume_voice">
    if(settings.voice_on == true AND settings.voice_playing == false AND plugin[soundinterface] !== null,
      if(config.panos.pano[get(scene_name)].voice.url !== null AND config.panos.pano[get(scene_name)].voice.url != "",
        if(config.panos.pano[get(scene_name)].voice.url !== current_voice_url,
          play_voice(get(config.panos.pano[get(scene_name)].voice.url));
          ,
          resumesound(get(settings.voice_play_id));
        );
        set(layer[voice_layer].crop,194|659|64|65);
      );
      set(settings.voice_playing,true);
    );
    </action>


    <action name="setup_radar">

    if(config.panos.pano[get(scene_name)].radar.enabled == 1 OR config.panos.pano[get(scene_name)].radar.enable == 1,

      set(layer[radar_layer].type,container);
      set(layer[radar_layer].align,topright);
      set(layer[radar_layer].width,200);
      set(layer[radar_layer].height,200);
      if(device.html5 ,
        add(layer[radar_layer].width,4);
        add(layer[radar_layer].height,4);
      );
      set(layer[radar_layer].x,-313);
      set(layer[radar_layer].y,10);
      set(layer[radar_layer].bgalpha,0);
      set(layer[radar_layer].zorder,5);
      set(destpos1,-313);
      set(destpos2,-100);

      addlayer(radarBtn);
      set(layer[radarBtn].parent,feature_container);
      set(layer[radarBtn].align,centerright);
      set(layer[radarBtn].scale,0.5);
      set(layer[radarBtn].x,0);
      set(layer[radarBtn].y,0);
      set(layer[radarBtn].crop,0|240|108|192);
      layer[radarBtn].loadstyle(skin_style);
      set(layer[radarBtn].title,  '沙盘开关');
      set(layer[radarBtn].onhover,showtext(get(title),tooltipTextStyle));
      set(layer[radarBtn].onclick,
        toggleRadar();
      );


      addlayer(mapImage);
      set(layer[mapImage].parent,radar_layer);
      set(layer[mapImage].align,center);
      set(layer[mapImage].x,0);
      set(layer[mapImage].y,0);
      set(map_url,get(config.panos.pano[get(scene_name)].radar.map_url));
      txtadd(map_url,'?imageMogr2/thumbnail/480x');
      set(layer[mapImage].url,get(map_url));
      set(layer[mapImage].zorder,9);
      set(layer[mapImage].handcursor,false);
      set(layer[mapImage].onloaded,set(radarImageWidth,get(width));set(radarImageHeight,get(height));set(layer[mapImage].width,200);set(layer[mapImage].height,200););

      addlayer(mapImageLoading);
      set(layer[mapImageLoading].parent,radar_layer);
      set(layer[mapImageLoading].align,center);
      set(layer[mapImageLoading].x,0);
      set(layer[mapImageLoading].y,0);
      set(layer[mapImageLoading].zorder,7);
      set(layer[mapImageLoading].handcursor,false);

      addlayer(radarMask);
      set(layer[radarMask].parent,mapImage);
      set(layer[radarMask].type,container);
      set(layer[radarMask].align,lefttop);
      set(layer[radarMask].width,100%);
      set(layer[radarMask].height,100%);
      set(layer[radarMask].maskchildren,true);



      addlayer(mapZoomBtn);
      set(layer[mapZoomBtn].parent,radar_layer);
      set(layer[mapZoomBtn].align,bottomcenter);
      set(layer[mapZoomBtn].width,120);
      set(layer[mapZoomBtn].height,50);
      set(layer[mapZoomBtn].scale,0.75);
      set(layer[mapZoomBtn].x,0);
      set(layer[mapZoomBtn].y,-35);
      copy(layer[mapZoomBtn].url,settings.map_zoom_image);
      set(layer[mapZoomBtn].zorder,10);
      set(layer[mapZoomBtn].handcursor,true);
      set(layer[mapZoomBtn].onclick,zoomRadar(););

      txtadd(radarActiveSpotName,'radarActiveSpot');
      txtadd(radarSpotTitle,'',get(config.panos.pano[get(scene_name)].info.title));
      addlayer(get(radarActiveSpotName));
      set(layer[get(radarActiveSpotName)].parent,radarMask);
      set(layer[get(radarActiveSpotName)].crop,80|432|49|49);
      layer[get(radarActiveSpotName)].loadstyle(skin_style);
      set(layer[get(radarActiveSpotName)].align,lefttop);
      set(layer[get(radarActiveSpotName)].edge,center);
      set(layer[get(radarActiveSpotName)].visible,false);

      if(config.panos.pano[get(scene_name)].radar.heading_offset !== null,
        set(layer[get(radarActiveSpotName)].visible,true);
        if(config.panos.pano[get(scene_name)].radar.scale === null,
            set(layer[get(radarActiveSpotName)].scale,0.5);
            ,
            set(layer[get(radarActiveSpotName)].scale,get(config.panos.pano[get(scene_name)].radar.scale));
          );
        set(radarx,get(config.panos.pano[get(scene_name)].radar.x));
        set(radary,get(config.panos.pano[get(scene_name)].radar.y));
        div(radarx,2.4);
        set(layer[get(radarActiveSpotName)].x,get(radarx));
        div(radary,2.4);
        set(layer[get(radarActiveSpotName)].y,get(radary));
        set(layer[get(radarActiveSpotName)].zorder,10);
        set(layer[get(radarActiveSpotName)].linkedSceneTitle,get(config.panos.pano[get(scene_name)].info.title));
        set(layer[get(radarActiveSpotName)].onhover,showtext(get(linkedSceneTitle),tooltipTextStyle););

      );

      addlayer(radarImageClose);
      copy(layer[radarImageClose].url,settings.close_image);
      set(layer[radarImageClose].align,topright);
      set(layer[radarImageClose].x,0);
      set(layer[radarImageClose].y,0); if(config.panos.pano[get(scene_name)].inner=="1" AND device.mobile==true,
        set(layer[radarImageClose].y,61);
      );
      set(layer[radarImageClose].visible,false);
      set(layer[radarImageClose].scale,0.5);
      set(layer[radarImageClose].autowidth,true);
      set(layer[radarImageClose].autoheight,true);
      set(layer[radarImageClose].background,false);
      set(layer[radarImageClose].zorder,101);
      set(layer[radarImageClose].border,false);
      set(layer[radarImageClose].onclick,toggleRadar();set(layer[radarImageClose].visible,false););
      set(layer[radarImageClose].parent,layer[radar_layer]);

      if(config.panos.pano[get(scene_name)].radar.heading_offset !== null,
        addlayer(radar);
        set(layer[radar].parent,radarMask);
        if(device.flash,
          set(layer[radar].url,get(plugin_url.RADAR_SWF));
          ,
          set(layer[radar].url,get(plugin_url.RADAR_JS));
        );
        set(layer[radar].align,lefttop);
        set(layer[radar].edge,center);
        set(layer[radar].scale,0.5);
        set(layer[radar].zorder,9);
        set(layer[radar].fillcolor,0xFFFFFF);
        set(layer[radar].fillalpha,0.4);
        set(layer[radar].linecolor,0xFF0000);
        set(layer[radar].linewidth,1.0);
        set(layer[radar].linealpha,0.5);
        set(layer[radar].headingoffset,get(config.panos.pano[get(scene_name)].radar.heading_offset));
        set(layer[radar].x,get(layer[get(radarActiveSpotName)].x));
        set(layer[radar].y,get(layer[get(radarActiveSpotName)].y));
      );


      for(set(i,0),i LT config.panos.pano[get(scene_name)].radar.radarspot.count,inc(i),

        txtadd(radarSpotName,'radarSpot',get(i));
        txtadd(radarSpotTitle,'',get(config.panos.pano[get(scene_name)].info.title));
        addlayer(get(radarSpotName));
        set(layer[get(radarSpotName)].parent,radarMask);
        set(layer[get(radarSpotName)].crop,0|430|80|80);
        layer[get(radarSpotName)].loadstyle(skin_style);
        set(layer[get(radarSpotName)].align,lefttop);
        set(layer[get(radarSpotName)].edge,center);
        if(config.panos.pano[get(scene_name)].radar.scale === null,
          set(layer[get(radarSpotName)].scale,0.35);
          ,
          set(layer[get(radarSpotName)].scale,get(config.panos.pano[get(scene_name)].radar.scale));
        );
        set(radarx,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].x));
        set(radary,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].y));
        div(radarx,2.4);
        set(layer[get(radarSpotName)].x,get(radarx));
        div(radary,2.4);
        set(layer[get(radarSpotName)].y,get(radary));
        set(layer[get(radarSpotName)].zorder,2);
        set(layer[get(radarSpotName)].linkedScene,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].linkedscene));
        set(layer[get(radarSpotName)].linkedSceneTitle,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].title));
        set(layer[get(radarSpotName)].onhover,showtext(get(linkedSceneTitle),tooltipTextStyle););
        set(layer[get(radarSpotName)].onclick,
        load_pano_by_id(get(linkedscene),get(loadscenekeepview));
        );
      );


      set(radarOldStatus,true);
    ); if(config.panos.pano[get(scene_name)].radar.opened=="1" AND RadarShow === null,
      set(RadarShow,false);
      toggleRadar();
      , if(RadarShow==true AND vrmode!=true,
        set(RadarShow,false);
        toggleRadar();
        ,
        set(layer[radarBtn].crop,108|240|108|192);
      );
    );


    </action>
    <action name="zoomRadar">

      set(layer[radar_layer].bgalpha,0.5);

      set(layer[radarImageClose].visible,true);

      set(radarOldPosX,get(layer[radar_layer].x));
      set(radarOldPosY,get(layer[radar_layer].y));

      set(layer[radar_layer].height,100%);
      set(layer[radar_layer].width,100%);
      set(layer[radar_layer].x,0);
      set(layer[radar_layer].y,0);


      set(radarImageScale,get(radarImageWidth));
      div(radarImageScale,get(radarImageHeight));
      set(radarStageScale,get(stagewidth));
      mul(radarStageScale,0.8);
      div(radarStageScale,get(stageheight));
      div(radarImageScale,0.8);

      if(radarImageWidth LT stagewidth AND radarImageHeight LT stageheight,
        set(layer[mapImage].width,get(radarImageWidth));
        set(layer[mapImage].height,get(radarImageHeight));
        ,
        if(radarImageScale GT radarStageScale,
          set(layer[mapImage].width,get(stagewidth));
          mul(layer[mapImage].width,0.8);
          set(layer[mapImage].height,get(radarImageHeight));
          mul(layer[mapImage].height,get(layer[mapImage].width));
          div(layer[mapImage].height,get(radarImageWidth));
          ,
          set(layer[mapImage].height,get(stageheight));
          mul(layer[mapImage].height,0.8);
          set(layer[mapImage].width,get(radarImageWidth));
          mul(layer[mapImage].width,get(layer[mapImage].height));
          div(layer[mapImage].width,get(radarImageHeight));
        );
      );



      set(layer[get(radarActiveSpotName)].x,get(config.panos.pano[get(scene_name)].radar.x));
      mul(layer[get(radarActiveSpotName)].x,get(layer[mapImage].width));
      div(layer[get(radarActiveSpotName)].x,480);

      set(layer[get(radarActiveSpotName)].y,get(config.panos.pano[get(scene_name)].radar.y));
      mul(layer[get(radarActiveSpotName)].y,get(layer[mapImage].height));
      div(layer[get(radarActiveSpotName)].y,480);

      set(layer[radar].x,get(layer[get(radarActiveSpotName)].x));
      set(layer[radar].y,get(layer[get(radarActiveSpotName)].y));

      for(set(i,0),i LT config.panos.pano[get(scene_name)].radar.radarspot.count,inc(i),
        txtadd(radarSpotName,'radarSpot',get(i));
        txtadd(radarSpotTitle,'',get(config.panos.pano[get(scene_name)].info.title));

        set(layer[get(radarSpotName)].x,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].x));
        mul(layer[get(radarSpotName)].x,get(layer[mapImage].width));
        div(layer[get(radarSpotName)].x,480);

        set(layer[get(radarSpotName)].y,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].y));
        mul(layer[get(radarSpotName)].y,get(layer[mapImage].width));
        div(layer[get(radarSpotName)].y,480);

      );

      pause_autoplay();
      hide_ui(1);
    </action>
    <action name="toggleRadar">
    set(layer[radar_layer].bgalpha,0);
    set(layer[radarImageClose].visible,false);


    if(layer[radar_layer].height == 100%,
      set(layer[radar_layer].width,200);
      set(layer[radar_layer].height,200);
      set(layer[mapImage].width,200);
      set(layer[mapImage].height,200);
      set(layer[radar_layer].x,get(radarOldPosX));
      set(layer[radar_layer].y,get(radarOldPosY));


      set(radarx,get(config.panos.pano[get(scene_name)].radar.x));
      set(radary,get(config.panos.pano[get(scene_name)].radar.y));
      div(radarx,2.4);
      set(layer[get(radarActiveSpotName)].x,get(radarx));
      div(radary,2.4);
      set(layer[get(radarActiveSpotName)].y,get(radary));

      set(layer[radar].x,get(layer[get(radarActiveSpotName)].x));
      set(layer[radar].y,get(layer[get(radarActiveSpotName)].y));

      for(set(i,0),i LT config.panos.pano[get(scene_name)].radar.radarspot.count,inc(i),
        txtadd(radarSpotName,'radarSpot',get(i));
        txtadd(radarSpotTitle,'',get(config.panos.pano[get(scene_name)].info.title));
        set(radarx,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].x));
        set(radary,get(config.panos.pano[get(scene_name)].radar.radarspot[get(i)].y));
        div(radarx,2.4);
        set(layer[get(radarSpotName)].x,get(radarx));
        div(radary,2.4);
        set(layer[get(radarSpotName)].y,get(radary));
      );


      ,
      if(RadarShow == true,
         if(device.mobile,
          set(destpos1, -313);
          ,
          set(destpos1, -313);
        );
        set(layer[radarBtn].crop,108|240|108|192);
        set(RadarShow,false);
        ,
        if(device.mobile,
          set(destpos1, 70);
          ,
          set(destpos1, 50);
        );
        set(layer[radarBtn].crop,0|240|108|192);
        set(RadarShow,true);
      );

      tween(layer[radar_layer].x,get(destpos1));

    );


    resume_autoplay();
    show_ui();

    </action>


    <action name="setup_autotour">

     if(config.autoTours.tour.point.count GT 0 ,
      set(autoTourPointIndex,0);
      set(layer[autotour_container].visible,true);

      addlayer(autoTourBtnContainer);
      set(layer[autoTourBtnContainer].parent, 'autotour_container');
      set(layer[autoTourBtnContainer].keep,true);
      set(layer[autoTourBtnContainer].type,container);
      set(layer[autoTourBtnContainer].children,false);
      set(layer[autoTourBtnContainer].handcursor,true);
      set(layer[autoTourBtnContainer].bgcapture,true);
      set(layer[autoTourBtnContainer].bgcolor,0);
      set(layer[autoTourBtnContainer].bgalpha,0);
      set(layer[autoTourBtnContainer].onclick,
        autoTourStart();
      );


      addlayer(autoTourPauseBtnContainer);
      set(layer[autoTourPauseBtnContainer].keep,true);
      set(layer[autoTourPauseBtnContainer].autoalpha,true);
      set(layer[autoTourPauseBtnContainer].type,container);
      set(layer[autoTourPauseBtnContainer].children,false);
      set(layer[autoTourPauseBtnContainer].handcursor,true);
      set(layer[autoTourPauseBtnContainer].bgcapture,true);
      set(layer[autoTourPauseBtnContainer].bgcolor,0);
      set(layer[autoTourPauseBtnContainer].bgalpha,0);
      set(layer[autoTourPauseBtnContainer].alpha,0);
      set(layer[autoTourPauseBtnContainer].onclick,
        autoTourPause();
      );
      set(layer[autoTourPauseBtnContainer].align,bottom);
      set(layer[autoTourPauseBtnContainer].x,-40);
      set(layer[autoTourPauseBtnContainer].y,20);
      set(layer[autoTourPauseBtnContainer].width,70);
      set(layer[autoTourPauseBtnContainer].height,41);

      addlayer(autoTourResumeBtnContainer);
      set(layer[autoTourResumeBtnContainer].keep,true);
      set(layer[autoTourResumeBtnContainer].autoalpha,true);
      set(layer[autoTourResumeBtnContainer].type,container);
      set(layer[autoTourResumeBtnContainer].children,false);
      set(layer[autoTourResumeBtnContainer].handcursor,true);
      set(layer[autoTourResumeBtnContainer].bgcapture,true);
      set(layer[autoTourResumeBtnContainer].bgcolor,0);
      set(layer[autoTourResumeBtnContainer].bgalpha,0);
      set(layer[autoTourResumeBtnContainer].alpha,0);
      set(layer[autoTourResumeBtnContainer].onclick,
        autoTourResume();
      );
      set(layer[autoTourResumeBtnContainer].align,bottom);
      set(layer[autoTourResumeBtnContainer].x,-40);
      set(layer[autoTourResumeBtnContainer].y,20);
      set(layer[autoTourResumeBtnContainer].width,70);
      set(layer[autoTourResumeBtnContainer].height,41);

      addlayer(autoTourStopBtnContainer);
      set(layer[autoTourStopBtnContainer].keep,true);
      set(layer[autoTourStopBtnContainer].autoalpha,true);
      set(layer[autoTourStopBtnContainer].type,container);
      set(layer[autoTourStopBtnContainer].children,false);
      set(layer[autoTourStopBtnContainer].handcursor,true);
      set(layer[autoTourStopBtnContainer].bgcapture,true);
      set(layer[autoTourStopBtnContainer].bgcolor,0);
      set(layer[autoTourStopBtnContainer].bgalpha,0);
      set(layer[autoTourStopBtnContainer].alpha,0);
      set(layer[autoTourStopBtnContainer].onclick,
        autoTourEnd();
      );
      set(layer[autoTourStopBtnContainer].align,bottom);
      set(layer[autoTourStopBtnContainer].x,40);
      set(layer[autoTourStopBtnContainer].y,20);
      set(layer[autoTourStopBtnContainer].width,70);
      set(layer[autoTourStopBtnContainer].height,41);

      if(plugin[soundinterface] !== null,
        set(layer[autoTourBtnContainer].visible,true);
        ,
        set(layer[autoTourBtnContainer].visible,false);
        addplugin(soundinterface);
        if(device.html5 == true ,
          copy(plugin[soundinterface].url,plugin_url.SOUND_JS);
          ,
          copy(plugin[soundinterface].url,plugin_url.SOUND_SWF);
        );
        set(plugin[soundinterface].preload,false);
        set(plugin[soundinterface].onloaded,
          set(layer[autoTourBtnContainer].visible,true);
        );
      );


      setupAutoTourUI();

      ,

      set(layer[autotour_container].visible, false);

    );

    </action>

    <action name="autoTourStart">
    set(isAutoTourPause,false);
    set(isAutoTouring,true);

    tween(layer[autoTourResumeBtnContainer].alpha,0.0,0.1,default,set(ayer[autoTourResumeBtnContainer].enable.false););

    set(autorotateEnabledForAutoTour,get(autorotate.enabled));
    set(usercontrolEnabledForAutoTour,get(control.usercontrol));



    if(config.autoTours.tour.startImage !== null AND config.autoTours.tour.startImage != "" ,
      addlayer(autoTourStartAlert);
      copy(autoTour_startImage,config.autoTours.tour.startImage);
      txtadd(autoTour_startImage,'?imageView2/0/w/2000/h/2000');
      set(layer[autoTourStartAlert].url,get(autoTour_startImage));
      set(layer[autoTourStartAlert].align,center);
      set(layer[autoTourStartAlert].scale,0.5);
      set(layer[autoTourStartAlert].background,false);
      set(layer[autoTourStartAlert].autoalpha,true);
      set(layer[autoTourStartAlert].enable,false);
      set(layer[autoTourStartAlert].y,0);
      set(layer[autoTourStartAlert].keep,true);

      set(layer[autoTourStartAlert].alpha,0.0);
      tween(layer[autoTourStartAlert].alpha,1.0,0.5);

      delayedcall(3,tween(layer[autoTourStartAlert].alpha,0.0,0.5););
      set(hasAutoTourStartAlert,true);
      ,
      set(hasAutoTourStartAlert,false);
    );


    pause_autoplay();
    set(control.usercontrol,off);
    pause_voice();
                           

    hide_ui();


    if(pano_id == config.autoTours.tour.point[get(autoTourPointIndex)].targetPano ,
      set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startath));
      set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startatv));
      set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].startfov));
      if(hasAutoTourStartAlert ==true ,
        delayedcall(4,autoTourPlay(););
        ,
        delayedcall(1,autoTourPlay(););
      );
      ,
      stoptween(view.hlookat,view.vlookat,view.fov);
      load_pano_by_id(get(config.autoTours.tour.point[get(autoTourPointIndex)].targetPano),1);
      set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startath));
      set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startatv));
      set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].startfov));

    );

    </action>
    <action name="autoTourResume">
    set(isAutoTourPause,false);
    dec(autoTourPointIndex);

    set(control.usercontrol,all);

    tween(layer[autoTourResumeBtnContainer].alpha,0.0,0.2,default,set(ayer[autoTourResumeBtnContainer].enable.false););
    set(layer[autoTourPauseBtnContainer].enable,false);
    tween(layer[autoTourPauseBtnContainer].alpha,1.0,0.2,default,set(ayer[autoTourPauseBtnContainer].enable.true););

    if(pano_id == config.autoTours.tour.point[get(autoTourPointIndex)].targetPano ,
      set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startath));
      set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startatv));
      set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].startfov));
      delayedcall(1,autoTourPlay(););
      ,
      stoptween(view.hlookat,view.vlookat,view.fov);
      load_pano_by_id(get(config.autoTours.tour.point[get(autoTourPointIndex)].targetPano),1);
      set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startath));
      set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].startatv));
      set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].startfov));

    );

    </action>
    <action name="autoTourPlay">

    set(layer[autoTourPauseBtnContainer].enable,false);
    tween(layer[autoTourPauseBtnContainer].alpha,1.0,0.2,default,set(ayer[autoTourPauseBtnContainer].enable.true););
    set(layer[autoTourStopBtnContainer].enable,false);
    tween(layer[autoTourStopBtnContainer].alpha,1.0,0.2,default,set(ayer[autoTourStopBtnContainer].enable.true););

    stopsound(get(autoTourSoundName));


    txtadd(autoTourSoundName,get(autoTourPointIndex));

    set(tempAutoTourIndex,get(config.autoTours.tour.point.count));
    dec(tempAutoTourIndex);
    if(autoTourPointIndex == tempAutoTourIndex,
      autoTourEnd();
      ,
      if(config.autoTours.tour.point[get(autoTourPointIndex)].playMode == 3,
        copy(tempAutoTourPointIndex,autoTourPointIndex);
        inc(tempAutoTourPointIndex);
        stoptween(view.hlookat,view.vlookat,view.fov);
        load_pano_by_id(get(config.autoTours.tour.point[get(tempAutoTourPointIndex)].targetPano),1);
        set(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].endath));
        set(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].endatv));
        set(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].endfov));
        inc(autoTourPointIndex);
        ,

        tween(view.hlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].endath),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime));

        tween(view.vlookat,get(config.autoTours.tour.point[get(autoTourPointIndex)].endatv),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime));
        if(config.autoTours.tour.point[get(autoTourPointIndex)].music !== null AND config.autoTours.tour.point[get(autoTourPointIndex)].music != '', if(config.autoTours.tour.point[get(autoTourPointIndex)].playMode==0,
            playsound(get(autoTourSoundName),get(config.autoTours.tour.point[get(autoTourPointIndex)].music),1,autoTourPlay(););
            tween(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].endfov),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime));
            ,
            playsound(get(autoTourSoundName),get(config.autoTours.tour.point[get(autoTourPointIndex)].music),1);
            tween(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].endfov),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime),null,autoTourPlay(););
          );
          ,
          stopsound(get(autoTourSoundName));
          set(sound[get(autoTourSoundName)].oncomplete,null);
          playsound(get(autoTourSoundName),get(config.autoTours.tour.point[get(autoTourPointIndex)].music),1);
          tween(view.fov,get(config.autoTours.tour.point[get(autoTourPointIndex)].endfov),get(config.autoTours.tour.point[get(autoTourPointIndex)].moveTime),null,autoTourPlay(););
        );
        inc(autoTourPointIndex);
      );
    );

    </action>
    <action name="autoTourPause">

    set(isAutoTourPause,true);

    set(layer[autoTourResumeBtnContainer].enable,false);
    tween(layer[autoTourResumeBtnContainer].alpha,1.0,0.2,default,set(ayer[autoTourResumeBtnContainer].enable.true););
    tween(layer[autoTourPauseBtnContainer].alpha,0.0,0.2,default,set(ayer[autoTourPauseBtnContainer].enable.false););


    stopsound(get(autoTourSoundName));
    stoptween(view.hlookat);
    stoptween(view.vlookat);
    stoptween(view.fov);

    set(control.usercontrol,all);

    </action>
    <action name="autoTourEnd">

    set(isAutoTourPause,false);
    set(autoTourPointIndex,0);

    stopsound(get(autoTourSoundName));
    stoptween(view.hlookat);
    stoptween(view.vlookat);
    stoptween(view.fov);


    if(plugin[gyroplugin] !== null,
      set(plugin[gyroplugin].enabled,  get(gyroEnabledForAutoTour));
    );

    set(layer[autoTourPauseBtnContainer].enable,false);
    tween(layer[autoTourPauseBtnContainer].alpha,0.0,0.2);
    set(layer[autoTourResumeBtnContainer].enable,false);
    tween(layer[autoTourResumeBtnContainer].alpha,0.0,0.2);
    set(layer[autoTourStopBtnContainer].enable,false);
    tween(layer[autoTourStopBtnContainer].alpha,0.0,0.2);

    set(isAutoTouring,false);
    if(config.autoTours.tour.stopImage !== null AND config.autoTours.tour.stopImage != "" ,
      addlayer(autoTourEndAlert);
      copy(autoTour_stopImage,config.autoTours.tour.stopImage);
      txtadd(autoTour_stopImage,'?imageView2/0/w/2000/h/2000');
      set(layer[autoTourEndAlert].url,get(autoTours_stopImage));
      set(layer[autoTourEndAlert].align,center);
      set(layer[autoTourEndAlert].scale,0.5);
      set(layer[autoTourEndAlert].background,false);
      set(layer[autoTourEndAlert].autoalpha,true);
      set(layer[autoTourEndAlert].enable,false);
      set(layer[autoTourEndAlert].y,0);
      set(layer[autoTourEndAlert].keep,false);

      set(layer[autoTourEndAlert].alpha,0.0);
      tween(layer[autoTourEndAlert].alpha,1.0,0.5);
      delayedcall(3,tween(layer[autoTourEndAlert].alpha,0.0,0.5););

    );

    set(control.usercontrol,all);
    resume_autoplay();
                            
    resume_voice();

    show_ui();
    </action>



    <action name="showComments">
    for(set(i,0),i LT hotspot.count,inc(i),
      if(hotspot[get(i)].isComment,
        set(hotspot[get(i)].visible,true);
      );
    );

    for(set(i,0),i LT layer.count,inc(i),
      if(layer[get(i)].isComment,
        set(layer[get(i)].visible,true);
      );
    );

    set(commentVisibled,true);

    if(config.feature.enable_comment  == 0,
      set(modify_comment_cmd,get(js_modify_comment));
      txtadd(modify_comment_cmd,"('");
      txtadd(modify_comment_cmd,get(config.info.id));
      txtadd(modify_comment_cmd,"','");
      txtadd(modify_comment_cmd,get(pano_id));
      txtadd(modify_comment_cmd,"')");
      jscall(get(modify_comment_cmd));
      set(config.feature.enable_comment ,1);
      set(config.feature.show_comment,1);
      jscall(get(js_show_comments));
    );


    set(layer[comment_btn].crop,0|734|80|81);

    set(config.feature.show_comment,1);

    </action>
    <action name="hideComments">

    for(set(i,0),i LT hotspot.count,inc(i),
      if(hotspot[get(i)].isComment,
        set(hotspot[get(i)].visible,false);
      );
    );
    for(set(i,0),i LT layer.count,inc(i),
      if(layer[get(i)].isComment,
        set(layer[get(i)].visible,false);
      );
    );

    set(layer[comment_btn].crop,0|814|80|80);

    jscall(get(js_hide_comments));

    set(config.feature.show_comment,0);

    </action>
    <action name="addComment">
                                                     

    set(avatarUrl,%3);
        indexoftxt(avatarDomainIndex,get(avatarUrl),"ssl-avatar");
        if( avatarUrl !== null AND avatarDomainIndex GT -1,

        if(plugin[commentsContainer] === null,

            addplugin(commentsContainer);
            set(plugin[commentsContainer].zorder,50);
          );


          set(newCommentContainer,'new_comment_container');
          txtadd(newCommentContainer,%1);
          addhotspot(get(newCommentContainer));
          set(hotspot[get(newCommentContainer)].isComment,true);
          set(hotspot[get(newCommentContainer)].keep,true);
          set(hotspot[get(newCommentContainer)].ath,%4);
          set(hotspot[get(newCommentContainer)].atv,%5);
          set(hotspot[get(newCommentContainer)].width,32);
          set(hotspot[get(newCommentContainer)].height,48);
          if(device.desktop,
            set(hotspot[get(newCommentContainer)].scale,1);
            ,
            set(hotspot[get(newCommentContainer)].scale,1.5);
          );
          hotspot[get(newCommentContainer)].loadstyle(skin_style);
          set(hotspot[get(newCommentContainer)].crop,542|10|64|96);
          set(hotspot[get(newCommentContainer)].edge,bottom);
          set(hotspot[get(newCommentContainer)].enabled,false);
          set(hotspot[get(newCommentContainer)].zorder,get(hotspot.count));
          set(hotspot[get(newCommentContainer)].handcursor,false);
          set(hotspot[get(newCommentContainer)].visible,get(commentVisibled));
          set(hotspot[get(newCommentContainer)].parent,commentsContainer);


          set(newCommentHeadMask,'new_comment_mask');
          txtadd(newCommentHeadMask,%1);
          addlayer(get(newCommentHeadMask));
          set(layer[get(newCommentHeadMask)].isComment,true);
          set(layer[get(newCommentHeadMask)].type,container);
          if(device.desktop,
            set(layer[get(newCommentHeadMask)].scale,1);
            ,
            set(layer[get(newCommentHeadMask)].scale,1.5);
          );
          set(layer[get(newCommentHeadMask)].keep,true);
          set(layer[get(newCommentHeadMask)].x,1);
          set(layer[get(newCommentHeadMask)].width,30);
          set(layer[get(newCommentHeadMask)].height,30);
          set(layer[get(newCommentHeadMask)].bgcolor,0xffffff);
          set(layer[get(newCommentHeadMask)].bgalpha,1);
          set(layer[get(newCommentHeadMask)].maskchildren,true);
          set(addCommentHotspotName,'hotspot[');
          txtadd(addCommentHotspotName,get(newCommentContainer));
          txtadd(addCommentHotspotName,']');
          set(layer[get(newCommentHeadMask)].parent,get(addCommentHotspotName));
          set(layer[get(newCommentHeadMask)].handcursor,false);
          set(layer[get(newCommentHeadMask)].enabled,false);
          set(layer[get(newCommentHeadMask)].zorder,get(layer.count));
          set(layer[get(newCommentHeadMask)].bgroundedge,5);
          set(layer[get(newCommentHeadMask)].capture,false);


          set(newCommentHead,'new_comment_avatar');
          txtadd(newCommentHead,%1);
          addlayer(get(newCommentHead));
          set(layer[get(newCommentHead)].isComment,true);
          set(layer[get(newCommentHead)].keep,true);
          if(device.desktop,
            set(layer[get(newCommentHead)].scale,1);
            ,
            set(layer[get(newCommentHead)].scale,1.5);
          );
          set(layer[get(newCommentHead)].width,30);
          set(layer[get(newCommentHead)].height,"prop");
          set(newCommentHeadUrl,%3);
          if(newCommentHeadUrl.length GT 0,
            txtadd(newCommentHeadUrl,?imageMogr2/thumbnail/60x60!);
            set(layer[get(newCommentHead)].url,get(newCommentHeadUrl));
          );
          set(addCommentMaskName,'layer[');
          txtadd(addCommentMaskName,get(newCommentHeadMask));
          txtadd(addCommentMaskName,']');
          set(layer[get(newCommentHead)].parent,get(addCommentMaskName));
          set(layer[get(newCommentHead)].handcursor,false);
          set(layer[get(newCommentHead)].enabled,false);
          set(layer[get(newCommentHead)].zorder,get(layer.count));
          set(layer[get(newCommentHead)].capture,false);



          set(newCommentPointTextName,'new_comment_point_text_container');
          txtadd(newCommentPointTextName,%1);
          addhotspot(get(newCommentPointTextName));
          set(hotspot[get(newCommentPointTextName)].keep,true);
          set(hotspot[get(newCommentPointTextName)].isComment,true);
          set(hotspot[get(newCommentPointTextName)].ath,%4);
          set(hotspot[get(newCommentPointTextName)].atv,%5);
          set(hotspot[get(newCommentPointTextName)].visible,get(commentVisibled));
          set(hotspot[get(newCommentPointTextName)].type,container);
          set(hotspot[get(newCommentPointTextName)].url,get(plugin_url.TEXT_SWF));
          set(hotspot[get(newCommentPointTextName)].backgroundcolor,0x000000);
          set(hotspot[get(newCommentPointTextName)].backgroundalpha,0.6);
          if(device.flash,
            set(hotspot[get(newCommentPointTextName)].backgroundalpha,0.0);
          );
          set(hotspot[get(newCommentPointTextName)].enabled,false);
          set(hotspot[get(newCommentPointTextName)].handcursor,false);
          set(hotspot[get(newCommentPointTextName)].edge,topleft);
          set(hotspot[get(newCommentPointTextName)].parent,get(addCommentHotspotName));
          if(device.desktop,
            set(hotspot[get(newCommentPointTextName)].css,font-family:STXihei; font-size:12px; color:#FFFFFF;letter-spacing:1px;);
            set(hotspot[get(newCommentPointTextName)].padding,8);
            set(hotspot[get(newCommentPointTextName)].oy,-48);
            set(hotspot[get(newCommentPointTextName)].ox,18);
            set(hotspot[get(newCommentPointTextName)].roundedge,5);
            set(hotspot[get(newCommentPointTextName)].parent,get(addCommentHotspotName));
          ,
            set(hotspot[get(newCommentPointTextName)].css,font-family:STXihei; font-size:14px; color:#FFFFFF;letter-spacing:1px;);
            set(hotspot[get(newCommentPointTextName)].padding,10);
            set(hotspot[get(newCommentPointTextName)].oy,-74);
            set(hotspot[get(newCommentPointTextName)].ox,26);
            set(hotspot[get(newCommentPointTextName)].roundedge,5);
          );
          set(hotspot[get(newCommentPointTextName)].zorder,get(hotspot.count));

          set(hotspot[get(newCommentPointTextName)].html,%2);
          set(hotspot[get(newCommentPointTextName)].renderer,"css3d");
          set(hotspot[get(newCommentPointTextName)].parent,get(addCommentHotspotName));
        );

    </action>
    <action name="removeComments">

    for(set(i,0),i LT hotspot.count,inc(i),
      if(hotspot[get(i)].isComment,
        removehotspot(get(hotspot[get(i)].name));
        dec(i);
      );
    );

    for(set(i,0),i LT layer.count,inc(i),
      if(layer[get(i)].isComment,
        removelayer(get(layer[get(i)].name));
        dec(i);
      );
    );

    set(config.feature.show_comment,0);
    </action>
    <action name="enterEditComment">

                                        

                                                 
      set(modify_comment_cmd,get(js_modify_comment));
      txtadd(modify_comment_cmd,"('");
      txtadd(modify_comment_cmd,get(config.info.id));
      txtadd(modify_comment_cmd,"','");
      txtadd(modify_comment_cmd,get(pano_id));
      txtadd(modify_comment_cmd,"')");
      set(config.feature.show_comment, 1);
      jscall(get(modify_comment_cmd));
               


    hide_ui();

    copy(commentAddAnimationUrl,settings.comment_add_head_bg_image);


    addhotspot(add_hotspot_comment_bg_container);
    set(hotspot[add_hotspot_comment_bg_container].ath,get(view.hlookat));
    set(hotspot[add_hotspot_comment_bg_container].atv,get(view.vlookat));
    set(hotspot[add_hotspot_comment_bg_container].width,32);
    set(hotspot[add_hotspot_comment_bg_container].height,48);
    if(device.desktop,
      set(hotspot[add_hotspot_comment_bg_container].scale,1.5);
      ,
      set(hotspot[add_hotspot_comment_bg_container].scale,2);
    );
    copy(hotspot[add_hotspot_comment_bg_container].url,settings.comment_edit_line_image);
    set(hotspot[add_hotspot_comment_bg_container].keep,false);
    set(hotspot[add_hotspot_comment_bg_container].edge,bottom);
    set(hotspot[add_hotspot_comment_bg_container].handcursor,true);
    set(hotspot[add_hotspot_comment_bg_container].enabled,true);
    set(hotspot[add_hotspot_comment_bg_container].zorder,2600);
    set(hotspot[add_hotspot_comment_bg_container].ondown,dragAddHotspot());


    addlayer(add_hotspot_comment_mask);
    set(layer[add_hotspot_comment_mask].type,"container");
    if(device.desktop,
      set(layer[add_hotspot_comment_mask].scale,1.5);
      ,
      set(layer[add_hotspot_comment_mask].scale,2.0);
    );
    set(layer[add_hotspot_comment_mask].keep,false);
    set(layer[add_hotspot_comment_mask].x,1);
    set(layer[add_hotspot_comment_mask].width,30);
    set(layer[add_hotspot_comment_mask].height,30);
    set(layer[add_hotspot_comment_mask].bgcolor,0xffffff);
    set(layer[add_hotspot_comment_mask].bgalpha,1);
    set(layer[add_hotspot_comment_mask].maskchildren,true);
    set(addCommentHotspotName,'hotspot[');
    txtadd(addCommentHotspotName,add_hotspot_comment_bg_container);
    txtadd(addCommentHotspotName,']');
    set(layer[add_hotspot_comment_mask].parent,get(addCommentHotspotName));
    set(layer[add_hotspot_comment_mask].handcursor,false);
    set(layer[add_hotspot_comment_mask].enabled,false);
    set(layer[add_hotspot_comment_mask].zorder,2601);
    set(layer[add_hotspot_comment_mask].bgroundedge,6);
    set(layer[add_hotspot_comment_mask].capture,false);


    addlayer(add_hotspot_comment_avatar);
    if(device.desktop,
      set(layer[add_hotspot_comment_avatar].scale,1.5);
      ,
      set(layer[add_hotspot_comment_avatar].scale,2);
    );
    set(layer[add_hotspot_comment_avatar].width,30);
    set(layer[add_hotspot_comment_avatar].height,"prop");
    set(newEditCommentHeadUrl,%1);
    if(newEditCommentHeadUrl.length GT 0,
      txtadd(newEditCommentHeadUrl,?imageMogr2/thumbnail/60x60!);
      set(layer[add_hotspot_comment_avatar].url,get(newEditCommentHeadUrl));
    );
    set(addCommentMaskName,'layer[');
    txtadd(addCommentMaskName,add_hotspot_comment_mask);
    txtadd(addCommentMaskName,']');
    set(layer[add_hotspot_comment_avatar].parent,get(addCommentMaskName));
    set(layer[add_hotspot_comment_avatar].handcursor,false);
    set(layer[add_hotspot_comment_avatar].enabled,false);
    set(layer[add_hotspot_comment_avatar].zorder,2602);
    set(layer[add_hotspot_comment_avatar].capture,false);


                         
    addhotspot(add_comment_point_text_container);
    set(hotspot[add_comment_point_text_container].ath,get(view.hlookat));
    set(hotspot[add_comment_point_text_container].atv,get(view.vlookat));
    set(hotspot[add_comment_point_text_container].visible,true);
    set(hotspot[add_comment_point_text_container].scale,1);
    copy(hotspot[add_comment_point_text_container].url,settings.comment_edit_bg_image);
    set(hotspot[add_comment_point_text_container].css,font-family:STXihei; font-size:14px; color:#FFFFFF;letter-spacing:1px;);
    set(hotspot[add_comment_point_text_container].backgroundcolor,0xFF7F00);
    set(hotspot[add_comment_point_text_container].backgroundalpha,1);
    set(hotspot[add_comment_point_text_container].padding,10);
    set(hotspot[add_comment_point_text_container].keep,false);
    set(hotspot[add_comment_point_text_container].edge,topleft);
    set(hotspot[add_comment_point_text_container].handcursor,true);
    set(hotspot[add_comment_point_text_container].enabled,true);
    set(hotspot[add_comment_point_text_container].ondown,dragAddHotspot());
    if(device.desktop,
      set(hotspot[add_comment_point_text_container].width,178);
      set(hotspot[add_comment_point_text_container].height,52);
      set(hotspot[add_comment_point_text_container].oy,-75);
      set(hotspot[add_comment_point_text_container].ox,-26);
      set(hotspot[add_comment_point_text_container].roundedge,10);
    ,
      set(hotspot[add_comment_point_text_container].width,232);
      set(hotspot[add_comment_point_text_container].height,68);
      set(hotspot[add_comment_point_text_container].oy,-85);
      set(hotspot[add_comment_point_text_container].ox,-54);
      set(hotspot[add_comment_point_text_container].roundedge,18);
      set(hotspot[add_comment_point_text_container].enable,true);
    );
    set(hotspot[add_comment_point_text_container].zorder,2499);




    addlayer(add_comment_text);
    if(device.desktop,
      set(layer[add_comment_text].x,45);
      ,
      set(layer[add_comment_text].x,65);
    );
    set(layer[add_comment_text].y,-15);
    set(layer[add_comment_text].visible,true);
    set(layer[add_comment_text].scale,1);
    set(layer[add_comment_text].align,left);
    set(layer[add_comment_text].url,get(plugin_url.TEXT_SWF));
    set(layer[add_comment_text].css,font-family:STXihei; font-size:12px; color:#ffffff;letter-spacing:1px;);
    set(layer[add_comment_text].backgroundcolor,#000000);
    set(layer[add_comment_text].backgroundalpha,0);
    set(layer[add_comment_text].padding,8);
    set(layer[add_comment_text].keep,false);
    set(layer[add_comment_text].enabled,false);
    set(layer[add_comment_text].handcursor,false);
    set(layer[add_comment_text].alpha,0);
    set(layer[add_comment_text].zorder,2604);
    set(layer[add_comment_text].ondown,dragAddHotspot());
    set(layer[add_comment_text].parent,get(addCommentHotspotName)); if(auto_rotate==1,stopAutoRotate());

    txtadd(addCommentTextContent,'');


    set(commentHotspotAth,get(view.hlookat));
    set(commentHotspotAtv,get(view.vlookat));


    updateInputComment('随便说点儿吧!（广告及恶意留言将封号）');




    </action>
    <action name="dragAddHotspot">
    if(%1 != dragging,
      spheretoscreen(ath, atv, hotspotcenterx, hotspotcentery);
      sub(drag_adjustx, mouse.stagex, hotspotcenterx);
      sub(drag_adjusty, mouse.stagey, hotspotcentery);
      dragAddHotspot(dragging);

      ,
      if(pressed,
        sub(dx, mouse.stagex, drag_adjustx);
        sub(dy, mouse.stagey, drag_adjusty);
        screentosphere(dx, dy, ath, atv);
        copy(print_ath, ath);
        copy(print_atv, atv);
        roundval(print_ath, 3);
        roundval(print_atv, 3);
        set(hotspot[add_hotspot_comment_bg_container].ath,get(print_ath));
        set(hotspot[add_hotspot_comment_bg_container].atv,get(print_atv));
        set(hotspot[add_comment_text].ath,get(print_ath));
        set(hotspot[add_comment_text].atv,get(print_atv));
        set(hotspot[add_comment_point_text_container].ath,get(print_ath));
        set(hotspot[add_comment_point_text_container].atv,get(print_atv));
        delayedcall(0, dragAddHotspot(dragging) );

        set(commentHotspotAth,get(print_ath));
        set(commentHotspotAtv,get(print_atv));
        );
      );
    </action>

    <action name="updateInputComment"> if(addCommentTextName!=null AND %1!=null,
      set(layer[add_comment_text].html,%1);
      txtadd(comment_tooltip_width_search, %1,'_countend');
      indexoftxt(number_of_characters,get(comment_tooltip_width_search), '_countend',0);
      if(number_of_characters LT 8 ,
        set(layer[add_comment_text].width,auto);
        ,
        set(layer[add_comment_text].width,150);
      );
      set(layer[add_comment_text].height,auto);
      delayedcall(0.2,
        set(layer[add_comment_text].alpha,1);
      );
      ,
      set(layer[add_comment_text].html,'');
    );
    </action>
    <action name="exitEditComment">

    removehotspot(add_hotspot_comment_bg_container);
    removelayer(add_hotspot_comment_mask);
    removelayer(add_hotspot_comment_avatar);
    removehotspot(add_comment_point_text_container);
    removelayer(add_comment_text); if(auto_rotate==1,startAutoRotate());

    show_ui();

    </action>
    <action name="show_pano_comments">
    if(config.feature.show_comment != 0,
      set(config.feature.show_comment,1);
      showComments();
      jscall(calc(js_modify_comment + "('" + config.info.id + "','" + pano_id + "')"));
    );
    </action>



    <action name="hide_vr_hotspot">
	if(webvr.isenabled == true,
	  set(hotspotCount,get(config.panos.pano[get(xml.scene)].hotspots.hotspot.count));
	  for(set(i,0),i LT hotspotCount,inc(i),
			set(hotspotName,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].name));
			if(hotspot[get(hotspotName)].image_type == 2,
				set(hotspot[get(hotspotName)].renderer,webgl);
			);
			if(hotspot[get(hotspotName)].hotspot_type != 0,
				set(hotspot[get(hotspotName)].visible,false);
			);
		);
    set(embedCount,get(config.panos.pano[get(xml.scene)].embeds.embed.count));
	  for(set(i,0),i LT embedCount,inc(i),
			set(embedName,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].name));
			set(hotspot[get(embedName)].renderer,webgl);
		);
	);
    </action>


    <action name="show_vr_hotspot">
	set(hotspotCount,get(config.panos.pano[get(xml.scene)].hotspots.hotspot.count));
  for(set(i,0),i LT hotspotCount,inc(i),
		set(hotspotName,get(config.panos.pano[get(xml.scene)].hotspots.hotspot[get(i)].name));
		set(hotspot[get(hotspotName)].visible,true);
    if(hotspot[get(hotspotName)].image_type == 2,
      set(hotspot[get(hotspotName)].renderer,css3d);
    );
	);
  set(embedCount,get(config.panos.pano[get(xml.scene)].embeds.embed.count));
  for(set(i,0),i LT embedCount,inc(i),
    set(embedName,get(config.panos.pano[get(xml.scene)].embeds.embed[get(i)].name));
    set(hotspot[get(embedName)].renderer,css3d);
  );
    </action>


    <plugin name="WebVR" devices="html5" keep="true" url="" onloaded="copy(webvr, plugin[WebVR]);" mousespeed="0.00125" multireslock="true" fullscreen_mirroring="true" mobilevr_support="true" mobilevr_ipd="63.5" mobilevr_screensize="auto" mobilevr_lens_overlap="1.0" mobilevr_lens_fov="96" mobilevr_lens_dist="0.6" mobilevr_lens_dist2="1|0|0|0" mobilevr_lens_ca="0.0" mobilevr_lens_vign="100" mobilevr_wakelock="true" mobilevr_sensor_mode="3" mobilevr_autocalibration="false" mobilevr_touch_support="true" mobilevr_fake_support="false" vr_cursor="hotspot[vr_cursor]" vr_cursor_enabled="true" vr_cursor_onover="if(handcursor, tween(hotspot[vr_cursor].scale,0.4,0.1); vr_auto_click(get(vr_timeout)); );" vr_cursor_onout="tween(hotspot[vr_cursor].scale,0.3,0.1);" onavailable="webvr_onavailable();" onunavailable="" onunknowndevice="webvr_onunknowndevice();" onentervr="webvr_onentervr();" onexitvr="webvr_onexitvr();" />



    <vrheadsets>
        <headset name="cb1" caption="Cardboard A" overlap="1.10" fov="96.0" dist="1.00" dist2="1|0|0|0" ca="0.000" vig="100" />
        <headset name="cb2" caption="Cardboard B" overlap="1.00" fov="96.0" dist="0.60" dist2="1|0|0|0" ca="0.000" vig="100" />
        <headset name="gvr" caption="GearVR" overlap="1.00" fov="112.0" dist="0.95" dist2="1|0|0|0" ca="0.090" vig="100" />
        <headset name="hom" caption="HOMiDO" overlap="1.00" fov="101.0" dist="1.10" dist2="1|0|0|0" ca="0.075" vig="100" />
        <headset name="one" caption="VR ONE" overlap="1.00" fov="109.9" dist="0.00" dist2="1.139|0.093|0.018|0.207" ca="0.090" vig="35" />
        <headset name="ccr" caption="ColorCross VR" overlap="1.00" fov="70.0" dist="0.65" dist2="1|0|0|0" ca="0.000" vig="100" />
        <headset name="nod" caption="无畸变" overlap="1.00" fov="96.0" dist="0.00" dist2="1|0|0|0" ca="0.000" vig="100" />
    </vrheadsets>



    <hotspot name="vr_cursor" keep="true" url="krp/skin/webvr_cursor_80x80_17f.png" visible="false" enabled="false" distorted="true" crop="0|0|80|80" scale="0.3" depth="1000" />



    <action name="vr_auto_click">
		if(webvr.isenabled,
			if(%1 != null, set(vr_aclk_timeout, %1), set(vr_aclk_timeout, 2000));
			copy(vr_aclk_t1, timertick);
			set(vr_aclk_waiting, true);
			copy(vr_aclk_hotspot, name);
			set(hotspot[vr_cursor].crop,'0|0|80|80');

			asyncloop(vr_aclk_waiting AND vr_aclk_hotspot == name,
				sub(dt, timertick,vr_aclk_t1);

				if(!hovering,
					set(vr_aclk_waiting, false);
					set(hotspot[vr_cursor].crop,'0|0|80|80');
				  ,
					div(f, dt, vr_aclk_timeout);
					mul(f, 16);
					roundval(f);
					Math.min(f, 16);
					mul(f, 80);

					txtadd(hotspot[vr_cursor].crop,get(f),'|0|80|80');

					                                                                                      
					sub(dt, 100);
					if(dt GT vr_aclk_timeout,
						set(vr_aclk_waiting,false);
						set(hotspot[vr_cursor].crop,'0|0|80|80');
						                     
						onclick();
					  );
				  );
				);
		  );
    </action>



    <events name="webvr_events" devices="html5" keep="true" onkeydown="if(webvr AND webvr.isenabled AND keycode==32, webvr.resetSensor() );" onmousedown="if(webvr AND webvr.isenabled, webvr_showbuttons() );" />



    <action name="webvr_onavailable">
		webvr.loadsettings(local);
		                                                                       
		                    
    </action>


    <action name="webvr_onunknowndevice">
		if(webvr.isfake AND device.desktop AND webvr.havesettings == false,
			                                                               
			set(webvr.mobilevr_lens_overlap, 1.0);
			set(webvr.mobilevr_lens_fov, 96.0);
			set(webvr.mobilevr_lens_dist, 0.0);
			set(webvr.mobilevr_lens_dist2, '1|0|0|0');
			set(webvr.mobilevr_lens_ca, 0.0);
			set(webvr.mobilevr_lens_vign, 100);
		  ,
			set(ask_user_for_screensize,true);
		  );
    </action>


    <action name="webvr_onentervr">
		tween(layer[webvr_enterbutton].alpha,0,0);

		webvr_showbuttons();
		webvr_hide_all_non_vr_layers();

		                                                                                                                
		if(webvr.ismobilevr == true AND !webvr.isfake AND ask_user_for_screensize == true AND webvr.mobilevr_screensize == 'auto',
			set(ask_user_for_screensize, false);
			vr_setup();
		  );
		if(webvr.isfake,
			webvr_show_fakemode_info(true);
		  );

			hide_vr_hotspot();
    </action>


    <action name="webvr_onexitvr">
		stopdelayedcall(vr_button_fadeout);

		tween(layer[webvr_enterbutton].alpha,1);
		tween(layer[webvr_exitbutton].alpha,0);
		tween(layer[webvr_setupbutton].alpha,0);

		webvr_show_fakemode_info(false);

		webvr_restore_layers();

		show_vr_hotspot();

    setup_layout();
    </action>


    <action name="webvr_hide_all_non_vr_layers">
		for(set(i,0), i LT layer.count, inc(i),
			copy(lr, layer[get(i)]);
			if(lr.vr !== true,
				copy(lr.vr_backup_visible, lr.visible);
				set(lr.visible, false);
			  );
		  );
    </action>

    <action name="webvr_restore_layers">
		for(set(i,0), i LT layer.count, inc(i),
			copy(lr, layer[get(i)]);
			if(lr.vr_backup_visible,
				copy(lr.visible, lr.vr_backup_visible);
				delete(lr.vr_backup_visible);
			  );
		  );
    </action>

    <action name="webvr_show_fakemode_info">
		if('%1' == 'true',
			addlayer(webvr_fakemode_info);
			set(layer[webvr_fakemode_info].url, 'krp/plugins/textfield.swf');
			set(layer[webvr_fakemode_info].keep, true);
			set(layer[webvr_fakemode_info].align, 'bottom');
			set(layer[webvr_fakemode_info].y, 80);
			set(layer[webvr_fakemode_info].background, false);
			set(layer[webvr_fakemode_info].css, 'color:#FFFFFF;text-align:center;');
			set(layer[webvr_fakemode_info].html, '[i][u]目前是模拟VR模式 ![/u][/i][br]要体验真正的VR，请使用VR设备进行浏览 (移动设备，VR头戴显示器等).');
		  ,
			removelayer(webvr_fakemode_info);
		  );
    </action>



    <krpano webvr_setup_scale="calc:(1.0 + 1.0*(device.mobile AND stagescale LT 1.0)) / (1.0 + 1.0*device.mobile)" webvr_button_scale.normal="1.0" webvr_button_scale.mobile="1.6" />



    <style name="webvr_button_style" url="calc:plugin_url.TEXT_SWF" backgroundcolor="0x000000" backgroundalpha="0.5" roundedge="calc:9*webvr_setup_scale*webvr_button_scale" css="calc:'color:#FFFFFF;font-size:' + 20*webvr_setup_scale*webvr_button_scale + 'px;'" padding="calc:6*webvr_setup_scale*webvr_button_scale + ' ' + 10*webvr_setup_scale*webvr_button_scale" />

    <layer name="webvr_enterbutton" keep="true" vr="true" style="webvr_button_style" html="进入VR模式" align="top" y="24" autoalpha="true" alpha="0.0" onclick="webvr.enterVR();" />

    <layer name="webvr_exitbutton" keep="true" vr="true" style="webvr_button_style" html="退出VR模式" align="top" y="24" autoalpha="true" alpha="0.0" onclick="webvr.exitVR();" />

    <layer name="webvr_setupbutton" keep="true" vr="true" style="webvr_button_style" html="VR模式设置" align="bottom" y="24" autoalpha="true" alpha="0.0" onclick="vr_setup()" />


    <action name="webvr_showbuttons">
		stopdelayedcall(vr_button_fadeout);
		if(webvr.ismobilevr,
			tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton].alpha, 1.0|1.0, 0.25);
			delayedcall(vr_button_fadeout, 3.0, tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton].alpha, 0.0|0.0, 1.0); );
		  ,
			tween(layer[webvr_exitbutton].alpha, 1.0, 0.25);
			delayedcall(vr_button_fadeout, 3.0, tween(layer[webvr_exitbutton].alpha, 0.0, 1.0); );
		  );
    </action>





    <action name="vr_setup">
		                       
		set(webvr.vr_cursor_enabled, false);

		                        
		tween(layer[webvr_exitbutton].alpha,0);
		tween(layer[webvr_setupbutton].alpha,0);

		                                
		addlayer(vr_setup_bg);
		set(layer[vr_setup_bg].type, container);
		set(layer[vr_setup_bg].bgcolor, 0x000000);
		set(layer[vr_setup_bg].bgalpha, 0.5);
		set(layer[vr_setup_bg].bgcapture, true);
		set(layer[vr_setup_bg].handcursor, false);
		set(layer[vr_setup_bg].align, lefttop);
		set(layer[vr_setup_bg].width, 100%);
		set(layer[vr_setup_bg].height, 100%);
		set(layer[vr_setup_bg].zorder, 99999);

		                                                  
		copy(i_screensize, webvr.mobilevr_screensize);
		if(i_screensize == 'auto', copy(i_screensize, webvr.devicesize));
		if(i_screensize LE 0, set(i_screensize, 5.0));
		roundval(i_screensize, 1);
		txtadd(i_screensize, ' inch');

		copy(i_ipd, webvr.mobilevr_ipd);
		roundval(i_ipd, 1);
		txtadd(i_ipd, ' mm');

		copy(i_fov, webvr.mobilevr_lens_fov);
		roundval(i_fov, 1);

		copy(i_dist, webvr.mobilevr_lens_dist);
		roundval(i_dist, 2);

		copy(i_dist2, webvr.mobilevr_lens_dist2);
		txtsplit(i_dist2, '|', i_dist2_k1, i_dist2_k2, i_dist2_k3, i_dist2_k4);
		mul(i_dist2_k1,1);
		mul(i_dist2_k2,10);
		mul(i_dist2_k3,10);
		mul(i_dist2_k4,10);
		roundval(i_dist2_k1,2);
		roundval(i_dist2_k2,2);
		roundval(i_dist2_k3,2);
		roundval(i_dist2_k4,2);

		copy(i_vig, webvr.mobilevr_lens_vign);
		roundval(i_vig, 0);

		copy(i_overlap, webvr.mobilevr_lens_overlap);
		roundval(i_overlap, 2);

		copy(i_ca, webvr.mobilevr_lens_ca);
		roundval(i_ca, 3);

		set(i_headset, 'Custom');
		for(set(i,0), i LT vrheadsets.headset.count, inc(i),
			copy(hs, vrheadsets.headset[get(i)]);
			if(i_overlap == hs.overlap AND i_fov == hs.fov AND i_dist == hs.dist AND i_dist2 == hs.dist2 AND i_ca == hs.ca AND i_vig == hs.vig , copy(i_headset, hs.caption));
		   );

		                                                     
		set(known_size, true);
		set(sizcol, #FFFFFF);
		copy(i_devicename, webvr.devicename);
		if(i_devicename == 'Unknown',
			if(webvr.mobilevr_screensize == 'auto',
				set(sizcol, #AA0000);
				set(known_size, false);
			  ,
				set(i_devicename, 'Custom');
			  );
		  );


		                                       
		addlayer(vr_setup_m1);
		set(layer[vr_setup_m1].type, container);
		set(layer[vr_setup_m1].parent, vr_setup_bg);
		set(layer[vr_setup_m1].align, lefttop);
		set(layer[vr_setup_m1].width, 100%);
		set(layer[vr_setup_m1].height, 100%);

		                                                        
		addlayer(vr_setup_m3);
		set(layer[vr_setup_m3].type, container);
		set(layer[vr_setup_m3].parent, vr_setup_bg);
		set(layer[vr_setup_m3].align, lefttop);
		set(layer[vr_setup_m3].width, 100%);
		set(layer[vr_setup_m3].height, 100%);
		set(layer[vr_setup_m3].visible, false);

		                                              
		addlayer(vr_setup_m2);
		set(layer[vr_setup_m2].type, container);
		set(layer[vr_setup_m2].parent, vr_setup_bg);
		set(layer[vr_setup_m2].align, lefttop);
		set(layer[vr_setup_m2].width, 100%);
		set(layer[vr_setup_m2].height, 100%);
		set(layer[vr_setup_m2].visible, false);

		                                 
		set(vr_setup_text_parent, 'vr_setup_m1');
		vr_setup_createtext(vr_setup_title, 'MOBILE VR 设置',       center, center, 0, -225, #FFFFFF,     false);

		vr_setup_createtext(vr_setup_dvn1, '设备:',         center, right,  0, -145, #FFFFFF,     true, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_dvn2, get(i_devicename), center, left,   0, -145, get(sizcol), true, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_siz1, '屏幕尺寸:',     center, right,  0, -105, #FFFFFF,     true, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_siz2, get(i_screensize), center, left,   0, -105, get(sizcol), true, vr_setup_select('screen') );

		vr_setup_createtext(vr_setup_ipd1, '瞳距:',            center, right,  0,  -35, #FFFFFF,     true, vr_setup_select('ipd') );
		vr_setup_createtext(vr_setup_ipd2, get(i_ipd),        center, left,   0,  -35, #FFFFFF,     true, vr_setup_select('ipd') );

		vr_setup_createtext(vr_setup_hmd1, 'VR头显:',     center, right,  0,  +35, #FFFFFF,     true, vr_setup_select('headset') );
		vr_setup_createtext(vr_setup_hmd2, get(i_headset),    center, left,   0,  +35, #FFFFFF,     true, vr_setup_select('headset') );

		vr_setup_createtext(vr_setup_hmd3, '自定义',       center, center, 0,  +75, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_customize_headset() );



		if(webvr.iswebvr == false,
			vr_setup_createtext(vr_setup_cal, '陀螺仪校准',   center, center,    0, +145, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_calibration() );
		  );

		vr_setup_createtext(vr_setup_sav, '保存',          center, center, -200, +225, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_save() );
		vr_setup_createtext(vr_setup_rst, '恢复默认',         center, center,    0, +225, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_reset() );
		vr_setup_createtext(vr_setup_cls, '关闭',         center, center, +200, +225, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_close() );

		                                  
		vr_setup_createbutton(vr_setup_btn1, '&#60;', left,  left,  5%, -35, #FFFFFF, true, null);
		vr_setup_createbutton(vr_setup_btn2, '&#62;', right, right, 5%, -35, #FFFFFF, true, null);


		                                                   
		set(vr_setup_text_parent, 'vr_setup_m3');
		vr_setup_createtext(vr_setup_m31, 'VR头显', center, center, 0, -225, #FFFFFF, false);

		vr_setup_createtext(vr_setup_fov1,  'FOV:',           center, right,  0,  -80,  #FFFFFF,    true, vr_setup_select('fov') );
		vr_setup_createtext(vr_setup_fov2, get(i_fov),        center, left,   0,  -80,  #FFFFFF,    true, vr_setup_select('fov') );
		vr_setup_createtext(vr_setup_dst1, '失真:',     center, right,  0,  -32,  #FFFFFF,    true, vr_setup_select('dist') );
		vr_setup_createtext(vr_setup_dst2, get(i_dist),       center, left,   0,  -32,  #FFFFFF,    true, vr_setup_select('dist') );
		vr_setup_createtext(vr_setup_d2tx, 'Dist2:',          center, right,  0,  +16,  #FFFFFF,    true, vr_setup_select('dist2k1') );
		vr_setup_createtext(vr_setup_d2k1, get(i_dist2_k1),   center, left,   0,  +16,  #FFFFFF,    true, vr_setup_select('dist2k1') );
		vr_setup_createtext(vr_setup_d2k2, get(i_dist2_k2),   center, left, +100, +16,  #FFFFFF,    true, vr_setup_select('dist2k2') );
		vr_setup_createtext(vr_setup_d2k3, get(i_dist2_k3),   center, left, +200, +16,  #FFFFFF,    true, vr_setup_select('dist2k3') );
		vr_setup_createtext(vr_setup_d2k4, get(i_dist2_k4),   center, left, +300, +16,  #FFFFFF,    true, vr_setup_select('dist2k4') );


		vr_setup_createtext(vr_setup_cac1, 'CA校准:',        center, right,  0,  +64,  #FFFFFF,    true, vr_setup_select('ca') );
		vr_setup_createtext(vr_setup_cac2, get(i_ca),         center, left,   0,  +64,  #FFFFFF,    true, vr_setup_select('ca') );
		vr_setup_createtext(vr_setup_vig1, 'Vignette:',       center, right,  0, +112,  #FFFFFF,    true, vr_setup_select('vignette') );
		vr_setup_createtext(vr_setup_vig2, get(i_vig),        center, left,   0, +112,  #FFFFFF,    true, vr_setup_select('vignette') );
		vr_setup_createtext(vr_setup_olp1, '重叠:',        center, right,  0, +160,  #FFFFFF,    true, vr_setup_select('overlap') );
		vr_setup_createtext(vr_setup_olp2, get(i_overlap),    center, left,   0, +160,  #FFFFFF,    true, vr_setup_select('overlap') );

		vr_setup_createtext(vr_setup_m35, '关闭',       center, center, 0, +225, #FFFFFF, true, set(background,true), set(background,false), vr_setup_close_sub_menus() );


		                                             
		set(vr_setup_text_parent, 'vr_setup_m2');
		vr_setup_createtext(vr_setup_cb1, '陀螺仪', center, center, 0, -225, #FFFFFF, false);
		vr_setup_createtext(vr_setup_cb2, '将设备放在水平且稳定[br]的表面， 点击'校准'按钮[br]', center, center, 0, -95, #FFFFFF, false, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_cb3, '校准',   center, center, 0,  +55, #FFFFFF, true, set(background,true), set(background,false), vr_setup_do_calibration() );
		vr_setup_createtext(vr_setup_cb4, '重置',       center, center, 0, +125, #FFFFFF, true, set(background,true), set(background,false), webvr.resetcalibration() );
		vr_setup_createtext(vr_setup_cb5, '关闭',       center, center, 0, +225, #FFFFFF, true, set(background,true), set(background,false), vr_setup_close_sub_menus() );

		vr_setup_createtext(vr_setup_cb6, '校准中...',      bottom, center, 0, 40, #FFFFFF, false, null );
		vr_setup_createtext(vr_setup_cb7, '校准完毕.',   bottom, center, 0, 40, #FFFFFF, false, null );
		vr_setup_createtext(vr_setup_cb8, '校准失败!', bottom, center, 0, 40, #FFFFFF, false, null );
		set(layer[vr_setup_cb6].autoalpha, true);
		set(layer[vr_setup_cb7].autoalpha, true);
		set(layer[vr_setup_cb8].autoalpha, true);
		set(layer[vr_setup_cb6].alpha, 0.0);
		set(layer[vr_setup_cb7].alpha, 0.0);
		set(layer[vr_setup_cb8].alpha, 0.0);


		                                                                                       
		if(known_size == false,
			vr_setup_select('screen', true);
		  ,
			vr_setup_select('ipd', true);
		  );
    </action>


    <action name="vr_setup_createtext">
		                                                                                                                                                               
		addlayer(%1);
		set(layer[%1].parent, get(vr_setup_text_parent));
		set(layer[%1].url, 'krp/plugins/textfield.swf');
		set(layer[%1].css, calc('text-align:%3;color:%7;font-size:'+40*webvr_setup_scale+'px;font-weight:bold;'));
		set(layer[%1].padding, calc(0 + ' ' + 8*webvr_setup_scale));
		set(layer[%1].roundedge, calc(8*webvr_setup_scale));
		set(layer[%1].background, false);
		set(layer[%1].backgroundcolor, 0xFFFFFF);
		set(layer[%1].backgroundalpha, 0.25);
		set(layer[%1].align, %3);
		set(layer[%1].edge, %4);
		set(layer[%1].x, calc(%5 * webvr_setup_scale));
		set(layer[%1].y, calc(%6 * webvr_setup_scale));
		set(layer[%1].html, %2);
		set(layer[%1].enabled, %8);
		set(layer[%1].ondown, %9);
		set(layer[%1].onup, %10);
		set(layer[%1].onclick, %11);
    </action>


    <action name="vr_setup_createbutton">
		vr_setup_createtext(%1,%2,%3,%4,%5,%6,%7,%8,%9);
		set(layer[%1].css, calc('vertical-align:middle;text-align:center;color:%7;font-size:'+60*webvr_setup_scale+'px;font-weight:bold;'));
		set(layer[%1].background, true);
		set(layer[%1].padding, 0);
		set(layer[%1].roundedge, calc(40 * webvr_setup_scale));
		set(layer[%1].width, calc(70 * webvr_setup_scale));
		set(layer[%1].height, calc(70 * webvr_setup_scale));
		set(layer[%1].vcenter, true);
    </action>


    <action name="vr_setup_reset">
		                              
		set(webvr.mobilevr_screensize, 'auto');
		copy(i_screensize, webvr.devicesize);
		if(i_screensize LE 0, set(i_screensize, 5.0); );
		roundval(i_screensize, 1);
		set(layer[vr_setup_dvn2].html, get(webvr.devicename));
		txtadd(layer[vr_setup_siz2].html, get(i_screensize), ' inch');

		set(webvr.mobilevr_ipd, 63.5);
		copy(i_ipd, webvr.mobilevr_ipd);
		roundval(i_ipd, 1);
		txtadd(layer[vr_setup_ipd2].html, get(i_ipd), ' mm');

		                                                                                                            
		set(webvr.mobilevr_lens_fov, 100);
		set(webvr.mobilevr_lens_dist, 0.5);
		set(webvr.mobilevr_lens_dist2, '1|0|0|0');
		set(webvr.mobilevr_lens_vign, 100);
		set(webvr.mobilevr_lens_overlap, 1.0);
		set(webvr.mobilevr_lens_ca, 0.0);

		if(webvr.isfake AND device.desktop,
			                                                              
			vr_setup_change_headset(-1);
		  ,
			                                                         
			vr_setup_change_headset(+1);
		  );

		vr_setup_select(get(selected_var));
    </action>


    <action name="vr_setup_close">
		                                                             
		removelayer(vr_setup_bg, true);

		                      
		set(webvr.vr_cursor_enabled, true);
    </action>


    <action name="vr_setup_save">
		webvr.saveSettings(local);
		vr_setup_close();
    </action>


    <action name="vr_setup_customize_headset">
		set(layer[vr_setup_bg].bgalpha, 0.1);

		set(layer[vr_setup_m1].visible,false);
		set(layer[vr_setup_m2].visible,false);
		set(layer[vr_setup_m3].visible,true);

		set(layer[vr_setup_hmd1].parent, vr_setup_m3);
		set(layer[vr_setup_hmd2].parent, vr_setup_m3);
		set(layer[vr_setup_btn1].parent, vr_setup_m3);
		set(layer[vr_setup_btn2].parent, vr_setup_m3);

		set(layer[vr_setup_hmd1].y, calc(-145 * webvr_setup_scale));
		set(layer[vr_setup_hmd2].y, calc(-145 * webvr_setup_scale));

		copy(old_selection, selected_var);
		vr_setup_select('headset');
    </action>



    <action name="vr_setup_calibration">
		set(layer[vr_setup_m1].visible,false);
		set(layer[vr_setup_m2].visible,true);
    </action>

    <action name="vr_setup_close_sub_menus">
		set(layer[vr_setup_bg].bgalpha, 0.5);

		set(layer[vr_setup_m1].visible,true);
		set(layer[vr_setup_m2].visible,false);
		set(layer[vr_setup_m3].visible,false);

		set(layer[vr_setup_hmd1].parent, vr_setup_m1);
		set(layer[vr_setup_hmd2].parent, vr_setup_m1);
		set(layer[vr_setup_btn1].parent, vr_setup_m1);
		set(layer[vr_setup_btn2].parent, vr_setup_m1);

		set(layer[vr_setup_hmd1].y, calc(+35 * webvr_setup_scale));
		set(layer[vr_setup_hmd2].y, calc(+35 * webvr_setup_scale));

		if(old_selection,
			vr_setup_select(get(old_selection));
			delete(old_selection);
		  );
    </action>

    <action name="vr_setup_do_calibration">
		if(!webvr.isfake,
			tween(layer[vr_setup_cb6].alpha, 1.0, 0.1);
			tween(layer[vr_setup_cb7].alpha, 0.0, 0.1);
			tween(layer[vr_setup_cb8].alpha, 0.0, 0.1);
			webvr.calibrate(
				tween(layer[vr_setup_cb6].alpha, 0.0, 0.1);
				tween(layer[vr_setup_cb7].alpha, 1.0, 0.1);
				delayedcall(2.0, tween(layer[vr_setup_cb7].alpha, 0.0, 0.25) );
			  ,
				tween(layer[vr_setup_cb6].alpha, 0.0, 0.1);
				tween(layer[vr_setup_cb8].alpha, 1.0, 0.1);
				delayedcall(2.0, tween(layer[vr_setup_cb8].alpha, 0.0, 0.25) );
			  );
		  );
    </action>

    <action name="vr_setup_update_dist2">
		txtadd(webvr.mobilevr_lens_dist2, get(i_dist2_k1), '|', calc(i_dist2_k2/10.0), '|', calc(i_dist2_k3/10.0), '|', calc(i_dist2_k4/10.0));
		vr_setup_change_headset(0);
    </action>

    <action name="vr_setup_select">
		                                       
		set(layer[vr_setup_siz2].background, false);
		set(layer[vr_setup_ipd2].background, false);
		set(layer[vr_setup_hmd2].background, false);
		set(layer[vr_setup_fov2].background, false);
		set(layer[vr_setup_dst2].background, false);
		set(layer[vr_setup_d2k1].background, false);
		set(layer[vr_setup_d2k2].background, false);
		set(layer[vr_setup_d2k3].background, false);
		set(layer[vr_setup_d2k4].background, false);
		set(layer[vr_setup_vig2].background, false);
		set(layer[vr_setup_cac2].background, false);
		set(layer[vr_setup_olp2].background, false);

		set(selected_setting, null);
		delete(selected_var_value);

		set(layer[vr_setup_btn1].ondown, vr_setup_change_ondown(-1) );
		set(layer[vr_setup_btn2].ondown, vr_setup_change_ondown(+1) );
		set(selected_var_callback, null);

		set(selected_var, %1);

		if(selected_var == 'screen',
			set(selected_setting,      vr_setup_siz2);
			set(selected_var_name,     'webvr.mobilevr_screensize');
			set(selected_var_postfix,  ' inch');
			copy(selected_var_value,   get(selected_var_name));
			if(selected_var_value == 'auto', copy(selected_var_value, webvr.devicesize));
			if(selected_var_value LE 0, set(selected_var_value, 5.0));
			set(selected_var_step,     0.1);
			set(selected_var_min,      4);
			set(selected_var_max,      10);
			set(selected_var_round,    1);
			set(selected_var_callback, vr_setup_change_screen() );
		  );

		if(selected_var == 'ipd',
			set(selected_setting,      vr_setup_ipd2);
			set(selected_var_name,     'webvr.mobilevr_ipd');
			set(selected_var_postfix,  ' mm');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.1);
			set(selected_var_min,      40);
			set(selected_var_max,      80);
			set(selected_var_round,    1);
		  );

		if(selected_var == 'headset',
			set(selected_setting,      vr_setup_hmd2);
			set(layer[vr_setup_btn1].ondown, vr_setup_change_headset(-1) );
			set(layer[vr_setup_btn2].ondown, vr_setup_change_headset(+1) );
		  );

		if(selected_var == 'fov',
			set(selected_setting,      vr_setup_fov2);
			set(selected_var_name,     'webvr.mobilevr_lens_fov');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.1);
			set(selected_var_min,      40);
			set(selected_var_max,      179);
			set(selected_var_round,    1);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(selected_var == 'dist',
			set(selected_setting,      vr_setup_dst2);
			set(selected_var_name,     'webvr.mobilevr_lens_dist');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      0);
			set(selected_var_max,      5);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(selected_var == 'dist2k1',
			set(selected_setting,      vr_setup_d2k1);
			set(selected_var_name,     'i_dist2_k1');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -9);
			set(selected_var_max,      +9);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_update_dist2() );
		  );

		if(selected_var == 'dist2k2',
			set(selected_setting,      vr_setup_d2k2);
			set(selected_var_name,     'i_dist2_k2');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -9);
			set(selected_var_max,      +9);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_update_dist2() );
		  );

		if(selected_var == 'dist2k3',
			set(selected_setting,      vr_setup_d2k3);
			set(selected_var_name,     'i_dist2_k3');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -9);
			set(selected_var_max,      +9);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_update_dist2() );
		  );

		if(selected_var == 'dist2k4',
			set(selected_setting,      vr_setup_d2k4);
			set(selected_var_name,     'i_dist2_k4');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -9);
			set(selected_var_max,      +9);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_update_dist2() );
		  );

		if(selected_var == 'vignette',
			set(selected_setting,      vr_setup_vig2);
			set(selected_var_name,     'webvr.mobilevr_lens_vign');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     1);
			set(selected_var_min,      10);
			set(selected_var_max,      200);
			set(selected_var_round,    0);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(selected_var == 'ca',
			set(selected_setting,      vr_setup_cac2);
			set(selected_var_name,     'webvr.mobilevr_lens_ca');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -1.0);
			set(selected_var_max,      +1.0);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(selected_var == 'overlap',
			set(selected_setting,      vr_setup_olp2);
			set(selected_var_name,     'webvr.mobilevr_lens_overlap');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      0.5);
			set(selected_var_max,      2.0);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(selected_setting != null,
			set(layer[get(selected_setting)].background, true);
			if(%2 == true,
				set(layer[vr_setup_btn1].y, get(layer[get(selected_setting)].y));
				set(layer[vr_setup_btn2].y, get(layer[get(selected_setting)].y));
			  ,
				tween(layer[vr_setup_btn1].y, get(layer[get(selected_setting)].y));
				tween(layer[vr_setup_btn2].y, get(layer[get(selected_setting)].y));
			  );
		  );
    </action>


    <action name="vr_setup_change_screen">
		set(layer[vr_setup_dvn2].html, 'Custom');
		set(layer[vr_setup_dvn2].css, calc('color:#FFFFFF;font-size:'+40*webvr_setup_scale+'px;font-weight:bold;'));
		set(layer[vr_setup_siz2].css, calc('color:#FFFFFF;font-size:'+40*webvr_setup_scale+'px;font-weight:bold;'));
    </action>


    <action name="vr_setup_change_ondown">
		copy(t0,timertick);
		set(t1,0);
		asyncloop(pressed,
			copy(t2,timertick);
			sub(dt,t2,t1);
			if(dt GT 100,
				copy(t1,t2);
				sub(dt,t1,t0);
				div(dt,1000);
				Math.max(dt,1);
				mul(dt,%1);
				vr_setup_adjust(get(dt));
			  );
		  );
    </action>


    <action name="vr_setup_adjust">
		if(selected_setting != null,
			mul(change, selected_var_step, %1);
			add(selected_var_value, change);
			Math.max(selected_var_value, selected_var_min);
			Math.min(selected_var_value, selected_var_max);
			roundval(selected_var_value, get(selected_var_round));
			tween(get(selected_var_name), get(selected_var_value), 0.1);
			txtadd(layer[get(selected_setting)].html, get(selected_var_value), get(selected_var_postfix));
			if(selected_var_callback != null, selected_var_callback());
		  );
    </action>


    <action name="vr_setup_change_headset">
		set(i_headset, 'Custom');
		if(%1 != 0,
			copy(i_fov, webvr.mobilevr_lens_fov);
			roundval(i_fov, 1);
			copy(i_dist, webvr.mobilevr_lens_dist);
			roundval(i_dist, 2);
			copy(i_dist2, webvr.mobilevr_lens_dist2);
			copy(i_vig, webvr.mobilevr_lens_vign);
			roundval(i_vig, 0);
			copy(i_ca, webvr.mobilevr_lens_ca);
			roundval(i_ca, 3);
			copy(i_overlap, webvr.mobilevr_lens_overlap);
			roundval(i_overlap, 2);
			set(i_hsindex, -1);
			copy(i_hscount, vrheadsets.headset.count);
			for(set(i,0), i LT i_hscount, inc(i),
				copy(hs, vrheadsets.headset[get(i)]);
				if(i_overlap == hs.overlap AND i_fov == hs.fov AND i_dist == hs.dist AND i_dist2 == hs.dist2 AND i_ca == hs.ca AND i_vig == hs.vig , copy(i_hsindex, i); copy(i_headset, hs.caption); );
			   );

			if(%1 GT 0,
				                   
				add(i_hsindex, 1);
				if(i_hsindex GE i_hscount, set(i_hsindex,0));
			  ,
				                  
				sub(i_hsindex, 1);
				if(i_hsindex LT 0, sub(i_hsindex,i_hscount,1));
			  );

			copy(hs, vrheadsets.headset[get(i_hsindex)]);
			copy(i_headset, hs.caption);
			copy(i_overlap, hs.overlap);
			copy(i_fov,     hs.fov);
			copy(i_dist,    hs.dist);
			copy(i_dist2,   hs.dist2);
			copy(i_ca,      hs.ca);
			copy(i_vig,     hs.vig);
		  );

		copy(layer[vr_setup_hmd2].html, i_headset);
		if(%1 != 0,
			copy(webvr.mobilevr_lens_overlap, i_overlap);
			copy(webvr.mobilevr_lens_fov, i_fov);
			copy(webvr.mobilevr_lens_dist, i_dist);
			copy(webvr.mobilevr_lens_dist2, i_dist2);
			copy(webvr.mobilevr_lens_ca, i_ca);
			copy(webvr.mobilevr_lens_vign, i_vig);
			copy(layer[vr_setup_olp2].html, i_overlap);
			copy(layer[vr_setup_fov2].html, i_fov);
			copy(layer[vr_setup_dst2].html, i_dist);

			txtsplit(i_dist2, '|', i_dist2_k1, i_dist2_k2, i_dist2_k3, i_dist2_k4);
			mul(i_dist2_k1,1);
			mul(i_dist2_k2,10);
			mul(i_dist2_k3,10);
			mul(i_dist2_k4,10);
			roundval(i_dist2_k1,2);
			roundval(i_dist2_k2,2);
			roundval(i_dist2_k3,2);
			roundval(i_dist2_k4,2);
			copy(layer[vr_setup_d2k1].html, i_dist2_k1);
			copy(layer[vr_setup_d2k2].html, i_dist2_k2);
			copy(layer[vr_setup_d2k3].html, i_dist2_k3);
			copy(layer[vr_setup_d2k4].html, i_dist2_k4);

			copy(layer[vr_setup_cac2].html, i_ca);
			copy(layer[vr_setup_vig2].html, i_vig);
		  );
    </action>





    <plugin name="WebVR" keep="true" devices="html5" url="" multireslock.desktop="true" multireslock.mobile.or.tablet="false" mobilevr_support="true" mobilevr_fake_support="true" onavailable="removelayer(webvr_enterbutton); webvr_onavailable();" onunavailable="disable_vr();" onentervr="webvr_onentervr(); webvr_setup(); " onexitvr="webvr_onexitvr(); webvr_setup(); " />


    <style name="webvr_button_style" border="false" roundedge="calc:1.0" backgroundcolor="0x2D3E50" backgroundalpha="0.8" shadow="0.01" shadowrange="10.0" shadowangle="90.0" shadowcolor="0x30261B" shadowalpha="0.50" css="calc:'color:#FFFFFF; font-family:Arial;' + ' color:#FFFFFF;font-size:' + 20*webvr_setup_scale*webvr_button_scale + 'px;'" />


    <layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile" url="krp/skin/rotate_device_1.png" scale="0.5" align="top" edge="center" y="28%" autoalpha="true" alpha="0.0" enabled="false" />

    <events name="webvr_events" keep="true" devices="html5" onxmlcomplete="webvr_set_startup_view()" onresize.mobile="webvr_act_as_gyro_in_portrait_mode();" onloadcomplete="delayedcall(0.5, if(webvr.isenabled AND scene.count GT 1 , set(hotspot[webvr_prev_scene].visible,true); set(hotspot[webvr_next_scene].visible,true); ); );" onviewchange="" />

    <action name="webvr_set_startup_view">
			if((webvr.isenabled OR plugin[skin_gyro].enabled) ,
				skin_lookat( get(xml.view.hlookat) );
			  );
    </action>

    <action name="webvr_setup">
			if(webvr.isenabled,
			                                                                                                                                                                                                                       
				copy(loadscene_flags_backup, MERGE);
				set(skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|NOPREVIEW);
				webvr_act_as_gyro_in_portrait_mode(true);
				if(scene.count GT 1 ,
					set(hotspot[webvr_prev_scene].visible, true);
					set(hotspot[webvr_next_scene].visible, true);
					set(events[webvr_events].onviewchange, webvr_menu_following());
				  );
			  ,
				if(loadscene_flags_backup !== null, copy(skin_settings.loadscene_flags, loadscene_flags_backup));
				tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
				set(hotspot[webvr_prev_scene].visible, false);
				set(hotspot[webvr_next_scene].visible, false);
				set(events[webvr_events].onviewchange, null);
			  );
    </action>

    <action name="webvr_act_as_gyro_in_portrait_mode">
			if(device.mobile AND webvr.isenabled,
				div(aspect, stagewidth, stageheight);
				if(aspect != lastaspect OR '%1' == 'true',
					copy(lastaspect, aspect);
					if(stagewidth GT stageheight,
						                                                                                        
						set(display.stereo, true);
						set(webvr.mobilevr_sensor_mode, 3);
						webvr.update();
						tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
					  ,
						                                                                                           
						set(display.stereo, false);
						set(webvr.mobilevr_sensor_mode, 1);
						webvr.update();
						tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0);
						delayedcall(3.0, tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 1.0); );
					  );
				  );
			  ,
				set(lastaspect, 0);
			  );
    </action>


    <style name="webvr_menu_style" depth="800" scale="0.5" distorted="true" ath="0" atv="45" alpha="0.5" />



    <action name="webvr_menu_following" type="Javascript" devices="html5"><![CDATA[
			var hs1 = krpano.get("hotspot[webvr_prev_scene]");
			var hs2 = krpano.get("hotspot[webvr_next_scene]");
			if(!hs1.hovering && !hs2.hovering)
			{
				var f = 0.01;	// following speed factor
				var h = krpano.view.hlookat;
				var v = krpano.view.vlookat;
				var hsh = hs1.ath;
				var hsv = hs1.atv;
				h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
				v   = (v  -(v|0))   + (((v|0)  +360180)%360) - 180.0;
				hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;
				var dh = h - hsh;
				dh += (dh > 180) ? -360 : (dh < -180) ? 360 : 0
				hsh += dh*f;
				var a = Math.abs(v - hsv) / 90.0;
				a = 1.0 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);
				v = v + 55.0 - v*1.5;
				hsv = hsv*(1.0 - f) + v*f;
				hs1.ath = hs2.ath = hsh;
				hs1.atv = hs2.atv = hsv;
				hs1.alpha = hs2.alpha = a;
			}
		]]>    </action>





</krpano>
